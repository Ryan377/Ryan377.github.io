<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>笛卡尔的“方法”</title>
    <link href="/2021/10/08/%E7%AC%9B%E5%8D%A1%E5%B0%94%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <url>/2021/10/08/%E7%AC%9B%E5%8D%A1%E5%B0%94%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h3 id="1、确定性"><a href="#1、确定性" class="headerlink" title="1、确定性"></a>1、确定性</h3><p>​        在阅读笛卡尔的哲学作品时，我们可以看到他对确定性的追求，笛卡尔试图建立一个完善的思想体系，其中的各条原理不仅仅是真的，而且以一种清晰的方式联结起来，让我们可以从一条真实的原理推进到另一条真实的原理。为了达成这样的体系，笛卡尔认为有必要制定出一个完整的规划，借助这个规划，不仅能够将现有的知识组织起来，还能够通过理性去发现我们尚不知道的真理，这就是我们所说的笛卡尔的“方法”。</p><p>​        笛卡尔的方法在于利用一套规则来驾驭心灵的各种能力，他无法接受当时一些经院学者对真理问题毫无章法的探讨，希望能够以一种系统的、有序的方式进行思维，而方法则是能够指导我们的直觉和推理能力有序运作的规则。</p><h3 id="2、数学的例证"><a href="#2、数学的例证" class="headerlink" title="2、数学的例证"></a>2、数学的例证</h3><p>​        笛卡尔有这样的想法和他对数学的研究密不可分，在数学中我们可以直接而清楚地领会一些基本原理，也就是直观，因此笛卡尔认为在其他领域中我们应当也有清楚地知晓某些观念的能力。而在数学中，以一些基本原理为基础，我们可以按照有序的方法从已知的东西前进到未知的东西，也就是我们所说的演绎，那么这一推理方法应该也能被运用到别的领域。也就是说通过直观和演绎这两种方式我们可以掌握知识，不仅能够拥有关于数学概念的知识的可靠性，而且能还拥有关于实在本质的知识的可靠性。而这也就是笛卡尔方法的关键成分。他的方法的另一个成分包括指导直观和演绎的规则。比如笛卡尔在《谈谈方法》中制定的四条准则，并说”只要我立下坚定不移的决心，决不在任何情况下不遵守它们“，这四条准则就完全够用了，笛卡尔认为只要按照他提出的诸条规则，通过直观和演绎，我们就能构建出知识的大厦。</p><h3 id="3、奥古斯丁的观点"><a href="#3、奥古斯丁的观点" class="headerlink" title="3、奥古斯丁的观点"></a>3、奥古斯丁的观点</h3><p>​        笛卡尔的方法意味着我们能够通过自身的理性来认识真理，但在笛卡尔之前，关于人类如何认识真理有许多不同的看法，比如奥古斯丁的“光照论”。奥古斯丁认为，一切真理都存在于上帝之中，上帝是真理的来源，真理是上帝之光，“光照”是人的理性获得、理解、认识真理的途径。</p><p>​        奥古斯丁是这样解释光照论的，当我们用肉眼去看一个物体时，只要物体是沐浴在光照之下，我们就能对这个物体形成图像。同样，只要永恒的对象也沐浴在与它们相适合的光照之下，那么我们的心灵也可以“看到”永恒的对象。也就是说，如果人的心灵想“看见“永恒的和必然的真理的话，它就需要光照。没有光照我们不能“看见”理智理解的对象或理智的真理，就像没有阳光我们不能看见世界上的事物一样。对奥古斯丁来说，光照来自上帝。虽然光照论也说明了理性在认识真理过程中的作用，就像眼睛在看到事物中的作用一样，但是奥古斯丁认为信仰是先于理性的，对他来说，信仰照耀着理性，没有信仰就没有理解，可以认为真理是在理性之上的。这和《旧约》里先知以赛亚所说的“除非你信，否则不会理解”十分相似。</p><p>​        相比较于光照论，笛卡尔的方法则是将理性和真理至少置于了同等的地位上，人类可以仅凭自身的理性去认识真理，而不是去借助于别的力量，这种思想中暗含了一种人为自然立法的观念，对科学的发展起到了推动的作用。</p><p>​        但是虽然笛卡尔和奥古斯丁对人类认识真理的方式有不同的解释，他们的思想都离不开对确定性的追求，只不过他们将这个确定性寄托在了不同的事物上，他们的观点中都暗示存在着一个绝对的、永恒的真理的想法，并且认为我们人类的理性可以认识到这样一种真理，笛卡尔相信只要我们运用了正确的方法，就没有人类理性不能解决的问题。这种对人类理性能力的乐观主义也受到了后来者的一些质疑。</p><h3 id="4、自身观点"><a href="#4、自身观点" class="headerlink" title="4、自身观点"></a>4、自身观点</h3><p>​        如果我们仔细关注我们是如何获得知识的话，我们会发现这种对理性能力的乐观确实是有待商榷的，比如我们即使每天都看到太阳从东边升起，我们也无法确定太阳明天一定会从东边升起。虽然笛卡尔认为真理需要经过怀疑的检验才能被接受，但如果严格将这样的方法应用到认识事物本质的研究中，我们所得到的只是一些类似于数学中的观念上的相互联系，先不讨论是否正确，它们和实际事物其实并没有什么关系。斯宾诺莎和莱布尼茨也用和笛卡尔类似的方法对事物本质的问题进行了研究，但是他们得出来的结论却是有多样性的，通过笛卡尔、斯宾诺莎和莱布尼茨之间的差异，我们可以看出这种研究事物本质的方法是存在一定的独断性的。笛卡尔的方法在数学领域可以很好地应用，但在其他领域，尤其是研究事物本质时还是不能很好地解释一些问题。</p><p>​        关于绝对真理是否存在，以及我们是否能认识到绝对的真理或者事物的本质，我认为这些问题我们确实是难以知道的，我们无法知道这样的绝对真理是否存在，即使存在我们也不知道自己是否能获得，因为我们自身的理性能力的限制，事物本质的问题是我们无法完全掌握的。我们只能关注我们能看到的事物的表象，也只需要关注我们能看到的事物的表象，即使它不是事物的本质，因为相较于把不确定是否为真理的知识当成真理，我认为承认自己没有掌握真理的能力，只知道一些从观察中得出的经验会是一个更好的选择。持这样一种态度还有一种好处，我们能够始终保持一种随时更新自己知识的开放态度，这样当和发生和我们经验相违背的事情的时候，我们就不会产生世界发生混乱了的担忧，因为我们知道这不是事物的本质发生了变化，只不过是我们的经验在某些情况下不适用罢了。</p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>哲学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ElasticSearch简介</title>
    <link href="/2021/08/15/ElasticSearch%E5%8E%9F%E7%90%86/"/>
    <url>/2021/08/15/ElasticSearch%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="ES如何解决搜索问题"><a href="#ES如何解决搜索问题" class="headerlink" title="ES如何解决搜索问题"></a>ES如何解决搜索问题</h2><p>ElasticSearch是构建在Apache Lucene上的开源分布式搜索引擎。</p><p>由于ElasticSearch是以Lucene作为底层的，Lucene是一个高性能的搜索引擎包，默认情况下会将所有数据进行索引，Lucene使用的是倒排索引，倒排索引如下所示：</p><div class="table-container"><table><thead><tr><th>博客文章ID</th><th>标签</th><th>标签</th><th>博客文章ID</th></tr></thead><tbody><tr><td>1</td><td>elections</td><td>elections</td><td>1,3</td></tr><tr><td>2</td><td>peace</td><td>peace</td><td>2,3,4</td></tr><tr><td>3</td><td>elections, peace</td><td></td><td></td></tr><tr><td>4</td><td>peace</td><td></td></tr></tbody></table></div><p>左边是原始数据，右边则是倒排索引。</p><p>一个关键的问题：如何排序，方法是计算相关性得分，根据分数将结果排序，默认情况下使用的算法是TF-IDF（词频-逆文档频率），主要有两个影响因素：</p><ol><li>词频，出现次数越高，相关性得分越高。</li><li>逆文档频率，在所有文档上出现次数少的词权重越高，得分越高。</li></ol><p>ES不仅仅是精确匹配用户的输入，还可以：</p><ol><li>处理错误拼写</li><li>支持变体</li><li>使用统计信息</li><li>给予自动提示</li></ol><h2 id="ES使用场景"><a href="#ES使用场景" class="headerlink" title="ES使用场景"></a>ES使用场景</h2><p>ES主要有三种使用场景</p><p>一、将ES作为主要的后端系统：</p><p>ES是一个现代化搜索引擎，提供了持久化存储、统计和很多其他数据存储的特性。可用作简单系统的后端。</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210822213341.png" alt="场景1"></p><p>二、将ES添加到现有的系统：</p><p>在有一个数据存储的基础上使用ES，如果想在现有系统中加入搜索功能，可以加入ES让它和现有模块协同工作。</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210822213623.png" alt="场景2"></p><p>三、将ES和现有工具一同使用：</p><p>可以通过Rsyslog、Logstash或Apache Flume这样的日志工具处理日志并输出到ElasticSearch，并用Kibana作可视化界面搜索和分析日志。</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210822213652.png" alt="场景3"></p>]]></content>
    
    
    <categories>
      
      <category>原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>ElasticSearch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>机器学习概念</title>
    <link href="/2021/07/24/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E5%BF%B5/"/>
    <url>/2021/07/24/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E5%BF%B5/</url>
    
    <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>机器学习就是通过算法使得机器能从大量数据中学习规律从而对新样本做决策。</p><p>这个规律就是决策（预测）函数。</p><h2 id="机器学习的三要素"><a href="#机器学习的三要素" class="headerlink" title="机器学习的三要素"></a>机器学习的三要素</h2><h3 id="1-模型"><a href="#1-模型" class="headerlink" title="1. 模型"></a><strong>1. 模型</strong></h3><p>首先要确定输入空间$X$和输出空间$Y$，它们构成了一个样本空间。我们的目标是找到它们的一个近似真实的映射函数或条件概率分布。</p><p>根据经验来假设一个函数集合$F$，称为假设空间，通过其在训练集$D$上的特性，从中选择一个理想的假设$f^*\in F$；</p><p>通常$F=\{f(x;\theta)|\theta\in R^D\}$；</p><p>$f(x;\theta)$也称为模型，根据假设空间是线性还是非线性将$f$分为线性模型和非线性模型。</p><h3 id="2-学习准则"><a href="#2-学习准则" class="headerlink" title="2. 学习准则"></a><strong>2. 学习准则</strong></h3><p>模型的好坏可以通过期望风险$R(\theta)$来衡量</p><script type="math/tex; mode=display">R(\theta)=E_{(x,y)~p_r(x,y)}|L(y,f(x;\theta))|</script><p>其中$|L(y,f(x;\theta))|$为损失函数，常用的有</p><ul><li>0-1损失函数</li><li>平方损失函数</li><li>交叉熵损失函数</li><li>Hinge损失函数</li></ul><p>一个切实可行的学习准则是找到一组参数使得经验风险最小，这就是经验最小化（ERM）准则，为了避免过拟合，还要引入参数正则化，使其不要过度最小化经验风险，即结构风险最小化（SRM）准则。</p><h3 id="3-优化算法"><a href="#3-优化算法" class="headerlink" title="3. 优化算法"></a><strong>3. 优化算法</strong></h3><p>找最优模型就是一个最优化问题，机器学习的过程就是最优化问题的求解过程。</p><p>优化可以分为参数优化和超参数优化，模型中的$\theta$是模型的参数，除此之外还有一类参数是用来定义模型结构或优化策略的，这类参数叫超参数。</p><ul><li>梯度下降法</li><li>提前停止</li><li>随机梯度下降法</li><li>小批量梯度下降法</li></ul><h2 id="机器学习算法的类型"><a href="#机器学习算法的类型" class="headerlink" title="机器学习算法的类型"></a>机器学习算法的类型</h2><h3 id="1-监督学习"><a href="#1-监督学习" class="headerlink" title="1. 监督学习"></a>1. 监督学习</h3><p>监督学习的目标是建模样本的特征$x$和标签的特征$y$之间的关系，并且训练集中的每个样本都有标签，根据标签类型可以分为回归问题、分类问题和结构化学习问题。</p><h3 id="2-无监督学习"><a href="#2-无监督学习" class="headerlink" title="2. 无监督学习"></a>2. 无监督学习</h3><p>无监督学习是从不包含目标标签的训练样本中自动学习到一些有价值的信息。</p><h3 id="3-强化学习"><a href="#3-强化学习" class="headerlink" title="3. 强化学习"></a>3. 强化学习</h3><p>强化学习是一类通过交互来学习的机器学习算法，在强化学习中，智能体根据环境的状态作出一个动作，并得到即时或延时的奖励，智能体在和环境的交互中不断学习并调整策略，以取得最大化的期望总回报。</p><h2 id="评价指标"><a href="#评价指标" class="headerlink" title="评价指标"></a>评价指标</h2><p>为了衡量一个机器学习模型的好坏，需要给定一个测试集，用模型对测试集中的每一个样本进行预测，并根据预测结果计算评价分数。</p><p>常见指标有：</p><ul><li>准确率</li><li>错误率</li><li>精确率和召回率</li><li>…</li></ul><h2 id="理论和定理"><a href="#理论和定理" class="headerlink" title="理论和定理"></a>理论和定理</h2><p>机器学习有名的理论或定理</p><ol><li>PAC学习理论：一个PAC可学习的算法是指该学习算法能在多项式时间内从合理数量的训练数据中学习到一个近似正确的$f(x)$</li><li>没有免费午餐定理：对于基于迭代的最优化算法，不存在某种算法对于所有问题都有效。不存在一种机器学习算法适合任何领域或任务</li><li>奥卡姆剃须刀原理：简单的模型泛化能力更好，如果有两个性能相近的模型，我们应该选择更简单的模型。</li><li>丑小鸭定理：丑小鸭与白天鹅之间的区别和两只白天鹅之间的区别一样大，原因是一切相似性的标准都是主观的。</li><li>归纳偏置：对要学习的问题做一些假设。</li></ol>]]></content>
    
    
    <categories>
      
      <category>原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用选择器的坑</title>
    <link href="/2021/07/21/%E4%BD%BF%E7%94%A8%E9%80%89%E6%8B%A9%E5%99%A8%E7%9A%84%E5%9D%91/"/>
    <url>/2021/07/21/%E4%BD%BF%E7%94%A8%E9%80%89%E6%8B%A9%E5%99%A8%E7%9A%84%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<p>前几天想用td选择器给单元格加一个效果，但怎么修改都无法生效，折腾了半天发现选择器参数如果是一个变量就没有效果，比如下面的<code>data[k]</code>，要想使用变量的话要给它用下面这种方式加两个引号，注意加引号的方式，引号不是用来包含这个变量的。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-string">&quot;rowCallback&quot;</span> : <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">row, data, index</span>) </span>&#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> k <span class="hljs-keyword">in</span> data) &#123;<br>                    <span class="hljs-keyword">if</span> (<span class="hljs-regexp">/.+.(wrong data)/</span>.test(data[k])) &#123;<br>                        $(<span class="hljs-string">&#x27;td:contains(&#x27;</span>+ data[k] +<span class="hljs-string">&#x27;)&#x27;</span>, row).html(<span class="hljs-string">&#x27;&lt;span style=&quot;color:red&quot;&gt;&lt;b&gt;&#x27;</span> + data[k] + <span class="hljs-string">&#x27;&lt;/b&gt;&lt;/span&gt;&#x27;</span>);<br>                    &#125;<br>                &#125;<br>            &#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>问题记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vim卡住</title>
    <link href="/2021/06/17/vim%E5%8D%A1%E4%BD%8F/"/>
    <url>/2021/06/17/vim%E5%8D%A1%E4%BD%8F/</url>
    
    <content type="html"><![CDATA[<p>今天用vim突然卡住，按什么键都不能恢复，查了下发现是因为不小心按了Ctrl+S，这个快捷键的含义是“阻断向终端输出内容”。</p><span id="more"></span><p>解决办法：</p><p>快捷键 Ctrl+Q ：“恢复向终端输出内容”</p>]]></content>
    
    
    <categories>
      
      <category>问题记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用GaussDB(for mysql)和ECS弹性云服务器</title>
    <link href="/2021/06/17/%E4%BD%BF%E7%94%A8GaussDB(for-mysql)%E5%92%8CECS%E5%BC%B9%E6%80%A7%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2021/06/17/%E4%BD%BF%E7%94%A8GaussDB(for-mysql)%E5%92%8CECS%E5%BC%B9%E6%80%A7%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="GaussDB-for-mysql"><a href="#GaussDB-for-mysql" class="headerlink" title="GaussDB(for mysql)"></a>GaussDB(for mysql)</h3><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210617233119.png" alt="架构"></p><span id="more"></span><p>GaussDB(for MySQL)是华为自研的最新一代高性能企业级分布式数据库，完全兼容MySQL。能快速添加只读实例。</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210617215046.png" alt="节点信息"></p><h3 id="ECS弹性云服务器"><a href="#ECS弹性云服务器" class="headerlink" title="ECS弹性云服务器"></a>ECS弹性云服务器</h3><p>弹性云服务器（Elastic Cloud Server, ECS）是由CPU、内存、操作系统、云硬盘组成的计算组件，弹性云服务器创建成功后，您就可以像使用自己的本地PC或物理服务器一样，在云上使用弹性云服务器。</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210617215059.png" alt="服务器安全组"></p><h3 id="Nginx负载均衡"><a href="#Nginx负载均衡" class="headerlink" title="Nginx负载均衡"></a>Nginx负载均衡</h3><p>用Nginx进行TCP端口的转发，使不同的操作发送到ECS云服务器不同的端口上。</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210617215437.png" alt="配置Nginx"></p><p>云服务器连接GaussDB后，在本机上透过云服务器访问GaussDB：</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210617234427.png" alt="访问GaussDB"></p><h2 id="修改JavaWeb的项目"><a href="#修改JavaWeb的项目" class="headerlink" title="修改JavaWeb的项目"></a>修改JavaWeb的项目</h2><p>本地数据库上传云数据库：</p><p>首先把本项目所需的数据库表上传到云数据库GaussDB上。</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210617235414.png" alt="数据库迁移"></p><p>端口转发：</p><p>将图书管理系统分解成两个webapp，管理员通过3333端口访问，读者通过3334端口访问。</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210618113252.png" alt="3333端口访问"></p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210618113221.png" alt="3334端口访问"></p><p>将项目部署到云服务器：</p><p>将项目打包成war包，通过Xftp传到ECS云服务器，通过云服务器访问。</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210618122625.png" alt="Xstp上传云服务器"></p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210618113330.png" alt="云服务器3333访问"></p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210618113411.png" alt="云服务器3334访问"></p><p>参考：<a href="https://blog.csdn.net/weixin_44593531/article/details/107489066?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162393202416780269851043%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=162393202416780269851043&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v29-2-107489066.first_rank_v2_pc_rank_v29&amp;utm_term=Java%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8ECS&amp;spm=1018.2226.3001.4187">将一个JavaWeb项目部署到ECS云服务器</a></p>]]></content>
    
    
    <categories>
      
      <category>实践</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>JavaWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多线程同步</title>
    <link href="/2021/06/11/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/"/>
    <url>/2021/06/11/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/</url>
    
    <content type="html"><![CDATA[<p>实现两个并行执行的线程的数据同步</p><p>（使用Java同步机制）</p><span id="more"></span><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EmuExe</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">execute</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep((<span class="hljs-keyword">int</span>) Math.random() * <span class="hljs-number">1000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Exception!&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadSync</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Object lock = <span class="hljs-keyword">new</span> Object();<br>Flag flag = <span class="hljs-keyword">new</span> Flag(<span class="hljs-keyword">true</span>);<br>        ThreadA thread1 = <span class="hljs-keyword">new</span> ThreadA(lock, flag);<br>        ThreadB thread2 = <span class="hljs-keyword">new</span> ThreadB(lock, flag);<br>        thread1.start();<br>        thread2.start();<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Flag</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> flag;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Flag</span> <span class="hljs-params">(<span class="hljs-keyword">boolean</span> flag)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.flag = flag;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadA</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">int</span> A = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Object lock;<br><span class="hljs-keyword">private</span> Flag flag;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ThreadA</span><span class="hljs-params">(Object lock, Flag flag)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.lock = lock;<br><span class="hljs-keyword">this</span>.flag = flag;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br><br>            <span class="hljs-keyword">if</span>(ThreadA.A + ThreadB.B != <span class="hljs-number">100</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;Error!&quot;</span>);<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;the value of A is &quot;</span> + A);<br><br>            <span class="hljs-keyword">synchronized</span> (lock) &#123;<br>                flag.flag = !flag.flag;<br>                <span class="hljs-keyword">if</span> (flag.flag) &#123;<br>                    lock.notify();<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        lock.wait();<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br>                &#125;<br>            &#125;<br><br>            incA();<br><br>            <span class="hljs-keyword">if</span> (i != <span class="hljs-number">99</span>) &#123;<br>                <span class="hljs-keyword">synchronized</span> (lock) &#123;<br>                    flag.flag = !flag.flag;<br>                    <span class="hljs-keyword">if</span> (flag.flag) &#123;<br>                        System.out.println(<span class="hljs-string">&quot;waiting A&quot;</span>);<br>                        lock.notify();<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br><br>                        <span class="hljs-keyword">try</span> &#123;<br>                            lock.wait();<br>                        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                            e.printStackTrace();<br>                        &#125;<br><br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">incA</span><span class="hljs-params">()</span> </span>&#123;<br>        A++;<br>        EmuExe.execute();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadB</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">int</span> B = <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Object lock;<br><span class="hljs-keyword">private</span> Flag flag;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ThreadB</span><span class="hljs-params">(Object lock, Flag flag)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.lock = lock;<br><span class="hljs-keyword">this</span>.flag = flag;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br><br>            <span class="hljs-keyword">if</span>(ThreadA.A + ThreadB.B != <span class="hljs-number">100</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;Error&quot;</span>);<br>            &#125;<br><br>            System.out.println(<span class="hljs-string">&quot;the value of B is &quot;</span> + B);<br>            <span class="hljs-keyword">synchronized</span> (lock) &#123;<br>                flag.flag = !flag.flag;<br>                <span class="hljs-keyword">if</span> (flag.flag) &#123;<br>                    lock.notify();<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        lock.wait();<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br>                &#125;<br>            &#125;<br><br>            decB();<br><br>            <span class="hljs-keyword">if</span> (i != <span class="hljs-number">99</span>) &#123;<br>                <span class="hljs-keyword">synchronized</span> (lock) &#123;<br>                    flag.flag = !flag.flag;<br>                    <span class="hljs-keyword">if</span> (flag.flag) &#123;<br>                        System.out.println(<span class="hljs-string">&quot;waiting B&quot;</span>);<br>                        lock.notify();<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br><br>                        <span class="hljs-keyword">try</span> &#123;<br>                            lock.wait();<br>                        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                            e.printStackTrace();<br>                        &#125;<br><br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">decB</span><span class="hljs-params">()</span> </span>&#123;<br>        B--;<br>        EmuExe.execute();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>多线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一个基于B+树索引简单的数据库</title>
    <link href="/2021/05/14/%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8EB+%E6%A0%91%E7%B4%A2%E5%BC%95%E7%AE%80%E5%8D%95%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <url>/2021/05/14/%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8EB+%E6%A0%91%E7%B4%A2%E5%BC%95%E7%AE%80%E5%8D%95%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h2 id="程序流程图"><a href="#程序流程图" class="headerlink" title="程序流程图"></a>程序流程图</h2><span id="more"></span><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210519184925.png" alt="数据库实现"></p><h2 id="数据库系统结构"><a href="#数据库系统结构" class="headerlink" title="数据库系统结构"></a>数据库系统结构</h2><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210521142053.png" alt="数据库结构"></p><h2 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h2><h3 id="叶子节点"><a href="#叶子节点" class="headerlink" title="叶子节点"></a>叶子节点</h3><p><img src="https://cstack.github.io/db_tutorial/assets/images/leaf-node-format.png" alt="Our leaf node format"></p><p>（图中少标注了一个next_leaf_pointer）</p><h3 id="内部节点"><a href="#内部节点" class="headerlink" title="内部节点"></a>内部节点</h3><p><img src="https://cstack.github.io/db_tutorial/assets/images/internal-node-format.png" alt="Our internal node format"></p><h2 id="完整代码（待完善）"><a href="#完整代码（待完善）" class="headerlink" title="完整代码（待完善）"></a>完整代码（待完善）</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;signal.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdbool.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fcntl.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INPUT_BUFFER_SIZE 31</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>  <span class="hljs-keyword">char</span> buffer[INPUT_BUFFER_SIZE + <span class="hljs-number">1</span>];<br>  <span class="hljs-keyword">size_t</span> length;<br>&#125; input_buffer;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> &#123;</span><br>  INPUT_SUCCESS,<br>  INPUT_TOO_LONG<br>&#125; InputResult;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> &#123;</span><br>  EXECUTE_SUCCESS<br>&#125; ExecuteResult;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> &#123;</span><br>  META_COMMAND_SUCCESS,<br>  META_COMMAND_UNRECOGNIZED_COMMAND<br>&#125; MetaCommandResult;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> &#123;</span><br>  PREPARE_SUCCESS,<br>  PREPARE_NEGATIVE_VALUE,<br>  PREPARE_STRING_TOO_LONG,<br>  PREPARE_SYNTAX_ERROR,<br>  PREPARE_UNRECOGNIZED_STATEMENT,<br>  PREPARE_EMPTY_STATEMENT<br>&#125; PrepareResult;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> &#123;</span><br>  STATEMENT_INSERT,<br>  STATEMENT_SELECT,<br>  STATEMENT_DELETE<br>&#125; StatementType;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print_prompt</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;myjql&gt; &quot;</span>); &#125;<br><br><span class="hljs-function">InputResult <span class="hljs-title">read_input</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-comment">/* we read the entire line as the input */</span><br>  input_buffer.length = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">while</span> (input_buffer.length &lt;= INPUT_BUFFER_SIZE<br>    &amp;&amp; (input_buffer.buffer[input_buffer.length++] = getchar()) != <span class="hljs-string">&#x27;\n&#x27;</span><br>    &amp;&amp; input_buffer.buffer[input_buffer.length - <span class="hljs-number">1</span>] != EOF);<br>  <span class="hljs-keyword">if</span> (input_buffer.buffer[input_buffer.length - <span class="hljs-number">1</span>] == EOF)<br>    <span class="hljs-built_in">exit</span>(EXIT_SUCCESS);<br>  input_buffer.length--;<br>  <span class="hljs-comment">/* if the last character is not new-line, the input is considered too long,</span><br><span class="hljs-comment">     the remaining characters are discarded */</span><br>  <span class="hljs-keyword">if</span> (input_buffer.length == INPUT_BUFFER_SIZE<br>    &amp;&amp; input_buffer.buffer[input_buffer.length] != <span class="hljs-string">&#x27;\n&#x27;</span>) &#123;<br>    <span class="hljs-keyword">while</span> (getchar() != <span class="hljs-string">&#x27;\n&#x27;</span>);<br>    <span class="hljs-keyword">return</span> INPUT_TOO_LONG;<br>  &#125;<br>  input_buffer.buffer[input_buffer.length] = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">return</span> INPUT_SUCCESS;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> COLUMN_B_SIZE 11</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>  <span class="hljs-keyword">uint32_t</span> a;<br>  <span class="hljs-keyword">char</span> b[COLUMN_B_SIZE + <span class="hljs-number">1</span>];<br>&#125; Row;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>  StatementType type;<br>  Row row;<br>  <span class="hljs-keyword">uint8_t</span> flag; <span class="hljs-comment">/* whether row.a, row.b have valid values */</span><br>&#125; statement;<br><br><span class="hljs-comment">// 定义Row序列化的布局</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> size_of_attribute(Struct, Attribute) sizeof(((Struct*)0)-&gt;Attribute)</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> a_SIZE size_of_attribute(Row, a)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> b_SIZE size_of_attribute(Row, b)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> a_OFFSET 0</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> b_OFFSET (a_OFFSET + a_SIZE)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ROW_SIZE (a_SIZE + b_SIZE)</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PAGE_SIZE 4096</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> TABLE_MAX_PAGES 100</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>  <span class="hljs-keyword">int</span> file_descriptor;<br>  <span class="hljs-keyword">uint32_t</span> file_length;<br>  <span class="hljs-keyword">uint32_t</span> num_pages;<br>  <span class="hljs-keyword">void</span>* pages[TABLE_MAX_PAGES];<br>&#125;Pager;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>  Pager* pager;<br>  <span class="hljs-keyword">uint32_t</span> root_page_num;<br>&#125;table;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>  <span class="hljs-keyword">uint32_t</span> page_num;<br>  <span class="hljs-keyword">uint32_t</span> cell_num;<br>  <span class="hljs-keyword">bool</span> end_of_table;<br>&#125;Cursor;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print_row</span><span class="hljs-params">(Row* row)</span> </span>&#123;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;(%d, %s)\n&quot;</span>, row-&gt;a, row-&gt;b);<br>&#125;<br><br><span class="hljs-comment">/* B-Tree operations */</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> &#123;</span> NODE_INTERNAL, NODE_LEAF &#125; NodeType;<br><br><span class="hljs-comment">// 节点公共头部布局</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NODE_TYPE_SIZE sizeof(uint8_t) <span class="hljs-comment">// 节点类型</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NODE_TYPE_OFFSET 0</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IS_ROOT_SIZE sizeof(uint8_t) <span class="hljs-comment">// 是否为根节点</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IS_ROOT_OFFSET NODE_TYPE_SIZE</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PARENT_POINTER_SIZE sizeof(uint32_t) <span class="hljs-comment">// 父节点的指针</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PARENT_POINTER_OFFSET (IS_ROOT_OFFSET + IS_ROOT_SIZE)</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> COMMON_NODE_HEADER_SIZE (NODE_TYPE_SIZE + IS_ROOT_SIZE + PARENT_POINTER_SIZE)</span><br><br><span class="hljs-comment">// 内部节点头部布局</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INTERNAL_NODE_NUM_KEYS_SIZE sizeof(uint32_t) <span class="hljs-comment">//key的数量</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INTERNAL_NODE_NUM_KEYS_OFFSET COMMON_NODE_HEADER_SIZE</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INTERNAL_NODE_RIGHT_CHILD_SIZE sizeof(uint32_t) <span class="hljs-comment">// 最右子节点指针</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INTERNAL_NODE_RIGHT_CHILD_OFFSET (INTERNAL_NODE_NUM_KEYS_OFFSET + INTERNAL_NODE_NUM_KEYS_SIZE)</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INTERNAL_NODE_HEADER_SIZE (COMMON_NODE_HEADER_SIZE + INTERNAL_NODE_NUM_KEYS_SIZE + INTERNAL_NODE_RIGHT_CHILD_SIZE)</span><br><br><span class="hljs-comment">// 内部节点结构体布局</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INTERNAL_NODE_KEY_SIZE (sizeof(char)*12) <span class="hljs-comment">// 关键字</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INTERNAL_NODE_CHILD_SIZE sizeof(uint32_t) <span class="hljs-comment">// 关键字对应子节点指针</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INTERNAL_NODE_CELL_SIZE (INTERNAL_NODE_CHILD_SIZE + INTERNAL_NODE_KEY_SIZE)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INTERNAL_NODE_MAX_CELLS 30</span><br><br><span class="hljs-comment">// 叶子节点头部定义</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LEAF_NODE_NUM_CELLS_SIZE sizeof(uint32_t) <span class="hljs-comment">// cell数量</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LEAF_NODE_NUM_CELLS_OFFSET COMMON_NODE_HEADER_SIZE</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LEAF_NODE_NEXT_LEAF_SIZE sizeof(uint32_t) <span class="hljs-comment">// 下一叶节点指针</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LEAF_NODE_NEXT_LEAF_OFFSET (LEAF_NODE_NUM_CELLS_OFFSET + LEAF_NODE_NUM_CELLS_SIZE)</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LEAF_NODE_HEADER_SIZE (COMMON_NODE_HEADER_SIZE + LEAF_NODE_NUM_CELLS_SIZE + LEAF_NODE_NEXT_LEAF_SIZE)</span><br><br><span class="hljs-comment">// 叶子节点结构体定义</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LEAF_NODE_KEY_SIZE (sizeof(char)*12) <span class="hljs-comment">// 关键字</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LEAF_NODE_KEY_OFFSET 0</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LEAF_NODE_VALUE_SIZE ROW_SIZE <span class="hljs-comment">// 存储的数据(Row)</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LEAF_NODE_VALUE_OFFSET (LEAF_NODE_KEY_OFFSET + LEAF_NODE_KEY_SIZE)</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LEAF_NODE_CELL_SIZE (LEAF_NODE_KEY_SIZE + LEAF_NODE_VALUE_SIZE)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LEAF_NODE_SPACE_FOR_CELLS (PAGE_SIZE - LEAF_NODE_HEADER_SIZE)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LEAF_NODE_MAX_CELLS (LEAF_NODE_SPACE_FOR_CELLS / LEAF_NODE_CELL_SIZE)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LEAF_NODE_RIGHT_SPLIT_COUNT ((LEAF_NODE_MAX_CELLS + 1) / 2)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LEAF_NODE_LEFT_SPLIT_COUNT ((LEAF_NODE_MAX_CELLS + 1) - LEAF_NODE_RIGHT_SPLIT_COUNT)</span><br><br><span class="hljs-comment">// B+树基本功能函数定义</span><br><br><span class="hljs-function">NodeType <span class="hljs-title">get_node_type</span><span class="hljs-params">(<span class="hljs-keyword">void</span>* node)</span> </span>&#123;<br>  <span class="hljs-keyword">uint8_t</span> value = *((<span class="hljs-keyword">uint8_t</span>*)(node + NODE_TYPE_OFFSET));<br>  <span class="hljs-keyword">return</span> (NodeType)value;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">set_node_type</span><span class="hljs-params">(<span class="hljs-keyword">void</span>* node, NodeType type)</span> </span>&#123;<br>  <span class="hljs-keyword">uint8_t</span> value = type;<br>  *((<span class="hljs-keyword">uint8_t</span>*)(node + NODE_TYPE_OFFSET)) = value;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">is_node_root</span><span class="hljs-params">(<span class="hljs-keyword">void</span>* node)</span> </span>&#123;<br>  <span class="hljs-keyword">uint8_t</span> value = *((<span class="hljs-keyword">uint8_t</span>*)(node + IS_ROOT_OFFSET));<br>  <span class="hljs-keyword">return</span> (<span class="hljs-keyword">bool</span>)value;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">set_node_root</span><span class="hljs-params">(<span class="hljs-keyword">void</span>* node, <span class="hljs-keyword">bool</span> is_root)</span> </span>&#123;<br>  <span class="hljs-keyword">uint8_t</span> value = is_root;<br>  *((<span class="hljs-keyword">uint8_t</span>*)(node + IS_ROOT_OFFSET)) = value;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">uint32_t</span>* <span class="hljs-title">node_parent</span><span class="hljs-params">(<span class="hljs-keyword">void</span>* node)</span> </span>&#123; <span class="hljs-keyword">return</span> node + PARENT_POINTER_OFFSET; &#125;<br><br><span class="hljs-function"><span class="hljs-keyword">uint32_t</span>* <span class="hljs-title">internal_node_num_keys</span><span class="hljs-params">(<span class="hljs-keyword">void</span>* node)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> node + INTERNAL_NODE_NUM_KEYS_OFFSET;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">uint32_t</span>* <span class="hljs-title">internal_node_right_child</span><span class="hljs-params">(<span class="hljs-keyword">void</span>* node)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> node + INTERNAL_NODE_RIGHT_CHILD_OFFSET;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">uint32_t</span>* <span class="hljs-title">internal_node_cell</span><span class="hljs-params">(<span class="hljs-keyword">void</span>* node, <span class="hljs-keyword">uint32_t</span> cell_num)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> node + INTERNAL_NODE_HEADER_SIZE + cell_num * INTERNAL_NODE_CELL_SIZE;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">uint32_t</span>* <span class="hljs-title">internal_node_child</span><span class="hljs-params">(<span class="hljs-keyword">void</span>* node, <span class="hljs-keyword">uint32_t</span> child_num)</span> </span>&#123;<br>  <span class="hljs-keyword">uint32_t</span> num_keys = *internal_node_num_keys(node);<br>  <span class="hljs-keyword">if</span> (child_num &gt; num_keys) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Tried to access child_num %d &gt; num_keys %d\n&quot;</span>, child_num, num_keys);<br>    <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (child_num == num_keys) &#123;<br>    <span class="hljs-keyword">return</span> internal_node_right_child(node);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> internal_node_cell(node, child_num);<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">char</span>* <span class="hljs-title">internal_node_key</span><span class="hljs-params">(<span class="hljs-keyword">void</span>* node, <span class="hljs-keyword">uint32_t</span> key_num)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> (<span class="hljs-keyword">void</span>*)internal_node_cell(node, key_num) + INTERNAL_NODE_CHILD_SIZE;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">uint32_t</span>* <span class="hljs-title">leaf_node_num_cells</span><span class="hljs-params">(<span class="hljs-keyword">void</span>* node)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> node + LEAF_NODE_NUM_CELLS_OFFSET;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">uint32_t</span>* <span class="hljs-title">leaf_node_next_leaf</span><span class="hljs-params">(<span class="hljs-keyword">void</span>* node)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> node + LEAF_NODE_NEXT_LEAF_OFFSET;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span>* <span class="hljs-title">leaf_node_cell</span><span class="hljs-params">(<span class="hljs-keyword">void</span>* node, <span class="hljs-keyword">uint32_t</span> cell_num)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> node + LEAF_NODE_HEADER_SIZE + cell_num * LEAF_NODE_CELL_SIZE;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">char</span>* <span class="hljs-title">leaf_node_key</span><span class="hljs-params">(<span class="hljs-keyword">void</span>* node, <span class="hljs-keyword">uint32_t</span> cell_num)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> leaf_node_cell(node, cell_num);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span>* <span class="hljs-title">leaf_node_value</span><span class="hljs-params">(<span class="hljs-keyword">void</span>* node, <span class="hljs-keyword">uint32_t</span> cell_num)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> leaf_node_cell(node, cell_num) + LEAF_NODE_KEY_SIZE;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">char</span>* <span class="hljs-title">get_node_max_key</span><span class="hljs-params">(<span class="hljs-keyword">void</span>* node)</span> </span>&#123;<br>  <span class="hljs-keyword">switch</span> (get_node_type(node)) &#123;<br>    <span class="hljs-keyword">case</span> NODE_INTERNAL:<br>      <span class="hljs-keyword">return</span> &amp;*internal_node_key(node, *internal_node_num_keys(node) - <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">case</span> NODE_LEAF:<br>      <span class="hljs-keyword">return</span> &amp;*leaf_node_key(node, *leaf_node_num_cells(node) - <span class="hljs-number">1</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// Pager Cursor</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span>* <span class="hljs-title">get_page</span><span class="hljs-params">(Pager* pager, <span class="hljs-keyword">uint32_t</span> page_num)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (page_num &gt; TABLE_MAX_PAGES) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Tried to fetch page number out of bounds. %d &gt; %d\n&quot;</span>, page_num,<br>           TABLE_MAX_PAGES);<br>    <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (pager-&gt;pages[page_num] == <span class="hljs-literal">NULL</span>) &#123;<br>    <span class="hljs-comment">// 缓存为0，从文件中分配内存</span><br>    <span class="hljs-keyword">void</span>* page = <span class="hljs-built_in">malloc</span>(PAGE_SIZE);<br>    <span class="hljs-keyword">uint32_t</span> num_pages = pager-&gt;file_length / PAGE_SIZE;<br><br>    <span class="hljs-comment">// 可能在文件末尾保存一个部分页面</span><br>    <span class="hljs-keyword">if</span> (pager-&gt;file_length % PAGE_SIZE) &#123;<br>      num_pages += <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (page_num &lt;= num_pages) &#123;<br>      lseek(pager-&gt;file_descriptor, page_num * PAGE_SIZE, SEEK_SET);<br>      <span class="hljs-keyword">ssize_t</span> bytes_read = read(pager-&gt;file_descriptor, page, PAGE_SIZE);<br>      <span class="hljs-keyword">if</span> (bytes_read == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>      &#125;<br>    &#125;<br><br>    pager-&gt;pages[page_num] = page;<br><br>    <span class="hljs-keyword">if</span> (page_num &gt;= pager-&gt;num_pages) &#123;<br>      pager-&gt;num_pages = page_num + <span class="hljs-number">1</span>;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> pager-&gt;pages[page_num];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">serialize_row</span><span class="hljs-params">(Row* source, <span class="hljs-keyword">void</span>* destination)</span> </span>&#123;<br>  <span class="hljs-built_in">memcpy</span>(destination + a_OFFSET, &amp;(source-&gt;a), a_SIZE);<br>  <span class="hljs-built_in">memcpy</span>(destination + b_OFFSET, &amp;(source-&gt;b), b_SIZE);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deserialize_row</span><span class="hljs-params">(<span class="hljs-keyword">void</span>* source, Row* destination)</span> </span>&#123;<br>  <span class="hljs-built_in">memcpy</span>(&amp;(destination-&gt;a), source + a_OFFSET, a_SIZE);<br>  <span class="hljs-built_in">memcpy</span>(&amp;(destination-&gt;b), source + b_OFFSET, b_SIZE);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">initialize_leaf_node</span><span class="hljs-params">(<span class="hljs-keyword">void</span>* node)</span> </span>&#123;<br>  set_node_type(node, NODE_LEAF);<br>  set_node_root(node, <span class="hljs-literal">false</span>);<br>  *leaf_node_num_cells(node) = <span class="hljs-number">0</span>;<br>  *leaf_node_next_leaf(node) = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 0 represents no sibling</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">initialize_internal_node</span><span class="hljs-params">(<span class="hljs-keyword">void</span>* node)</span> </span>&#123;<br>  set_node_type(node, NODE_INTERNAL);<br>  set_node_root(node, <span class="hljs-literal">false</span>);<br>  *internal_node_num_keys(node) = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function">Cursor* <span class="hljs-title">leaf_node_find</span><span class="hljs-params">(<span class="hljs-keyword">uint32_t</span> page_num, <span class="hljs-keyword">char</span>* key)</span> </span>&#123;<br>  <span class="hljs-keyword">void</span>* node = get_page(table.pager, page_num);<br>  <span class="hljs-keyword">uint32_t</span> num_cells = *leaf_node_num_cells(node);<br><br>  Cursor* cursor = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Cursor));<br>  cursor-&gt;page_num = page_num;<br>  cursor-&gt;end_of_table = <span class="hljs-literal">false</span>;<br><br>  <span class="hljs-comment">// Binary search</span><br>  <span class="hljs-keyword">uint32_t</span> min_index = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">uint32_t</span> one_past_max_index = num_cells;<br>  <span class="hljs-keyword">while</span> (one_past_max_index != min_index) &#123;<br>    <span class="hljs-keyword">uint32_t</span> index = (min_index + one_past_max_index) / <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">char</span>* key_at_index = &amp;*leaf_node_key(node, index);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(key, key_at_index) == <span class="hljs-number">0</span>) &#123;<br>      cursor-&gt;cell_num = index;<br>      <span class="hljs-keyword">return</span> cursor;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(key, key_at_index) &lt; <span class="hljs-number">0</span>) &#123;<br>      one_past_max_index = index;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      min_index = index + <span class="hljs-number">1</span>;<br>    &#125;<br>  &#125;<br><br>  cursor-&gt;cell_num = min_index;<br>  <span class="hljs-keyword">return</span> cursor;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">uint32_t</span> <span class="hljs-title">internal_node_find_child</span><span class="hljs-params">(<span class="hljs-keyword">void</span>* node, <span class="hljs-keyword">char</span>* key)</span> </span>&#123;<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  Return the index of the child which should contain</span><br><span class="hljs-comment">  the given key.</span><br><span class="hljs-comment">  */</span><br><br>  <span class="hljs-keyword">uint32_t</span> num_keys = *internal_node_num_keys(node);<br><br>  <span class="hljs-comment">/* Binary search */</span><br>  <span class="hljs-keyword">uint32_t</span> min_index = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">uint32_t</span> max_index = num_keys; <span class="hljs-comment">/* there is one more child than key */</span><br><br>  <span class="hljs-keyword">while</span> (min_index != max_index) &#123;<br>    <span class="hljs-keyword">uint32_t</span> index = (min_index + max_index) / <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">char</span>* key_to_right = &amp;*internal_node_key(node, index);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(key_to_right, key) &gt;= <span class="hljs-number">0</span>) &#123;<br>      max_index = index;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      min_index = index + <span class="hljs-number">1</span>;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> min_index;<br>&#125;<br><br><span class="hljs-function">Cursor* <span class="hljs-title">internal_node_find</span><span class="hljs-params">(<span class="hljs-keyword">uint32_t</span> page_num, <span class="hljs-keyword">char</span>* key)</span> </span>&#123;<br>  <span class="hljs-keyword">void</span>* node = get_page(table.pager, page_num);<br><br>  <span class="hljs-keyword">uint32_t</span> child_index = internal_node_find_child(node, key);<br>  <span class="hljs-keyword">uint32_t</span> child_num = *internal_node_child(node, child_index);<br>  <span class="hljs-keyword">void</span>* child = get_page(table.pager, child_num);<br>  <span class="hljs-keyword">switch</span> (get_node_type(child)) &#123;<br>    <span class="hljs-keyword">case</span> NODE_LEAF:<br>      <span class="hljs-keyword">return</span> leaf_node_find(child_num, key);<br>    <span class="hljs-keyword">case</span> NODE_INTERNAL:<br>      <span class="hljs-keyword">return</span> internal_node_find(child_num, key);<br>  &#125;<br>&#125;<br><br><span class="hljs-function">Cursor* <span class="hljs-title">table_find</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* key)</span> </span>&#123;<br>  <span class="hljs-keyword">uint32_t</span> root_page_num = table.root_page_num;<br>  <span class="hljs-keyword">void</span>* root_node = get_page(table.pager, root_page_num);<br><br>  <span class="hljs-keyword">if</span> (get_node_type(root_node) == NODE_LEAF) &#123;<br>    <span class="hljs-keyword">return</span> leaf_node_find(root_page_num, key);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> internal_node_find(root_page_num, key);<br>  &#125;<br>&#125;<br><br><span class="hljs-function">Cursor* <span class="hljs-title">table_start</span><span class="hljs-params">()</span> </span>&#123;<br>  Cursor* cursor = table_find(<span class="hljs-string">&quot;A&quot;</span>);<br><br>  <span class="hljs-keyword">void</span>* node = get_page(table.pager, cursor-&gt;page_num);<br>  <span class="hljs-keyword">uint32_t</span> num_cells = *leaf_node_num_cells(node);<br>  cursor-&gt;end_of_table = (num_cells == <span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">return</span> cursor;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span>* <span class="hljs-title">cursor_value</span><span class="hljs-params">(Cursor* cursor)</span> </span>&#123;<br>  <span class="hljs-keyword">uint32_t</span> page_num = cursor-&gt;page_num;<br>  <span class="hljs-keyword">void</span>* page = get_page(table.pager, page_num);<br>  <span class="hljs-keyword">return</span> leaf_node_value(page, cursor-&gt;cell_num);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">cursor_advance</span><span class="hljs-params">(Cursor* cursor)</span> </span>&#123;<br>  <span class="hljs-keyword">uint32_t</span> page_num = cursor-&gt;page_num;<br>  <span class="hljs-keyword">void</span>* node = get_page(table.pager, page_num);<br><br>  cursor-&gt;cell_num += <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">if</span> (cursor-&gt;cell_num &gt;= (*leaf_node_num_cells(node))) &#123;<br>    <span class="hljs-comment">/* Advance to next leaf node */</span><br>    <span class="hljs-keyword">uint32_t</span> next_page_num = *leaf_node_next_leaf(node);<br>    <span class="hljs-keyword">if</span> (next_page_num == <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-comment">/* This was rightmost leaf */</span><br>      cursor-&gt;end_of_table = <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      cursor-&gt;page_num = next_page_num;<br>      cursor-&gt;cell_num = <span class="hljs-number">0</span>;<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><br><span class="hljs-function">Pager* <span class="hljs-title">pager_open</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* filename)</span> </span>&#123;<br>  <span class="hljs-keyword">int</span> fd = open(filename,<br>                O_RDWR |      <span class="hljs-comment">// 读/写模式</span><br>                    O_CREAT,  <span class="hljs-comment">// 如果文件不存在，则创建该文件</span><br>                S_IWUSR |     <span class="hljs-comment">// 用户写权限</span><br>                    S_IRUSR   <span class="hljs-comment">// 用户读权限</span><br>                );<br><br>  <span class="hljs-keyword">if</span> (fd == <span class="hljs-number">-1</span>) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Unable to open file\n&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>  &#125;<br><br>  <span class="hljs-keyword">off_t</span> file_length = lseek(fd, <span class="hljs-number">0</span>, SEEK_END);<br><br>  Pager* pager = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Pager));<br>  pager-&gt;file_descriptor = fd;<br>  pager-&gt;file_length = file_length;<br>  pager-&gt;num_pages = (file_length / PAGE_SIZE);<br><br>    <span class="hljs-keyword">if</span> (file_length % PAGE_SIZE != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Db file is not a whole number of pages. Corrupt file.\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">uint32_t</span> i = <span class="hljs-number">0</span>; i &lt; TABLE_MAX_PAGES; i++) &#123;<br>        pager-&gt;pages[i] = <span class="hljs-literal">NULL</span>;<br>    &#125;<br><br><br>  <span class="hljs-keyword">return</span> pager;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">open_file</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* filename)</span> </span>&#123;<br><span class="hljs-comment">/* open file */</span><br>  Pager* pager = pager_open(filename);<br><br>  table.pager = pager;<br>  table.root_page_num = <span class="hljs-number">0</span>;<br><br>  <span class="hljs-keyword">if</span> (pager-&gt;num_pages == <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-comment">// New database file. Initialize page 0 as leaf node.</span><br>    <span class="hljs-keyword">void</span>* root_node = get_page(pager, <span class="hljs-number">0</span>);<br>    initialize_leaf_node(root_node);<br>    set_node_root(root_node, <span class="hljs-literal">true</span>);<br>  &#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pager_flush</span><span class="hljs-params">(Pager* pager, <span class="hljs-keyword">uint32_t</span> page_num)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (pager-&gt;pages[page_num] == <span class="hljs-literal">NULL</span>) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Tried to flush null page\n&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>  &#125;<br><br>  <span class="hljs-keyword">off_t</span> offset = lseek(pager-&gt;file_descriptor, page_num * PAGE_SIZE, SEEK_SET);<br><br>  <span class="hljs-keyword">if</span> (offset == <span class="hljs-number">-1</span>) &#123;<br>    <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>  &#125;<br><br>  <span class="hljs-keyword">ssize_t</span> bytes_written =<br>      write(pager-&gt;file_descriptor, pager-&gt;pages[page_num], PAGE_SIZE);<br><br>  <span class="hljs-keyword">if</span> (bytes_written == <span class="hljs-number">-1</span>) &#123;<br>    <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">exit_nicely</span><span class="hljs-params">(<span class="hljs-keyword">int</span> code)</span> </span>&#123;<br>  <span class="hljs-comment">/* do clean work */</span><br>  Pager* pager = table.pager;<br><br>  <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; pager-&gt;num_pages; i++) &#123;<br>    <span class="hljs-keyword">if</span> (pager-&gt;pages[i] == <span class="hljs-literal">NULL</span>) &#123;<br>      <span class="hljs-keyword">continue</span>;<br>    &#125;<br>    pager_flush(pager, i);<br>    <span class="hljs-built_in">free</span>(pager-&gt;pages[i]);<br>    pager-&gt;pages[i] = <span class="hljs-literal">NULL</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">int</span> result = close(pager-&gt;file_descriptor);<br>  <span class="hljs-keyword">if</span> (result == <span class="hljs-number">-1</span>) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error closing db file.\n&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>  &#125;<br>  <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; TABLE_MAX_PAGES; i++) &#123;<br>    <span class="hljs-keyword">void</span>* page = pager-&gt;pages[i];<br>    <span class="hljs-keyword">if</span> (page) &#123;<br>      <span class="hljs-built_in">free</span>(page);<br>      pager-&gt;pages[i] = <span class="hljs-literal">NULL</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-built_in">free</span>(pager);<br>  <span class="hljs-built_in">exit</span>(code);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">exit_success</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;bye~\n&quot;</span>);<br>  exit_nicely(EXIT_SUCCESS);<br>&#125;<br><br><span class="hljs-function">MetaCommandResult <span class="hljs-title">do_meta_command</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(input_buffer.buffer, <span class="hljs-string">&quot;.exit&quot;</span>) == <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-built_in">exit</span>(EXIT_SUCCESS);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> META_COMMAND_UNRECOGNIZED_COMMAND;<br>  &#125;<br>&#125;<br><br><span class="hljs-function">PrepareResult <span class="hljs-title">prepare_insert</span><span class="hljs-params">()</span> </span>&#123;<br>  statement.type = STATEMENT_INSERT;<br><br>  <span class="hljs-keyword">char</span>* keyword = strtok(input_buffer.buffer, <span class="hljs-string">&quot; &quot;</span>);<br>  <span class="hljs-keyword">char</span>* a = strtok(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot; &quot;</span>);<br>  <span class="hljs-keyword">char</span>* b = strtok(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot; &quot;</span>);<br>  <span class="hljs-keyword">int</span> x;<br><br>  <span class="hljs-keyword">if</span> (a == <span class="hljs-literal">NULL</span> || b == <span class="hljs-literal">NULL</span>)<br>    <span class="hljs-keyword">return</span> PREPARE_SYNTAX_ERROR;<br><br>  x = atoi(a);<br>  <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">return</span> PREPARE_NEGATIVE_VALUE;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strlen</span>(b) &gt; COLUMN_B_SIZE)<br>    <span class="hljs-keyword">return</span> PREPARE_STRING_TOO_LONG;<br><br>  statement.row.a = x;<br>  <span class="hljs-built_in">strcpy</span>(statement.row.b, b);<br><br>  <span class="hljs-keyword">return</span> PREPARE_SUCCESS;<br>&#125;<br><br><span class="hljs-function">PrepareResult <span class="hljs-title">prepare_condition</span><span class="hljs-params">()</span> </span>&#123;<br>  statement.flag = <span class="hljs-number">0</span>;<br><br>  <span class="hljs-keyword">char</span>* keyword = strtok(input_buffer.buffer, <span class="hljs-string">&quot; &quot;</span>);<br>  <span class="hljs-keyword">char</span>* b = strtok(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot; &quot;</span>);<br>  <span class="hljs-keyword">char</span>* c = strtok(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot; &quot;</span>);<br><br>  <span class="hljs-keyword">if</span> (b == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> PREPARE_SUCCESS;<br>  <span class="hljs-keyword">if</span> (c != <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> PREPARE_SYNTAX_ERROR;<br><br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strlen</span>(b) &gt; COLUMN_B_SIZE)<br>    <span class="hljs-keyword">return</span> PREPARE_STRING_TOO_LONG;<br><br>  <span class="hljs-built_in">strcpy</span>(statement.row.b, b);<br>  statement.flag |= <span class="hljs-number">2</span>;<br><br>  <span class="hljs-keyword">return</span> PREPARE_SUCCESS;<br>&#125;<br><br><span class="hljs-function">PrepareResult <span class="hljs-title">prepare_select</span><span class="hljs-params">()</span> </span>&#123;<br>  statement.type = STATEMENT_SELECT;<br>  <span class="hljs-keyword">return</span> prepare_condition();<br>&#125;<br><br><span class="hljs-function">PrepareResult <span class="hljs-title">prepare_delete</span><span class="hljs-params">()</span> </span>&#123;<br>  statement.type = STATEMENT_DELETE;<br>  PrepareResult result = prepare_condition();<br>  <span class="hljs-keyword">if</span> (result == PREPARE_SUCCESS &amp;&amp; statement.flag == <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">return</span> PREPARE_SYNTAX_ERROR;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-function">PrepareResult <span class="hljs-title">prepare_statement</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strlen</span>(input_buffer.buffer) == <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span> PREPARE_EMPTY_STATEMENT;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strncmp</span>(input_buffer.buffer, <span class="hljs-string">&quot;insert&quot;</span>, <span class="hljs-number">6</span>) == <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span> prepare_insert();<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strncmp</span>(input_buffer.buffer, <span class="hljs-string">&quot;select&quot;</span>, <span class="hljs-number">6</span>) == <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span> prepare_select();<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strncmp</span>(input_buffer.buffer, <span class="hljs-string">&quot;delete&quot;</span>, <span class="hljs-number">6</span>) == <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span> prepare_delete();<br>  &#125;<br>  <span class="hljs-keyword">return</span> PREPARE_UNRECOGNIZED_STATEMENT;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">uint32_t</span> <span class="hljs-title">get_unused_page_num</span><span class="hljs-params">(Pager* pager)</span> </span>&#123; <span class="hljs-keyword">return</span> pager-&gt;num_pages; &#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">create_new_root</span><span class="hljs-params">(<span class="hljs-keyword">uint32_t</span> right_child_page_num)</span> </span>&#123;<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  拆分根的处理。</span><br><span class="hljs-comment">  旧的根复制到新页面，成为左子。</span><br><span class="hljs-comment">  确保子结点的地址正确传入。</span><br><span class="hljs-comment">  重新初始化根页面以确保包含新的根节点。</span><br><span class="hljs-comment">  新的根节点指向两个子节点。</span><br><span class="hljs-comment">  */</span><br><br>  <span class="hljs-keyword">void</span>* root = get_page(table.pager, table.root_page_num);<br>  <span class="hljs-keyword">void</span>* right_child = get_page(table.pager, right_child_page_num);<br>  <span class="hljs-keyword">uint32_t</span> left_child_page_num = get_unused_page_num(table.pager);<br>  <span class="hljs-keyword">void</span>* left_child = get_page(table.pager, left_child_page_num);<br><br>  <span class="hljs-comment">/* 左子结点具有从旧根复制的数据 */</span><br>  <span class="hljs-built_in">memcpy</span>(left_child, root, PAGE_SIZE);<br>  set_node_root(left_child, <span class="hljs-literal">false</span>);<br><br>  <span class="hljs-comment">/* 根节点是一个新的内部节点，有一个关键值和两个子节点 */</span><br>  initialize_internal_node(root);<br>  set_node_root(root, <span class="hljs-literal">true</span>);<br>  *internal_node_num_keys(root) = <span class="hljs-number">1</span>;<br>  *internal_node_child(root, <span class="hljs-number">0</span>) = left_child_page_num;<br>  <span class="hljs-keyword">char</span>* left_child_max_key = get_node_max_key(left_child);<br>  *internal_node_key(root, <span class="hljs-number">0</span>) = *left_child_max_key;<br>  *internal_node_right_child(root) = right_child_page_num;<br>  *node_parent(left_child) = table.root_page_num;<br>  *node_parent(right_child) = table.root_page_num;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">internal_node_insert</span><span class="hljs-params">(<span class="hljs-keyword">uint32_t</span> parent_page_num,</span></span><br><span class="hljs-function"><span class="hljs-params">                          <span class="hljs-keyword">uint32_t</span> child_page_num)</span> </span>&#123;<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  将新的子/关键值（child/key）键值对添加到与子结点对应的父结点</span><br><span class="hljs-comment">  */</span><br><br>  <span class="hljs-keyword">void</span>* parent = get_page(table.pager, parent_page_num);<br>  <span class="hljs-keyword">void</span>* child = get_page(table.pager, child_page_num);<br>  <span class="hljs-keyword">char</span>* child_max_key = get_node_max_key(child);<br>  <span class="hljs-keyword">uint32_t</span> index = internal_node_find_child(parent, child_max_key);<br><br>  <span class="hljs-keyword">uint32_t</span> original_num_keys = *internal_node_num_keys(parent);<br>  *internal_node_num_keys(parent) = original_num_keys + <span class="hljs-number">1</span>;<br><br>  <span class="hljs-keyword">if</span> (original_num_keys &gt;= INTERNAL_NODE_MAX_CELLS) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Need to implement splitting internal node\n&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>  &#125;<br><br>  <span class="hljs-keyword">uint32_t</span> right_child_page_num = *internal_node_right_child(parent);<br>  <span class="hljs-keyword">void</span>* right_child = get_page(table.pager, right_child_page_num);<br><br>  <span class="hljs-keyword">if</span> ( <span class="hljs-built_in">strcmp</span>(child_max_key, get_node_max_key(right_child) ) &gt; <span class="hljs-number">0</span> ) &#123;<br>    <span class="hljs-comment">/* 替换右子树的结点 */</span><br>    *internal_node_child(parent, original_num_keys) = right_child_page_num;<br>    *internal_node_key(parent, original_num_keys) =<br>        *get_node_max_key(right_child);<br>    *internal_node_right_child(parent) = child_page_num;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">/* 为新的结点或者说层腾出空间 */</span><br>    <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-keyword">for</span> (i = original_num_keys; i &gt; index; i--) &#123;<br>      <span class="hljs-keyword">void</span>* destination = internal_node_cell(parent, i);<br>      <span class="hljs-keyword">void</span>* source = internal_node_cell(parent, i - <span class="hljs-number">1</span>);<br>      <span class="hljs-built_in">memcpy</span>(destination, source, INTERNAL_NODE_CELL_SIZE);<br>    &#125;<br>    *internal_node_child(parent, index) = child_page_num;<br>    *internal_node_key(parent, index) = *child_max_key;<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update_internal_node_key</span><span class="hljs-params">(<span class="hljs-keyword">void</span>* node, <span class="hljs-keyword">char</span>* old_key, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* new_key)</span> </span>&#123;<br>  <span class="hljs-keyword">uint32_t</span> old_child_index = internal_node_find_child(node, old_key);<br>  *internal_node_key(node, old_child_index) = *new_key;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">leaf_node_split_and_insert</span><span class="hljs-params">(Cursor* cursor, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* key, Row* value)</span> </span>&#123;<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  创建一个新节点并移动一半的结点。</span><br><span class="hljs-comment">  将新值插入两个节点之一。</span><br><span class="hljs-comment">  更新父结点或创建新父结点。</span><br><span class="hljs-comment">  */</span><br><br>  <span class="hljs-keyword">void</span>* old_node = get_page(table.pager, cursor-&gt;page_num);<br>  <span class="hljs-keyword">char</span>* old_max = get_node_max_key(old_node);<br>  <span class="hljs-keyword">uint32_t</span> new_page_num = get_unused_page_num(table.pager);<br>  <span class="hljs-keyword">void</span>* new_node = get_page(table.pager, new_page_num);<br>  initialize_leaf_node(new_node);<br>  *node_parent(new_node) = *node_parent(old_node);<br>  *leaf_node_next_leaf(new_node) = *leaf_node_next_leaf(old_node);<br>  *leaf_node_next_leaf(old_node) = new_page_num;<br><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  在旧的（左）和新（右）结点之间平均分配所有现有密钥和新密钥。</span><br><span class="hljs-comment">  从右侧开始，将每个键移动到正确的位置。</span><br><span class="hljs-comment">  */</span><br>  <span class="hljs-keyword">int</span> i;<br>  <span class="hljs-keyword">for</span> (i = LEAF_NODE_MAX_CELLS; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>    <span class="hljs-keyword">void</span>* destination_node;<br>    <span class="hljs-keyword">if</span> (i &gt;= LEAF_NODE_LEFT_SPLIT_COUNT) &#123;<br>      destination_node = new_node;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      destination_node = old_node;<br>    &#125;<br>    <span class="hljs-keyword">uint32_t</span> index_within_node = i % LEAF_NODE_LEFT_SPLIT_COUNT;<br>    <span class="hljs-keyword">void</span>* destination = leaf_node_cell(destination_node, index_within_node);<br><br>    <span class="hljs-keyword">if</span> (i == cursor-&gt;cell_num) &#123;<br>      serialize_row(value,<br>                    leaf_node_value(destination_node, index_within_node));<br>      *leaf_node_key(destination_node, index_within_node) = *key;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i &gt; cursor-&gt;cell_num) &#123;<br>      <span class="hljs-built_in">memcpy</span>(destination, leaf_node_cell(old_node, i - <span class="hljs-number">1</span>), LEAF_NODE_CELL_SIZE);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-built_in">memcpy</span>(destination, leaf_node_cell(old_node, i), LEAF_NODE_CELL_SIZE);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">/* 更新两个叶结点上的结构 */</span><br>  *(leaf_node_num_cells(old_node)) = LEAF_NODE_LEFT_SPLIT_COUNT;<br>  *(leaf_node_num_cells(new_node)) = LEAF_NODE_RIGHT_SPLIT_COUNT;<br><br>  <span class="hljs-keyword">if</span> (is_node_root(old_node)) &#123;<br>    <span class="hljs-keyword">return</span> create_new_root(new_page_num);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">uint32_t</span> parent_page_num = *node_parent(old_node);<br>    <span class="hljs-keyword">char</span>* new_max = get_node_max_key(old_node);<br>    <span class="hljs-keyword">void</span>* parent = get_page(table.pager, parent_page_num);<br><br>    update_internal_node_key(parent, old_max, new_max);<br>    internal_node_insert(parent_page_num, new_page_num);<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">leaf_node_insert</span><span class="hljs-params">(Cursor* cursor, <span class="hljs-keyword">char</span>* key, Row* value)</span> </span>&#123;<br>  <span class="hljs-keyword">void</span>* node = get_page(table.pager, cursor-&gt;page_num);<br><br>  <span class="hljs-keyword">uint32_t</span> num_cells = *leaf_node_num_cells(node);<br>  <span class="hljs-keyword">if</span> (num_cells &gt;= LEAF_NODE_MAX_CELLS) &#123;<br>    <span class="hljs-comment">// 节点已满</span><br>    leaf_node_split_and_insert(cursor, key, value);<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (cursor-&gt;cell_num &lt; num_cells) &#123;<br>    <span class="hljs-comment">// 为新数据腾出空间</span><br>    <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-keyword">for</span> (i = num_cells; i &gt; cursor-&gt;cell_num; i--) &#123;<br>      <span class="hljs-built_in">memcpy</span>(leaf_node_cell(node, i), leaf_node_cell(node, i - <span class="hljs-number">1</span>),<br>             LEAF_NODE_CELL_SIZE);<br>    &#125;<br>  &#125;<br><br>  *(leaf_node_num_cells(node)) += <span class="hljs-number">1</span>;<br>  *(leaf_node_key(node, cursor-&gt;cell_num)) = *key;<br>  serialize_row(value, leaf_node_value(node, cursor-&gt;cell_num));<br>&#125;<br><br><span class="hljs-function">ExecuteResult <span class="hljs-title">execute_insert</span><span class="hljs-params">()</span> </span>&#123;<br>  Row* row_to_insert = &amp;(statement.row);<br>  <span class="hljs-keyword">char</span>* key_to_insert = row_to_insert-&gt;b;<br>  Cursor* cursor = table_find(key_to_insert);<br><br>  <span class="hljs-keyword">void</span>* node = get_page(table.pager, cursor-&gt;page_num);<br>  <span class="hljs-keyword">uint32_t</span> num_cells = *leaf_node_num_cells(node);<br><br>  leaf_node_insert(cursor, row_to_insert-&gt;b, row_to_insert);<br><br>  <span class="hljs-built_in">free</span>(cursor);<br><br>  <span class="hljs-keyword">return</span> EXECUTE_SUCCESS;<br>&#125;<br><br><span class="hljs-function">ExecuteResult <span class="hljs-title">execute_select</span><span class="hljs-params">()</span> </span>&#123;<br><br>  Cursor* cursor = table_start();<br><br>  Row row;<br>  <span class="hljs-keyword">bool</span> isFind = <span class="hljs-literal">false</span>;<br>  <span class="hljs-keyword">if</span> (statement.flag == <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">while</span> (!(cursor-&gt;end_of_table)) &#123;<br>          deserialize_row(cursor_value(cursor), &amp;row);<br>          <span class="hljs-keyword">if</span> (row.a != <span class="hljs-number">0</span>) &#123;<br>              <span class="hljs-keyword">if</span> (!isFind)<br>              &#123;<br>                  isFind = <span class="hljs-literal">true</span>;<br>                  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>              &#125;<br>              print_row(&amp;row);<br>          &#125;<br><br>          cursor_advance(cursor);<br>      &#125;<br>  &#125;<br>  Row rows[<span class="hljs-number">10000</span>];<br>  <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">while</span> (!(cursor-&gt;end_of_table)) &#123;<br>    deserialize_row(cursor_value(cursor), &amp;row);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(row.b, statement.row.b) == <span class="hljs-number">0</span> &amp;&amp; row.a != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (!isFind)<br>        &#123;<br>            isFind = <span class="hljs-literal">true</span>;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>            rows[<span class="hljs-number">0</span>] = row;<br>            count = <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">int</span> position = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span> (position &lt;= count) &#123;<br>                <span class="hljs-keyword">if</span> (row.a &gt; rows[position].a) &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    position++;<br>                &#125;<br>            &#125;<br>            count++;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = count; i &gt; position; i--) &#123;<br>                rows[i] = rows[i - <span class="hljs-number">1</span>];<br>            &#125;<br>            rows[position] = row;<br>        &#125;<br>    &#125;<br><br>    cursor_advance(cursor);<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; count; i++) &#123;<br>      print_row(&amp;rows[i]);<br>  &#125;<br><br>  <span class="hljs-built_in">free</span>(cursor);<br>  <span class="hljs-keyword">if</span> (!isFind) &#123;<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n(Empty)&quot;</span>);<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> EXECUTE_SUCCESS;<br>&#125;<br><br><span class="hljs-function">ExecuteResult <span class="hljs-title">execute_delete</span><span class="hljs-params">()</span> </span>&#123;<br>    Cursor* cursor = table_start();<br><br>    Row row;<br>    <span class="hljs-keyword">while</span> (!(cursor-&gt;end_of_table)) &#123;<br>        deserialize_row(cursor_value(cursor), &amp;row);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>( row.b, statement.row.b) == <span class="hljs-number">0</span>) &#123;<br>            Row del;<br>            del.a = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">int</span> i;<br>            <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">sizeof</span>(del) ; i++) &#123;<br>                del.b[i] = row.b[i];<br>            &#125;<br>            serialize_row(&amp;del, cursor_value(cursor));<br><br>        &#125;<br>        cursor_advance(cursor);<br>    &#125;<br><br>    <span class="hljs-built_in">free</span>(cursor);<br><br>    <span class="hljs-keyword">return</span> EXECUTE_SUCCESS;<br>&#125;<br><br><span class="hljs-function">ExecuteResult <span class="hljs-title">execute_statement</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">switch</span> (statement.type) &#123;<br>    <span class="hljs-keyword">case</span> STATEMENT_INSERT:<br>      <span class="hljs-keyword">return</span> execute_insert();<br>    <span class="hljs-keyword">case</span> STATEMENT_SELECT:<br>      <span class="hljs-keyword">return</span> execute_select();<br>    <span class="hljs-keyword">case</span> STATEMENT_DELETE:<br>      <span class="hljs-keyword">return</span> execute_delete();<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sigint_handler</span><span class="hljs-params">(<span class="hljs-keyword">int</span> signum)</span> </span>&#123;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>  <span class="hljs-built_in">exit</span>(EXIT_SUCCESS);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>* argv[])</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (argc &lt; <span class="hljs-number">2</span>) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Must supply a database filename.\n&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>  &#125;<br><br>  atexit(&amp;exit_success);<br>  signal(SIGINT, &amp;sigint_handler);<br><br>  open_file(argv[<span class="hljs-number">1</span>]);<br><br>  <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>    print_prompt();<br>    <span class="hljs-keyword">switch</span> (read_input()) &#123;<br>      <span class="hljs-keyword">case</span> INPUT_SUCCESS:<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> INPUT_TOO_LONG:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Input is too long.\n&quot;</span>);<br>        <span class="hljs-keyword">continue</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (input_buffer.buffer[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;.&#x27;</span>) &#123;<br>      <span class="hljs-keyword">switch</span> (do_meta_command()) &#123;<br>        <span class="hljs-keyword">case</span> META_COMMAND_SUCCESS:<br>          <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">case</span> META_COMMAND_UNRECOGNIZED_COMMAND:<br>          <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Unrecognized command &#x27;%s&#x27;.\n&quot;</span>, input_buffer.buffer);<br>          <span class="hljs-keyword">continue</span>;<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">switch</span> (prepare_statement()) &#123;<br>      <span class="hljs-keyword">case</span> PREPARE_SUCCESS:<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> PREPARE_EMPTY_STATEMENT:<br>        <span class="hljs-keyword">continue</span>;<br>      <span class="hljs-keyword">case</span> PREPARE_NEGATIVE_VALUE:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Column `a` must be positive.\n&quot;</span>);<br>        <span class="hljs-keyword">continue</span>;<br>      <span class="hljs-keyword">case</span> PREPARE_STRING_TOO_LONG:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;String for column `b` is too long.\n&quot;</span>);<br>        <span class="hljs-keyword">continue</span>;<br>      <span class="hljs-keyword">case</span> PREPARE_SYNTAX_ERROR:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Syntax error. Could not parse statement.\n&quot;</span>);<br>        <span class="hljs-keyword">continue</span>;<br>      <span class="hljs-keyword">case</span> PREPARE_UNRECOGNIZED_STATEMENT:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Unrecognized keyword at start of &#x27;%s&#x27;.\n&quot;</span>,<br>               input_buffer.buffer);<br>        <span class="hljs-keyword">continue</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">switch</span> (execute_statement()) &#123;<br>      <span class="hljs-keyword">case</span> EXECUTE_SUCCESS:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nExecuted.\n\n&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>参考资料：<a href="https://cstack.github.io/db_tutorial/">db_tutorial</a></p>]]></content>
    
    
    <categories>
      
      <category>实践</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>数据库</tag>
      
      <tag>树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>内存中MVCC系统的可伸缩垃圾收集</title>
    <link href="/2021/04/30/%E5%86%85%E5%AD%98%E4%B8%ADMVCC%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%8F%AF%E4%BC%B8%E7%BC%A9%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86/"/>
    <url>/2021/04/30/%E5%86%85%E5%AD%98%E4%B8%ADMVCC%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%8F%AF%E4%BC%B8%E7%BC%A9%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>为了支持混合事务和分析处理（HTAP），数据库系统通常依赖于多版本并发控制（MVCC），虽然MVCC优雅地实现了读操作和写操作的轻量级隔离，但它也产生了过时的元组版本，这些版本最终必须被回收。令人惊讶的是，我们发现在HTAP工作负载中，这些旧版本的回收，即垃圾收集，往往成为性能瓶颈。事实证明在长期运行的查询中，最先进的垃圾收集器的粒度太粗了。因此，版本的数量迅速增长，拖慢了整个系统。此外，标准的后台清理方法使系统容易受到工作负荷突然激增的影响。</p><p>在这项工作中，我们提出了一种新的垃圾收集方法，它可以急切地修剪过时的版本。它与事务处理的无缝集成使GC的开销最小，并确保良好的可扩展性。我们表明，我们的方法可以很好地处理混合工作负载。而且与现有的最先进的方法相比，还可以加快纯OLTP工作负载的速度，如TPC-C。</p><span id="more"></span><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>MVCC是数据库系统中最常见的并发控制机制，根据不同的实现，它保证了快照隔离或完全可序化，如果辅以预决策锁的话，MVCC已经成为许多商业系统的默认机制。</p><p>MVCC的核心思想是简答而强大的：当一个元组被更新时，它的前一个版本通过系统保持存活，因此，事务可以在一个一致的数据快照上工作，而不会阻塞其他事务。与其他并发控制协议相比，读操作可以访问元素的旧快照，而写操作正在创建新版本，尽管多版本控制本身是无阻塞的，而且是可扩展的，但它在混合工作负载中存在固有的问题，如果在长期运行的事务中存在许多更新，活动版本的数量会迅速增长。只要活跃的事务可能需要的版本，都不能被丢弃。</p><p>由于这个原因，长期运行的事务会导致一个“恶性循环”，在事务的生命周期内，新添加的版本不能被垃圾收集，活动版本的数量不断累积，导致了版本链变长。随着链的长度的增加，检索所需的版本的成本也会增加。版本检索会使长期运行的事务变得更加缓慢，这就是使影响更加扩大了。写入事务最初几乎不被较长版本链的影响。因为它们不需要遍历整个版本链。他们只在链的开始添加新的版本。因此，快速的写事务和慢速的读事务之间的差距越来越大，迅速产生越来越多的版本。在某些时候，写的性能也会受到版本链上不断增加的冲突的影响，因此新版本的插入被阻止了，而版本链被锁在GC上。当线程在前台清理版本时，系统也会损失事务的处理时间。</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210528161933.png" alt="图1"></p><p>如图2，我们通过监测混合CH基准中的MVCC系统，直观地看到了所谓的“恶性循环的”实际意义，OLTP线程持续地运行短暂的TPC-C风格的事务，而OLAP线程发出分析性查询。我们看到，读取性能在几秒钟内就崩溃了，而写入则因为长时间的GC变慢了。如果有更高的写入量或者更高的并发读操作，其负面影响会更加明显。然而，即使是低容量的工作负载，只要GC被一个运行时间很长的事务（例如，被一个交互式用户事务）阻断，就会遇到这个问题。</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210601164529.png" alt="图2"></p><p>事实上，GC是一个主要的实际问题，会导致内存使用量的增加、征用和CPU的峰值，这一点已经被其他人观察到了。然而，关于MVCC协议和其他论文数量相比，关于GC的研究很少。</p><p>在本文中，我们表明，垃圾收集器是MVCC系统的一个重要组成部分。它的实现可以对系统的整体性能产生巨大的影响，因为它影响到事务的管理。因此，它对所有类别的工作负载都很重要，而不仅仅是混合的垃圾多的工作负载。我们的实验结果强调了GC在现代多核数据库中的重要性。作为一种解决方案，我们提出了Steam——一种精简的，无锁的GC设计，其性能优于以前的实现。Steam每当穿越一个版本链时都会急切地修剪。它删除了所有不被任何活动事务需要的版本。但大多数系统所使用的标准高期限方法会错过这些版本。</p><p>第二节介绍了基本的版本管理和垃圾处理在MVCC系统中收集以及关于混合工作负载和可扩展性的挑战。</p><p>第三节对现有的GCs和设计决策进行了深入的调查。</p><p>第四节中提出了我们的可扩展和稳健的垃圾收集器Steam，它减少了长时间运行的事务的脆弱性。</p><h2 id="2-MVCC中的版本管理"><a href="#2-MVCC中的版本管理" class="headerlink" title="2 MVCC中的版本管理"></a>2 MVCC中的版本管理</h2><p>MVCC是一个并发控制协议，每当元组被修改时，它就备份元组的旧版本。对于每个元组，事务可以检索到事务开始时的有效版本。因此所有事务都可以观察到表的一致快照。</p><p>一个元组的版本在一个有序的版本记录链中管理。每个版本记录都包含元组的旧版本和表明可见性的时间戳。在快照隔离下，如果一个版本在事务开始前被提交，那么它对事务是可见的。因此，时间戳等于事务的提交时间戳或一个高的临时数字，如果它仍然在运行中。</p><p>MVCC可以维护一个元组的多个版本（快照），而每次更新都会在链上增加一个新的版本记录。该链是按时间戳排序的，以方便检索可见的版本。</p><p>图3显示了一个被多次更新的元组的版本链。由于事务B和C在v4被提交之前就开始了，它们必须穿过该链以检索可见版本v1。</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210601164736.png" alt="图3"></p><h3 id="2-1-识别过时的版本"><a href="#2-1-识别过时的版本" class="headerlink" title="2.1 识别过时的版本"></a>2.1 识别过时的版本</h3><p>在讨论高效的垃圾收集之前，我们再来看看什么时候删除一个版本是安全的。一般来说，只要活动事务需要它来观察和数据库的一致快照，版本就必须被保留下来。从本质上来说，这意味着所有对活动事务可见的版本都必须保留。这些版本是否会被实际检索并不重要，因为数据库系统通常无法预测一个事务的访问时间，特别是在交互式用户查询的情况下。因此，它总是要保留可见的版本，只要它们在未来可能被访问。</p><p>可见的版本是由当前活跃的事务决定的。当一个版本不再被任何活动事务所需要时，它可以被安全地删除。未来是事务将不需要它们，因为它们已经在数据库的较新快照上工作了。因此，每个版本的重新要求的寿命只取决于当前的活动事务。</p><p>在最好的情况下，垃圾收集器可以识别并重新移动所有不必要的版本。然而，传统的垃圾收集器只跟踪最古老的事务的开始时间戳。因此，他们只能得到一个粗略的可重新要求的版本记录的估计。基本上，只有在最古老的事务开始之前提交的版本被确定为过时的。这就导致了在多次更新和长期事务的情况下，会有几个“遗漏”的版本。为了克服这个问题，我们在4.3节中提出了一个更细化的方法，对不必要的中间版本进行修剪。</p><h3 id="2-2-GC的实际影响"><a href="#2-2-GC的实际影响" class="headerlink" title="2.2 GC的实际影响"></a>2.2 GC的实际影响</h3><p>如图2，在这个实验中，我们运行了混合的CH基准测试，它结合了事务性的TPC-C和分析性的TPC-H工作负载，一个OLAP和OLTP线程足以使传统的高标准GC的能力过度紧张。只有一个仓库，孤立的查询执行时间是相当快的，然而，与写的持续时间相比，一些查询已经运行了很长时间，足以运行到“恶性循环”。通过添加更多的线程和仓库，效果会更差。</p><p>查询吞吐量在若干秒后明显下降，查询开始持续数秒。这些长期运行的查询在最上面的图中显示0查询/秒的增加其。只要这些查询在运行，版本记录的数量就会堆积起来。这导致了版本记录数量的“鲨鱼鳍”出现。只有当读结束后，写才开始清理版本记录。在这些GC时期，它不能实现任何额外的写进度。随着时间的推移，效果越来越差，版本记录数量的振幅增加，而读写性能几乎下降到0。在这种设置下，只有一个写线程，GC线程的背压已经很高了，而且版本的数量不断增长。特别是如果GC线程不能赶上写线程的话，对读取性能的影响是巨大的。在某些时候，整个系统会耗尽内存。</p><h2 id="3-垃圾收集调查"><a href="#3-垃圾收集调查" class="headerlink" title="3 垃圾收集调查"></a>3 垃圾收集调查</h2><p>我们的调查将现代内存中MVCC系统的GC实现与我们的新方法Steam进行了比较，我们在第四节中详述。</p><p>Steam是一个高度可扩展的垃圾收集器，它建立在HyPer的事务和版本管理之上。通过基于当前的活动的事务精确地修剪版本链，避免了长的版本链。这是用一种类似于HANA的基于间隔的算法来完成的，只是版本修剪不是在后台进行的，而是在前台通过对事务处理的搭接来主动完成的。每当一个链因更新或插入而增长时，它就会被急切地修剪掉。这使得修剪的成本小的可以忽略不计，因为链已经被相应的更新操作锁定和访问。</p><p>Hekaton也在常规的事务处理过程中清理版本。与Steam不同的是，它只清理那些在扫描过程中被遍历的过时版本，而Steam在读者可能需要遍历它们时就已经删除了过时的版本。从本质上讲，Steam在版本链因新版本的插入而增长时就会进行修剪——将版本链的长度限制在活动事务的数量上。此外，Hekaton只根据一个更粗略的高水印概念回收版本，而Steam则清理一个链上的所有过时版本。</p><p>在高层次上，Steam可以被看做HANA，Hekaton和HyPer中各种现有技术的实际结合和扩展。正如我们在实验中所展示的，看似微小的差异对性能、可扩展性和可靠性都有巨大的影响。在本节的其余部分，我们将更详细地讨论不同的设计决策，并在表1中对其进行总结。</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210601174301.png" alt="表1"></p><p><strong>追踪水平</strong></p><p>数据库系统使用不同颗粒度来追踪垃圾收集的版本。最精确的方法是在元组级GC，GC通过扫描单个图元来识别过时的版本，一般来说，这是用一个周期性调用的后台真空程序来实现的。然而，在常规事务处理过程中，也有可能在前台找到并清理版本。例如，Hekaton的工作线程在查询处理过程中清理了他们看到的所有过时的版本。由于这种方法只清理了遍历的版本，Hekaton仍然需要一个额外的后台线程来寻找剩余的版本。</p><p>另外，系统可以根据事务行为来收集版本。所有由同一事务创建的版本都有相同的提交时间戳。因此，多个过时的版本可以被识别并一次性清理掉。虽然这使得内存管理和版本管理更容易，但与更细粒度的元组级方法相比，它可能会延迟单个版本的回收。</p><p>基于纪元的系统更进一步，将多个事务归入一个纪元。一个纪元是根据一个阈值标准来推进的，比如分配的内存量或版本数量。  BOHM也使用纪元，但由于它是分批执行事务的，所以它也在批次层面上跟踪GC。</p><p>最粗略的粒度是对每个表进行版本回收。当确定一组给定的转换动作将永远不会访问一个表时，这才有意义。只有这样，系统才能删除该表的所有版本，而不必等待这些事务的完成。由于这只适用于具有固定给定操作集的特殊工作负载，例如存储程序或准备好的语句，这种方法很少被使用。HANA是我们所知道的唯一一个将这种方法作为其图层和事务层GC的延伸的系统。一般来说，数据库系统不能确定地预测哪些表将在事务的生命周期内被访问。</p><p><strong>频率和精度</strong></p><p>频率和精度指的是GC识别和清理过时版本的速度和彻底程度。如果GC没有被定期触发或者工作不精确，那么它保留的版本就会超过必要的时间。基于纪元的系统通过在一定的阈值计数或内存限制的基础上推进其全局纪元来控制GC。因此，频率高度依赖于阈值的设置。</p><p>建立在后台线程上的GC系统，会周期性地触发后台线程。因此，GC的频率取决于背景线程被调用的频率。由于HANA和Hekaton使用后台线程来重新刷新他们的高水印，如果GC被调用的频率太低，那么垃圾收集的决策就会基于过时的信息。在最坏的情况下，GC会停滞，直到下一次调用后台线程。像Hekaton这样的系统，根据当前的负载自适应地改变间隔时间。</p><p>BOHM的事务是分批组织和执行的。在一个批次结束时进行GC，以确保所有的事务都执行完毕。除了一个元组的最新状态外，只有以前执行的批次的版本可以安全地进行GC。</p><p>除了GC的频率，它的彻底性主要由GC识别可删除版本的方式来决定。基于时间戳的识别方式不如基于区间的方式彻底。时间戳的方法比较近似，因为它只删除那些严格按照时间顺序排列的时间戳已经落后于高水位的版本，高水位是由当前活动交易的最小开始时间戳设定的。由于高水位线与最古老的活动事务有关，所以只要是活动的，长期运行的事务就会阻碍整个GC的进展。在这种情况下，基于时间间隔的GC仍然可以通过从链的中间位置切除过时的版本来取得进展。一般来说，基于时间间隔的GC只保留必要的版本，从而准确地清理数据库。</p><p><strong>版本存储</strong></p><p>大多数系统将版本记录存储在全局数据结构中，如哈希表。这使得系统可以独立地回收每一个版本。缺点是，标准情况下，整个交易的所有版本都落在水印后面，变得更加复杂，因为这些版本必须在全局存储中被识别。根据实施情况，这可能需要一个定期的后台真空过程。</p><p>由于这个原因，HyPer和Steam将其版本直接存储在事务中，即Undo Log。当一个事务落后于高水位时，它的所有版本可以一起被回收，因为它们的内存是由事务对象拥有的。尽管如此，单个版本仍然可以从版本链中被剪除（解除链接）。只有对其内存的回收被推迟到拥有的事务对象被释放。一般来说，使用事务的撤销日志作为版本存储也是很有吸引力的，因为撤销日志无论如何都是需要回滚的。  使用撤销日志条目作为版本记录是直截了当的，因为之前的存储图像包含了恢复一个元组的前一个版本的所有信息。由于空间的原因，我们只在版本记录中存储<em>delta</em>，即改变的属性。如果一个系统存储整个元组，更新宽表或具有可变大小属性的表，如字符串或BLOBs，会导致几个不必要的复制操作。</p><p>Hekaton的版本管理很特别，因为它不使用连续的表空间和原位元组。一个元组的版本只能从索引中访问。由于这个原因，Hekaton不区分版本记录和元组。此外，它是唯一一个将记录从最旧到最新排序的系统（O2N）。这种顺序迫使事务遍历整个链条以找到最新的版本，这使得系统的性能高度依赖于其快速修剪旧版本的能力。O2N排序也使得检测写与写之间的冲突变得更加昂贵，因为事务必须遍历整个链来检测冲突版本的存在。同样的情况也适用于回滚，回滚也需要遍历整个链来恢复和删除以前安装的版本。</p><p><strong>识别</strong></p><p>如果提交时间戳是单调的，它们可以用来识别过时的版本。所有在最老的活动事务开始之前提交的版本都可以被安全回收。  当活跃的事务被管理在一个有序的数据结构中时，如全局txn列表或txn地图，最老的活跃事务的开始时间戳可以在静态时间内确定。</p><p>由于纯粹的基于时间戳的方法错过了第2.1节中讨论的中间版本，像HANA和Steam这样的系统用更精细的基于时间间隔的方法来补充它。虽然这种方法使版本链的长度最小，但实施起来也更复杂。这些系统必须跟踪所有活跃的交易，并对每个版本链进行基于时间间隔的交叉分析。HANA通过使用参考计数列表（”全球STS跟踪器”）跟踪所有在同一时间开始的交易来实现这一点。在第4.3节中，我们提出了一个使用本地txn列表的更可扩展的替代实现。</p><p>为了实现更粗略的垃圾收集，也可以控制版本的寿命，以纪元为单位。这在本质上接近于其他系统所使用的更精确的基于时间戳的水印。然而，在数据库系统中，基于历时的内存管理是一种很有吸引力的技术，因为它可以用来控制所有类型的对象的回收，而不仅仅是版本。当一个事务开始时，它通过输入纪元将自己注册在当前的纪元中。这将导致纪元保护器推迟事务所做的所有内存去分配/版本删除，直到所有其他线程离开这个纪元，从而不再访问它们。虽然在历时中管理版本限制了GC的精度，但它允许系统在执行事务时不会出现单调增加的事务时间戳。例如，在基于时间戳排序的MVCC系统中，如Deuteronomy或BOHM，版本的创建或访问顺序可能与它们的逻辑时间戳显示的顺序不同。</p><p>与所选择的数据结构无关，识别哪些版本是过时的，既可以由后台（BG）线程来完成，也可以在前台（FG）主动完成。</p><p><strong>清除</strong></p><p>在HANA中，整个GC工作是由一个专门的后台线程完成的，该线程会定期触发。Hekaton在事务处理过程中即时清理所有版本。每当一个线程遍历一个过时的版本，它就会从链上删除它。注意，这只适用于O2N，当过时的（旧的）版本被存储在开始时，因此总是被事务所遍历。为了清理不经常访问的图元，Hekaton运行一个后台线程，扫描整个数据库，以寻找迄今为止错过的版本。然后，后台线程将清除这些版本的工作分配给工人线程，工人线程将GC工作与常规事务处理穿插进行。</p><p>在基于历时的系统中，一个常见的模式是将已提交的版本与当前的历时信息一起添加到一个自由列表中。当一个事务需要一个新的版本时，它会检查它是否能从基于当前纪元的自由列表中回收一个旧版本。因此，版本重新移动基本上是与正常的交易处理穿插进行的。然而，纪元保护应该周期性地释放超过新需要的版本。另外，随着时间的推移，版本的总体数量只能上升，因为所有重复使用的版本最终都会再次进入自由列表。通过限制版本的最大数量来解决这个问题。当达到硬性限制时，就不允许再创建版本了，线程会被联合起来执行GC，直到版本的数量再次得到控制。</p><p>HyPer和Steam也在前台执行整个GC工作，将GC任务穿插在事务执行过程中。如果有过时的版本，工人线程会在每次提交后直接回收这些版本。因此，GC成为事务处理的一个自然部分，不需要额外的后台线程。这使得系统可以自我调节，并对高峰期保持稳定，但代价是提交延迟略有增加。此外，每当Steam将一个新版本插入到一个链中时，它都会在创建时修剪过时的版本。  因此，Steam确保 “污染者 “负责清除垃圾，从而减轻了（可能已经很慢的）读者的负担。</p><h2 id="4-Steam垃圾收集"><a href="#4-Steam垃圾收集" class="headerlink" title="4 Steam垃圾收集"></a>4 Steam垃圾收集</h2><p>版本的垃圾收集在MVCC系统中具有内在的重要性，因为它可以保持较低的内存占用率并减少昂贵的版本检索次数。在这一节中，我们为MVCC系统中的垃圾收集提出了一个高效和稳健的解决方案。我们主要针对三个方面：可扩展性、长期运行的事务和内存效率设计。</p><h3 id="4-1-基本设计"><a href="#4-1-基本设计" class="headerlink" title="4.1 基本设计"></a>4.1 基本设计</h3><p>Steam以HyPer的MVCC实现为基础，并使其变得更加强大和可扩展。为了跟踪活动的和承诺的事务，HyPer使用两个链接列表，如图4所示。</p><p>虽然HANA和Hekaton使用不同的数据结构（一个参考计数的列表和一个地图），但高层属性是相同的。所有的实现都隐含地保持了交易行动的有序性，添加或删除一个交易可以在恒定的时间内完成。为了启动一个新的事务，系统将其添加到活动事务列表中。当一个活动事务提交时，系统会把它移到已提交的事务列表中，以保留其创建的版本。已完成的只读事务，如果没有创建任何元组版本，则直接被丢弃。</p><p>通过将新的或已承诺的交易追加到列表中，交易列表被隐含地按其时间戳排序。这种排序允许人们通过查看活动事务列表的第一个元素来有效地检索最小的startTs。已提交的交易中，commitId为min(startTs)的版本可以被安全回收。由于已提交的交易列表也是有序的，系统可以回收所有的交易，直到它遇到在最古老的活动交易之后提交的交易。</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210603193539.png" alt="图4"></p><h3 id="4-2-可扩展的同步化"><a href="#4-2-可扩展的同步化" class="headerlink" title="4.2 可扩展的同步化"></a>4.2 可扩展的同步化</h3><p>虽然前面描述的基本设计为GC操作提供了稳定的访问时间，但其可扩展性是有限的由全局事务列表组成。这两个列表都需要由一个全局突变器来保护。出于可扩展性的考虑，我们的目标是避免引入全局争用的数据结构。Hekaton通过使用一个无锁存器的交易行动图来避免全局突变的问题。  与此相反，Steam遵循的范式是，最好使用完全不需要同步的算法。对于GC，我们利用了一个特定领域的事实，即保留版本的时间稍长于必要的时间不会影响正确性—版本仍然可以在 “下一轮 “中被回收。Steam的实施根本不需要任何同步通信。Steam中的每个线程都管理着一个不相连的事务子集，而不是使用全局列表。一个线程只在全局范围内分享其线程本地最小值的信息，通过使用一个原子性的64位整数将其公开。这个线程本地的startTs可以被其他线程读取，以确定全球最小值。</p><p>本地最小值总是对应于第一个活跃的交易。如果没有活跃的交易，它被设置为可能的最高值（264 1）。在图中，本地最小值是4、3和12。为了确定GC的全局最小值，每个线程都扫描了其他线程的局部最小值。虽然这种设计不需要任何锁存，但全局最小值仍然可以在O(线程)内确定。更新线程的本地最小值也不会引入任何写入竞争，因为每个线程只更新自己的minStartTs。</p><p>在线程本地数据结构中管理所有事务可以减少争论。但缺点是，当一个线程由于缺乏工作而变得不活跃时，这可能会导致问题的出现。因为每个线程在处理事务的过程中都会清理其过时的版本，如果线程变得闲置，GC就会被延迟。为了避免这个问题，调度器会定期检查线程是否变得不活跃，并在必要时触发GC。</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210603213953.png" alt="图5"></p><h3 id="4-3-急于修剪过时的版本"><a href="#4-3-急于修剪过时的版本" class="headerlink" title="4.3 急于修剪过时的版本"></a>4.3 急于修剪过时的版本</h3><p>在最初的测试中，我们注意到在混合工作负载中出现了明显的性能下降。缓慢的OLAP查询阻碍了垃圾的收集，因为只要一个长期运行的查询处于活动状态，全局最小值就不会提前。根据分析查询的复杂性，这可能会使GC暂停很长时间。在并发的更新事务中，版本的数量会在查询的生命周期内迅速增加。这很容易导致1节所述的恶性循环。在实践中，这种影响会被倾斜的更新所进一步放大，从而导致更长的版本链。图3显示了一个元组的版本如何形成一个长链，其中大部分的版本对活动事务来说是无用的。无用的版本拖慢了长期运行的事务的速度，因为它们必须穿越整个链来检索最终需要的版本。因此，我们设计了Eager Pruning of Obsolete Versions (EPO)，删除了所有不被任何活动事务所需要的版本。为了识别过时的版本，每个线程定期检索当前活动事务的开始时间戳，并将其存储在一个排序的列表中。如第4.3.1节所述，活动时间戳的获取是有效的，无需额外的同步。在整个交易处理过程中，线程识别并删除所有当前活动交易不需要的版本。每当一个线程接触到一个版本链时，它就会应用以下算法来修剪所有过时的版本。</p><figure class="highlight scss"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs scss"><span class="hljs-selector-tag">input</span> : active timestamps A ( sorted )<br>output : pruned version chain<br>v_current &lt;-  getFirstVersion(chain)<br>for ai in A<br>v_visible &lt;- retrieveVisibleVersion(a_i; chain)<br><span class="hljs-comment">// prune obsolete in-between versions</span><br>for v in (v_current; v_visible )<br><span class="hljs-comment">// ensure that the final version covers all attributes</span><br>if attrs(v) not in attrs(v_visible)<br>merge ( v , v_visible )<br>chain<span class="hljs-selector-class">.remove</span> ( v )<br><span class="hljs-comment">// update current version iterator</span><br>v_current &lt;- v_visible<br></code></pre></div></td></tr></table></figure><p>我们只在版本记录中存储改变的属性，以节省内存。由于这个原因，我们必须检查v的所有属性是否被vvisible覆盖。如果有额外的属性，我们就把它们合并到最终版本中。存储整个元组的系统不需要这种检查，可以直接丢弃中间的版本。</p><p>图6显示了从时间戳20开始的一个活动事务的版本链的修剪情况。它显示了相对简单的情况，即所有的属性都被vvisible覆盖，以及更复杂的情况，即中间的版本包含额外的属性。  在这种情况下，我们将缺失的版本添加到最终版本中。  当一个属性被多次更新时，当我们在接近可见版本vvisble时发现它的旧版本，我们就会覆盖它。在我们的例子中，A50被A25覆盖了。  在修剪之后，vcurrent被设置为vvisible的当前值，vvisible被推进到下一个较旧的（较小的）活动id可见的版本。由于我们的例子中只有一个活动事务，我们可以在这一点上停止。</p><p>由于版本链和活动时间戳都是经过排序的，没有重复，所以每个版本只被算法触及一次。</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210603220014.png" alt="图6"></p><h3 id="4-3-1-短暂的事务"><a href="#4-3-1-短暂的事务" class="headerlink" title="4.3.1 短暂的事务"></a>4.3.1 短暂的事务</h3><p>EPO是为混合工作负载设计的，其中一些交易（主要是OLAP查询）明显比其他的慢。如果所有的交易都一样快，它就没有帮助，因为提交的时间戳与最古老的活动交易的ID几乎没有差别。</p><p>一个使用全局最小值的标准GC在这里已经工作得非常好。因此，创建一个活跃的交易集几乎不会有什么回报，因为可还原的版本链的数量很少。理想情况下，我们可以避免重新计算当前交易时间戳的开销。</p><p>然而，一般来说，数据库系统不可能知道工作负载的特点，而且会随着时间的推移而改变。因此，我们不是关闭EPO，而是减少其开销，而不影响其在混合工作负载中的有效性。</p><p>该方法的唯一可测量的开销是创建当前活动事务的排序列表。列表的创建只给每个事务的处理增加了几个周期（对于一个使用10个工作线程的系统来说，有10条负载指令2并对其进行排序），但在高容量的微观测试中，它仍然是明显的。</p><p>为了减少这种开销，每个线程都会重复使用其有效交易列表，如果它仍然是合理的最新的。因此，成本被分摊到多个短暂的交易中，开销变得可以忽略不计。对于运行时间超过1毫秒的交易，获取活动交易时间戳的成本变得微不足道。EPO的质量不会受到影响，因为长期运行的交易集的变化频率明显低于活动交易列表的更新。</p><p>在使用廉价键值更新事务的微观测试中，我们注意到，更新周期可以被设置为低至5毫秒，而不会造成任何可衡量的开销。这个更新周期仍然明显小于甚至是 “短的长期运行 “事务的生命时间。</p><h3 id="4-3-2-HANA的基于区间的GC"><a href="#4-3-2-HANA的基于区间的GC" class="headerlink" title="4.3.2 HANA的基于区间的GC"></a>4.3.2 HANA的基于区间的GC</h3><p>HANA的间隔GC建立在类似的技术基础上，以缩短不必要的长版本链，但它在重要的方面有区别，总结在表2。最大的区别是如何访问版本链进行修剪。  在Steam中，修剪发生在一个元组的每次更新期间，也就是说，每当版本链被一个新的版本扩展时。因此，版本链永远不会增长到比当前活动事务数量更多的版本，也不会包含过时的版本。</p><p>相反，在HANA中，修剪是由一个专门的后台线程完成的，该线程每隔10天才会被触发。当HANA的GC线程被触发时，它扫描了在最古老的活动事务开始后提交的版本集。  对于这些版本中的每一个，它都会使用与我们类似的基于合并的算法来检查它在其相应的版本链中是否已经过时。这将导致额外的链访问，而Steam可以在正常处理中 “回溯 “这项工作。由于HANA只是周期性地调用基于间隔的GC，版本链不会被修剪，并在GC再次被调用之前不断增长。</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210603215712.png" alt="表2"></p><h3 id="4-4-版本记录的布局"><a href="#4-4-版本记录的布局" class="headerlink" title="4.4 版本记录的布局"></a>4.4 版本记录的布局</h3><p>版本记录的设计应该在空间和com-putation上是有效的。所有涉及版本的操作（插入、更新、删除、查找和回滚）都应该尽可能有效。此外，布局应该有利于GC本身，特别是我们的修剪中间版本的算法。</p><p>表3显示了一个版本记录的基本布局。它有一个类型（插入/更新/删除）和在版本中编码的可见性信息。在提交时，版本被设置为提交的时间戳，这使得该版本对所有未来的事务都是可见的。为了保证原子提交，版本包括一个锁位，当一个事务同时提交多个版本时，它就会被使用。</p><p>当一个事务被回滚时，它使用RelationId和TupleId来识别和恢复关系中的元组。  这些字段在GC期间也被用来识别拥有版本链的元组。版本链本身被实现为一个使用Next Pointer字段的链接列表。下一个指针要么指向链中的下一个版本记录，要么在没有记录的情况下指向NULL。</p><p>对于所有类型的版本记录，除了删除，我们需要一些额外的字段或变化。对于删除，只需要来存储一个元组由于被删除而变得不可见的时间戳。</p><p>对于插入，我们通过重新解释属性TupleId和Next Pointer来调整数据布局，以维护一个插入元组ID的列表。这使我们能够更有效地处理批量插入，因为我们可以对同一关系的所有插入元组使用一个版本记录。共享插入的版本记录减少了内存占用（以前每个插入的元组都需要一个自己的版本记录）并改善了提交延迟。我们现在可以通过只更新一个版本来原子地提交多个版本。这种优化是可能的，因为新的元组只能被插入到以前的空槽中。  因此，我们可以重新使用<em>下一个指针</em>字段来维护插入的图元ID的列表。对于MVCC，我们只需要插入的图元变得可见时的信息。  元组ID列表可以通过存储后续元组的范围来进一步压缩，用于批量插入。</p><p>更新版本记录需要最多的字段，因为它们包含元组以前的版本（BeforeImages）。为了节省空间，我们只存储改变了的at-tributes的版本，而不是元组的完整副本。因此，版本记录需要明确指出它包含哪些属性。因此，对于所有少于64个属性的关系，我们使用一个64位的属性掩码，其中每个改变的属性都用一个位来标记。当关系有更多的列时，我们使用所有改变的属性的id的列表来表示改变的属性。</p><p>虽然与列表相比，属性掩码节省了空间，但它也允许我们使用单一的位智或操作来执行检查一个版本记录是否被另一个版本记录所覆盖（参见算法第9行）。  如果vx和vy的属性掩码的位智或等于vx的属性掩码，那么vy的所有属性都被vx覆盖。</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210603215606.png" alt="表3"></p><h2 id="5-结论"><a href="#5-结论" class="headerlink" title="5 结论"></a>5 结论</h2><p>在本文中，我们展示了在现代多核系统上的内存MVCC系统的垃圾收集的重要性。我们发现，GC应该基于线程本地数据结构和异步通信以获得最佳性能。此外，对于HTAP的工作负载来说，保持尽可能低的活动版本数量是非常重要的，因为它是短命的写和长命的读。在传统的基于高水印的方法中，一个长期运行的事务会在其生命周期内阻碍GC的进展。我们新颖的、可扩展的GC Steam通过每当有新版本加入时急切地修剪所有过时的版本来加速事务处理和垃圾清除。因此，Steam有效地将链的长度限制在活动事务的数量上。除了HTAP工作负载，我们的实验结果表明，Steam有利于所有类型的工作负载，从只写到只读。与其他先进的GC方法相比，Steam在交易处理中的无缝集成使其性能更加优越。来自交易处理的GC。</p>]]></content>
    
    
    <categories>
      
      <category>翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>GC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图书馆管理系统</title>
    <link href="/2021/04/24/%E5%9B%BE%E4%B9%A6%E9%A6%86%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    <url>/2021/04/24/%E5%9B%BE%E4%B9%A6%E9%A6%86%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h2 id="基本情况"><a href="#基本情况" class="headerlink" title="基本情况"></a>基本情况</h2><p><code>LibraryManagementSystem</code>实现了一个网上图书馆的功能，可以对图书进行借阅以及管理。实现了管理员和用户两种权限，具体功能请参考”功能设计“。</p><span id="more"></span><h2 id="开发环境和运行"><a href="#开发环境和运行" class="headerlink" title="开发环境和运行"></a>开发环境和运行</h2><h3 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h3><p>Spring+SpringMVC+MyBatis、Bootstrap</p><h3 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h3><p>Win10、IntelliJ IDEA 2020.3.3、mysql 8.0.21、Jetty 9.4.40.v20210413</p><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><ol><li><p>运行library.sql创建本项目所需数据库</p></li><li><p>将项目导入IntelliJ IDEA中，修改<code>dp.properties</code>中的<code>password</code>以配置与本地mysql数据库的连接，配置好Jetty运行即可（或者在根目录下运行<code>mvn Jetty:run</code>）</p></li></ol><p>注：如果使用的mysql和Jetty版本不一样请在<code>pom.xml</code>中修改</p><h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><h3 id="数据表"><a href="#数据表" class="headerlink" title="数据表"></a>数据表</h3><p>一共设计了6张表：</p><ul><li><p>admin：存储管理员信息</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210430112206.png" alt="admin"></p></li><li><p>book_info：存储图书信息</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210430125857.png" alt="book_info"></p></li><li><p>lend_list：存储借书信息</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210430130035.png" alt="lend_list"></p></li><li><p>reader_card：存储借书卡信息</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210430130020.png" alt="reader_card"></p></li><li><p>reader_info：存储读者信息</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210430125958.png" alt="reader_info"></p></li><li><p>class_info：存储图书类型信息</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210430125923.png" alt="class_info"></p></li></ul><h3 id="ER图"><a href="#ER图" class="headerlink" title="ER图"></a>ER图</h3><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210430111937.jpg" alt="图书管理系统ER图"></p><h2 id="功能设计"><a href="#功能设计" class="headerlink" title="功能设计"></a>功能设计</h2><h3 id="管理员"><a href="#管理员" class="headerlink" title="管理员"></a>管理员</h3><ul><li>查看、编辑用户信息</li><li>查看、检索、编辑图书信息</li><li>查看、编辑借阅情况</li><li>修改密码</li></ul><h3 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h3><ul><li>查看个人信息</li><li>查看、检索图书信息、借阅归还图书</li><li>查看个人借阅情况</li><li>修改密码</li></ul>]]></content>
    
    
    <categories>
      
      <category>实践</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>JavaWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>同时多线程结构上操作系统的行为分析</title>
    <link href="/2021/04/11/%E5%90%8C%E6%97%B6%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BB%93%E6%9E%84%E4%B8%8A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%A1%8C%E4%B8%BA%E5%88%86%E6%9E%90/"/>
    <url>/2021/04/11/%E5%90%8C%E6%97%B6%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BB%93%E6%9E%84%E4%B8%8A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%A1%8C%E4%B8%BA%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>作者：Joshua A. Redstone, Susan J. Eggers and Henry M. Levy University of Washington</p><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本论文首次分析了操作系统在同步多线程(SMT)处理器上的执行情况。虽然SMT在过去六年得到了广泛的研究，但这些研究大都集中在用户模式执行上。然而，许多最适合多线程技术的应用程序都将很大一部分时间都花在内核代码上。因此，要完全理解这种工作负载的行为，需要执行和测量操作系统以及应用程序本身。</p><p>为了进行这项研究，我们做了以下工作：<br>1.修改Digital Unix 4.0d操作系统以运行在SMT CPU上<br>2.将我们的SMT Alpha指令集模拟器集成到SimOS模拟器种以提供一个执行环境</p><p>对于操作系统密集型工作负载，我们在SMT上运行多线程Apache Web服务器。我们将Apache的用户模式和内核模式行为与标准SPECInt工作负载进行了比较。总的来说，我们的结果展示了SMT处理器上操作系统密集型工作负载的微架构影响，并提供了对Apache Web服务器操作系统需求的深入了解。SMT处理器与Web和OS软件之间的协同作用产生了比以前检查过了任何工作负载（包括商业数据库和显示并行程序）上更大的吞吐量增益。</p><span id="more"></span><h1 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h1><p>同步多线程（SMT）是一种延迟容忍的CPU体系结构，它在每个周期中从多个线程执行多个指令。SMT的工作原理是将线程级并行转换为指令级并行，有效地将来自不同线程的指令送入大问题、无序超标标量处理器的功能单元。在过去的六年里，SMT得到了广泛的研究。康柏最近宣布Alpha 21464将包括SMT。作为一种通用的吞吐量增强机制。同步多线程特别适合于天生是多线程的应用程序，例如作为数据库和Web服务器，以及多程序和平行的科学工作负载。</p><p>本文首次检查了：<br>1.SMT架构上的操作系统行为<br>2.Web服务器SM应用程序，对于基于服务器的环境，操作系统是工作负载的关键组件。<br>以前的研究表明，数据库系统在内核中花费了30%到40%的执行事件，而我们的测量表明，Apache Web服务器在内核中花费了75%以上的时间。因此，对它们行为的任何分析都应该包括操作系统活动。<br>由于几个原因，操作系统对处理器的要求比典型的用户代码更高。<br>首先，操作系统是巨大的程序，由于代码和数据的大小，它们会淹没缓存和TLB。<br>其次，由于频繁的分支和不频繁的循环，操作系统可能会影响分支预测性能。<br>第三，操作系统的执行通常是短暂的和间歇的，由中断、异常或系统调用调用，并可能导致替换有用的缓存、TLB和分支预测状态，但好处很少或没有。<br>第四，操作系统可能执行自旋等待、显式缓存/TLB失效和其他用户模式代码中不常见的操作。由于这些原因，忽略操作系统（在架构模拟中通常是这样做的）可能会导致对系统级性能的误导性描述。即使对操作系统不密集的应用程序，与操作系统执行的指令数量相比，操作系统的性能影响也可能不成比例地大。<br>对于SMT，功能处理器和操作系统还不存在。相反，我们扩展了SimOS-Alpha基础设施，添加了一个基于alpha的SMT核心作为指令执行引擎。SimOS是一个模拟器，足够详细的引导和执行一个完整的操作系统，在康柏Alpha的情况下，SimOS也执行PAL代码。我们还修改了Digital Unix 4.0d操作系统以支持SMT。这种修改非常简单，因为Digital Unix的目标是在传统的共享内存处理器上运行，因为已经为多线程操作同步了。<br>作为SMT环境中操作系统行为的首次研究，我们的目标是回答几个基本问题<br>1.当操作系统添加到工作负载中时，以前报告的结果会发生什么变化（如果有的话）？特别是，我们希望核实之前研究的IPC结果，看看他们排除OS是否过于乐观。对于这些研究我们使用了一个由多个SPECInt基准组成的多程序工作负载。<br>2.也是更重要的，操作系统密集型工作负载和传统的工作负载都执行SMT在体系结构级别上的主要行为差异是什么？例如，操作系统如何改变微体系结构级别的资源利用率，对于具有细粒度资源共享（如SMT）的处理器，它会导致什么特殊问题（如果有的话）？对于这个问题，我们研究了一个操作系统密集型的应用程序，即广泛使用的Apache Web服务器，它是由SPECWeb基准测试驱动的。我们比较了Apache工作负载和SPECInt工作负载，以研究高操作系统和低操作系统使用的擦会议。<br>3.像Apache这样的Web服务器如何从SMT中获益，从软件的角度看，它将时间花在哪里？这个分析本身就很有趣，因为Web服务器和类似的应用程序越来越重要。因此我们给出了无序超标量和SMT上Apache的结果。<br>总定来说，我们的结果描述了操作系统密集型工作负载的架构行为和关键应用程序（Apache Web服务器）的软件行为（在操作系统内）。<br>本文组织如下。第二节详细介绍了我们的测量方法、模拟环境和我们使用的工作负载。第三节给出了我们在SMT上的两种工作负载（包括操作系统执行）的测量结果。第三节的前半部分介绍了由SPECInt应用程序组成的多编程工作负载，而后半部分主要关注Apache工作负载。第四节描述了以前的工作及其与我们研究的关系。我们在第五节做总结。</p><h1 id="2-方法"><a href="#2-方法" class="headerlink" title="2. 方法"></a>2. 方法</h1><p>本节描述在我们基于模拟的实验中使用的方法。我们首先描述SMT处理器和模拟硬件配置的西结。然后，我们从硬件和软件两个层面描述操作系统仿真环境。最后，我们描述评估的两个工作负载：一个是SPECInt95基准测试的多编程工作负载；另一个是Apache Web服务器。</p><h2 id="2-1-SMT和超标量处理器模型"><a href="#2-1-SMT和超标量处理器模型" class="headerlink" title="2.1 SMT和超标量处理器模型"></a>2.1 SMT和超标量处理器模型</h2><p>SMT是一种延迟容忍的CPU体系结构，它在每个周期中执行来自多个线程的多个指令。通过线程级并行转换为指令级并行，从不同线程发出指令的能力可以更好地利用执行资源。以前的研究已经证实，SMT可以有效地提高各种工作负载上的吞吐量，同时仍然为单线程应用程序提供良好的性能。<br>在硬件层面，SMT是现代无序超标量（如MIPS R10000或Alpha 21264）的直接扩展。SMT复制了一个超标量的寄存器文件、程序计数器、子程序堆栈和内部处理器寄存器，以保存多个线程的转台（我们将包含线程状态的硬件资源集称为上下文）。除了复制线程状态以外，SMT还具有用于管道刷新、指令退出、子例程返回预测和捕获的每上下文机制。康柏估计，对支持SMT所需的无序超标量进行修改，只会使芯片面积增加10%。<br>表一列出了模拟的SMT处理器和存储系统的参数，这些参数使选择作为近期处理器的特性。我们评估的无序超标量提供了与SMT相同的硬件资源，除了它缺少额外的硬件上下文，并且由于它的寄存器文件更小，它有更少的两个流水线阶段。<br><img src="https://img-blog.csdnimg.cn/2020122014505387.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjMzMzQw,size_16,color_FFFFFF,t_70" alt="表一：SMT参数"></p><h2 id="2-2-操作系统执行"><a href="#2-2-操作系统执行" class="headerlink" title="2.2 操作系统执行"></a>2.2 操作系统执行</h2><h3 id="2-2-1-操作系统仿真环境"><a href="#2-2-1-操作系统仿真环境" class="headerlink" title="2.2.1 操作系统仿真环境"></a>2.2.1 操作系统仿真环境</h3><p>在某种程度上，操作系统只是一个大程序；然而，它在访问低级硬件资源时（例如，I/O设备寄存器和内部CPU寄存器）和响应低级硬件事件（例如，异常和中断）方面是独特的。因此，要模拟操作系统，就需要模拟这些资源和事件。在本工作中，我们构建了SimOS-alpha硬件仿真框架。将我们的SMT CPU模拟器集成到SimOS中。这允许我们在模拟器上引导和运行操作系统，并在我们的模拟器中包含将在实际CPU上运行的每条指令，有特权的或无特权的。SimOS环境也执行Alpha PAL代码—存在于操作系统本身之下的一层软件。例如，PAL代码用于响应TLB丢失和处理操作系统内的同步（SETIPL）。我们还对几乎所有影响内存层次结构的操作系统/硬件交互进行建模，比如DMA操作和缓存刷新指令。一个例外是来自网络接口的DMA操作；尽管包含与网络相关的DMA将使Apache工作负载的内存总线事务数加倍（SPECInt工作负载不使用网络），但平均内存总线延迟仍然微不足道，因为它目前每个总线事务只有0.25个周期。<br>我们的研究集中在CPU和内存性能瓶颈上。为了节省模拟时间，我们模拟了一个零延迟磁盘。使用大型、快速磁盘阵列子系统对机器进行建模。但是，将执行所有操作磁盘的操作系统代码，包括磁盘驱动程序和DMA操作。对磁盘绑定及其进行建模可能会改变系统行为，特别是在缓存层次结构中。</p><h3 id="2-2-2-操作系统修改"><a href="#2-2-2-操作系统修改" class="headerlink" title="2.2.2 操作系统修改"></a>2.2.2 操作系统修改</h3><p>我们执行康柏digital Unix 4.0d操作系统，这是一个（共享内存）多处理器感知的操作系统。通过允许SMT在操作系统中显示为共享内存多处理器（SMP），只需在SMT和SMP体系结构不同的地方对操作系统进行更改。在Alpha的情况下，这些差异是SMT的共享TLB和L1缓存，而Alpha SMP的每个处理器的TLB和L1缓存，而Alpha SMP的每个处理器的TLB和L1缓存。在这两种差异中，只有与tlb相关的OS代码需要修改。<br>Alpha TLB在TLB条目上包含一个地址空间号（ASN）标记，它允许多个地址空间共享TLB，并减少上下文切换时的TLB刷新。由于多个线程可以同时访问SMT处理器的共享TLB，操作这些asn需要在上下文切换期间进行适当的互斥。因此，我们对tlb相关的代码做了一些更改。首先，我们修改了ASN分配算法以覆盖多个执行线程。其次，我们在每个上下文基础上复制了用于修改TLB条目的内部处理器寄存器；这样就删除了竞态条件，并允许多个上下文并行处理TLB miss。第三，我们删除了TLB击落代码，这在单处理器SMT中是不必要的。<br>尽管SMT处理器和MP的缓存架构接口不同，但这并不需要对操作系统进行修改。该接口提供了刷新L1指令和数据缓存的命令，在SMT中，这会导致刷新线程共享缓存，而不是线程本地缓存。由于缓存是软状态，因此结果的额外刷新可能是不必要的，但绝对不会是错误的。<br>我们执行的操作系统包含在SMT上运行Digital Unix所需的最小更改集，但没有探索大量的优化机会。例如，操作系统结构（如空闲循环和自旋锁定）是不必要的，会浪费SMT上的资源。（然而，在本文实验中，空闲周期栈稳定状态CPU比例不超过0.7%，旋转锁定在SPECInt工作负载中占不到1.2%，在Apache工作负载中占不到4.5%）。另一个可能的优化是用smt优化的调度器替换MP OS进程调度器。我们计划研究操作系统优化为未来的工作，但令人鼓舞的是，可以直接修改支持smp的操作系统，以便在SMT处理器上工作。</p><h2 id="2-3-模拟工作负载"><a href="#2-3-模拟工作负载" class="headerlink" title="2.3 模拟工作负载"></a>2.3 模拟工作负载</h2><p>在这项研究中，我们检查了两种不同的工作负载。第一个是多程序工作负载，由SPEC95Int的所有8个应用程序组成，我们对该套件模拟了6.5亿条指令。选择SEPCInt95有两个原因，首先，由于它通常用于架构评估，包括SMT的研究，我们希望了解在以前的工作中没有包含OS活动遗漏了什么。其次，由于Apache也是一个interger程序，SPECInt的性能可以作为基线，帮助了解Apache的性能。<br>第二个工作负载是Apache（版本1.3.4），这是一个流行的公共域Web服务器，由大多数Web站点运行。因为它大量使用OS服务（我们的测量显示75%的执行周期是在内核中度过的），所以它是一个用于检查OS性能的丰富环境（本文中介绍的大多数Apache数据都是基于对超过10亿条指令的模拟，从服务器空闲时开始）。然而，第3.2节中的超标量实验是在大约7亿条指令的模拟上进行的，受到模拟时间的限制。<br>我们使用SPECWeb96驱动Apache，这是一个Web服务器性能基准测试。我们配置Apache64个服务器进行，配置了SPECWeb 128个提供请求的客户端。为了支持使Apache饱和的请求速率。为了支持使Apache饱和所需的请求速率，我们将SPECWeb基准作为两个驱动进程执行，每个驱动程序有64个客户端。如果驱动程序运行在一个本地Alpha，然后网络代码将无法正常运行，消息被TCP丢弃。因此，我们构建了一个框架，在这个框架中，我们在单个Alpha上运行三个SimOS副本。结果是SPECWeb96客户端出现了与Apache完全相同的减速。客户端以Apache可以处理的速度生成数据包，并且双方的OS代码可以正确地管理网络接口和协议。在这三个SimOS环境之间，我们模拟了一个直接的网络连接，该连接传输数据包不存在丢失和延迟。模拟的网卡以10毫秒的时间粒度中断CPU，并且网络模拟器每隔10毫秒强制跨所有机器执行屏障同步。这个屏障使模拟器保持同步运行，并保证我们实验的可重复性的模拟的确定性执行。</p><h3 id="2-3-1-只模拟应用程序代码"><a href="#2-3-1-只模拟应用程序代码" class="headerlink" title="2.3.1 只模拟应用程序代码"></a>2.3.1 只模拟应用程序代码</h3><p>为了更精确地描述操作系统对性能的影响，我们将包含操作系统工作负载模拟与之模拟应用程序代码的工作负载模拟进行了比较。仅用于应用的模拟是通过一个单独的模拟器来完成的，该模拟器源自以前SMT研究中使用的SMT模拟器。仅应用程序模拟器将所有系统调用和内核陷阱建模为立即完成，对硬件状态没有影响。</p><h1 id="3-结果"><a href="#3-结果" class="headerlink" title="3. 结果"></a>3. 结果</h1><p>本节介绍基于simos的操作系统行为测量结果及其对SMT处理器的影响，在3.1节中，我们考虑一个特定的多程序工作负载；第3.2节研究了Apache工作负载，并将其与SPECInt的结果进行了比较。</p><h2 id="3-1-对SPECInt工作负载的评估"><a href="#3-1-对SPECInt工作负载的评估" class="headerlink" title="3.1 对SPECInt工作负载的评估"></a>3.1 对SPECInt工作负载的评估</h2><p>传统上，架构师根据科学和程序开发工作负载的分析来决定处理器和内存子系统的设计，SPECInt基准套件就是典型的例子。然而，大多数这样的分析只检查用户模式代码。在本节中，我们将评估这种做法的适当性，同步多线程上下文中的方法学策略。我们希望特别回答两个问题。首先，在SMT上包括（或不包括）操作系统的影响是什么，即使对于SPECInt基准测试的多编程工作负载也是如此？虽然我们预计SPECInt的操作系统使用率较低，但之前的研究表明，忽略内核代码，即使在这样低操作系统环境中，也会导致对内存系统行为的不良估计。第二，操作系统代码对8-上下文SMT的影响与无序超标量的影响相比如何？SMT的独特之处在于它同时执行内核模式和用户模式指令。也就是说，在一个周期中，来自多个内核例程的指令可以与来自多个用户应用程序的指令一起执行，而所有这些指令都共享一个内存层次结构。相反，超标量可以将来自单个应用程序的用户指令长流与来自单个内核服务的内核指令长流交替使用。在两种体系结构中，这种差异可能会对内存系统性能产生不同的银杏果i昂。在3.2节中，我们将根据Apache（一种操作系统更密集的工作负载）研究类似的问题。</p><h3 id="3-1-1-传统的SPEC-interger工作负载在SMT处理器上执行的OS行为"><a href="#3-1-1-传统的SPEC-interger工作负载在SMT处理器上执行的OS行为" class="headerlink" title="3.1.1 传统的SPEC interger工作负载在SMT处理器上执行的OS行为"></a>3.1.1 传统的SPEC interger工作负载在SMT处理器上执行的OS行为</h3><p>图一显示了多程序SPECInt95基准测试的执行周期百分比，这些基准测试占用用户空间、内核空间，或者在SMT处理器上执行时空闲。在程序启动期间（如图虚线左侧所示），操作系统平均占执行周期的18%，一旦达到稳定状态，它就会下降到相当稳定的5%，在执行过程中至少要维持16亿次循环（图中只显示了一部分）。在程序初始化较高的OS活动主要是由于TLB未处理（占所有 执行周期的12%）和系统调用5%，如图二所示。大多数TLB活动集中在处理TLB在用户空间丢失的数据（大约95%）。TLB错过了对内核内存管理的调用，而页面分配占据了这些调用的大部分，如图三所示。大多数由应用程序发起的系统调用是针对文件系统的；特别是，读取输入文件占用3.5%的执行周期，这与读取源和/或配置文件的应用程序一致。进程创建和控制以及内核前导（识别并分派到特定的系统调用）占用了大部分剩余的系统调用时间。注意，内核活动使Alpha PAL代码的执行相形见绌。<br>一旦达到稳定状态，内核活动将下降到执行周期的5%，但是TLB处理和系统调用时间的比例与启动期间大致相同。唯一重要的变化是文件读取调用的减少，因为程序已经从初始化转向。<br>表2显示了内核中各主要指令类别的指令分布情况；这些值是证书应用程序的典型值，包括SPEC整数基准测试。内核指令与用户指令在三个方面不同，首先，大约一半的内存操作在程序启动时，三分之一的负载和三分之二的存储处于稳定状态，不适用TLB，即TLB。它们直接指定物理地址。其次，内核控制传输包括PAL入口/返回分支。第三，与用户代码相比，稳态内核代码的条件分支占有率只有用户代码的一般。但是，由于内核执行时间很少，所以这些差异的总体影响很小。</p><p><img src="https://img-blog.csdnimg.cn/20201223203038244.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjMzMzQw,size_16,color_FFFFFF,t_70#pic_center" alt="图一 SPECInt95在SMT上执行的执行周期分解，在内核中花费的周期占所有执行周期的百分比在顶部黑色部分"><br><img src="https://img-blog.csdnimg.cn/20201223182106203.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjMzMzQw,size_16,color_FFFFFF,t_70#pic_center" alt="图2：SPECInt的内核时间分解"></p><p><img src="https://img-blog.csdnimg.cn/20201223122255824.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjMzMzQw,size_16,color_FFFFFF,t_70#pic_center" alt="图3：内存内核管理代码"><br><img src="https://img-blog.csdnimg.cn/2020122312230790.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjMzMzQw,size_16,color_FFFFFF,t_70#pic_center" alt="图4：系统调用占总执行的百分比"><br><img src="https://img-blog.csdnimg.cn/20201223122319240.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjMzMzQw,size_16,color_FFFFFF,t_70#pic_center" alt="表2：按指令类型分列的动态指令在SPECInt工作负载中的百分比，内存操作的括号中的百分比表示加载和存储的物理地址的比例。还包括分支指令的百分比细分，对于条件分支，括号中的数字表示所采用的条件分支的百分比"></p><h3 id="3-1-2-为什么要在特定的工作负载上模拟操作系统"><a href="#3-1-2-为什么要在特定的工作负载上模拟操作系统" class="headerlink" title="3.1.2 为什么要在特定的工作负载上模拟操作系统"></a>3.1.2 为什么要在特定的工作负载上模拟操作系统</h3><p>表3上半部分显示了在SMT上模拟SPECInt95和操作系统时，几种硬件数据结构中的未命中率。总的结果反映了其他研究人员在单线程处理器研究中发现的情况，即操作系统表现出的性能比特殊应用程序要差。分支目标缓冲器的内核未命中率特别高，因为两个因素：操作系统执行其实很少，无法建立一个持久的分支目标状态；大多数内核未命中（78%）取代其他内核条目错误是由于重复的变化间跳转的目标地址。<br>表3下半部分的分布结果表明，除指令缓存外，应用程序线程内部或应用程序线程之间的冲突是造成绝大多数缺失的原因。内核引起的冲突缺失仅占BTB缺失的10%，数据缓存缺失的18%，L2缓存缺失的9%和数据TLB缺失的18%，相比之下，大多数指令缓存丢失（60%）是由内核引起的。强制缺失对于所有硬件结构都是微不足道的，除了L2缓存，在L2缓存中内核为应用程序预取数据，因此吸收了许多第一次引用缺失的成本。<br>在较高的层次上，多编程SPECInt工作负载的内核执行频率较低可以改善内核特定于硬件组件的性能，表4通过比较在SMT上有操作系统活动和没有操作系统活动时以稳定状态执行的SPECInt工作负载的几个体系结构度量，说明了这种影响。这些数字表明，指令吞吐量仅略有下降，原因是操作系统，除了少数例外，线程共享硬件资源利用率在包含内核时略有下降。我们观察到性能下降百分比较大的那些硬件组件并没有对性能底线造成很大影响，因为它们最初并没有表现出特别糟糕的行为。<br>最严重的变化是模拟内核造成的，依赖于fetch引擎的两个部分，分支预测硬件和指令缓存之间的交互。转移错误预测增加了15%，指令缓存丢失增加了1.9倍，很大程度上是由于内核执行的干扰。指令丢失主要是由指令页重映射引起的缓存刷新引起的，而不是由特定缓存位置的冲突引起的，指令缺失的增加反过来导致可获取上下文的数量减少的8%，例如，那些不为指令丢失或中断服务的上下文，由于模拟器内核减少了可取上下文的平均数量，因此选择了一个预测错误的上下文来更频繁地获取数据，从而获得更多错误路径指令。<br>令人惊讶的是，内核比SPECInt应用程序有更好的转移预测，尽管它缺乏基于循环的代码（当同时执行这两个操作时，用户代码中的错误率是9.3），内核代码中的大多数条件分支都用于菱形控件，在这种控件中，目标代码执行异常条件。虽然内核BTB漏失率很高，但是对一个漏失的默认预测执行直通代码，因此更多的内核预测往往是正确的。<br>综上所述，尽管内核内存子系统的转移预测漏失率很高，但SMT指令吞吐量仅受到轻微影响，因为SPECInt程序中的内核活动很小，SMT很好地隐藏了延迟，因此，对类似特殊科学应用的SMT基本性能感兴趣的研究人员可以放心地依赖于应用及模拟。然而，如果专注于特定硬件组件（比如数据TLB）的设计，或者特定硬件策略（比如推测何时取数据）的设计，那么包括操作系统的执行时间影响是很重要的。<img src="https://img-blog.csdnimg.cn/20201223122337781.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjMzMzQw,size_16,color_FFFFFF,t_70#pic_center" alt="表3：在SMT上模拟SPECInt95和操作系统时，在几种硬件数据结构种总的缺失率和缺失分布，缺失类别是所有用户内核缺失的百分比。粗体条目表示内核诱导干扰。用户内核冲突是指用户线程与某种类型的内核活动冲突"><br><img src="https://img-blog.csdnimg.cn/20201223122347629.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjMzMzQw,size_16,color_FFFFFF,t_70#pic_center" alt="表4：带有SMT和超标量的操作系统和不带操作系统的SPECInt95的体系结构度量"></p><h3 id="3-1-3-在评估大问题超标量模型时是否应该模拟操作系统？"><a href="#3-1-3-在评估大问题超标量模型时是否应该模拟操作系统？" class="headerlink" title="3.1.3 在评估大问题超标量模型时是否应该模拟操作系统？"></a>3.1.3 在评估大问题超标量模型时是否应该模拟操作系统？</h3><p>就总体执行周期而言，在执行SPECInt基准测试时，操作系统在无序超标量和SMT处理器上的行为类似。超标量处理器只花费稍微大一点的执行部分在操作系统中。对于两个处理器，处于稳定状态的操作系统周期的百分比是相同的。<br>同样，在超标量处理器和SMT处理器，在启动和稳定状态下OS周期的分布都类似。一个例外是超标量处理器数据TLB的内核缺失所花费的较大部分时间。而且，DTLB丢失的内核处理会显示出糟糕的指令缓存行为，这增加了花费在这段代码中的时间。内核指令缓存在超标量上的丢失率是13.8%，其中81%的丢失是由于内核DTLB错误处理代码造成的。<br>在微架构级别上，操作系统在无序超标量上扮演不同的角色。超标量上的指令吞吐量大约是SMT的一半，如表4所示。尽管超标量硬件数据结构中的缺失较少发生，因为一次只执行一个线程，但超标量缺乏SMT隐藏延迟的能力。在过去对非os工作负载的SMT的所有研究中，SMT延迟容错超过了内存子系统和分支硬件中额外的线程间的冲突的补偿，最明显的是操作系统缺乏超标量的延迟隐藏能力，在稳定状态下只能达到0.6IPC，相比之下，用户代码的IPC为3.0。此外，超标量按比例压缩的指令数量大约是SMT的两倍，因为超标量只有一个要获取的指令源。<br>总是，包括操作系统在SPECInt超标量体系结构模拟负载扰动底线性能超过SMT，因为超标量体系结构性能更容易受到指令延迟（在其他硬件组件中，性能下降幅度较小，或者反映了先前性能良好的组件的大幅退化）。这一结果表明，研究人员在评估超标量系统结构时，不应该对忽略操作系统的影响抱有信心。</p><h2 id="3-2-对Apache（一个操作系统密集型工作负载）的评估"><a href="#3-2-对Apache（一个操作系统密集型工作负载）的评估" class="headerlink" title="3.2 对Apache（一个操作系统密集型工作负载）的评估"></a>3.2 对Apache（一个操作系统密集型工作负载）的评估</h2><p>Apache是部署最广泛的Web服务器。它的作用很简单：响应客户端HTTP请求包，通常返回请求的HTML或其他对象。对象存储在面向文件的数据库中，如果没有缓存在服务器的内存中，则从磁盘读取。下面我们将检查基于apache的工作负载。</p><h3 id="3-2-1-操作系统在执行Apache时的作用"><a href="#3-2-1-操作系统在执行Apache时的作用" class="headerlink" title="3.2.1 操作系统在执行Apache时的作用"></a>3.2.1 操作系统在执行Apache时的作用</h3><p>图五展示了Apache工作负载在SMT上执行的内核和用户活动，这些数据在几个方面与SPECInt多道程序工作负载有显著的不同，首先，Apache起步时间短；这不奇怪，因为Apache的启动只是简单地接收第一个传入的请求并唤醒服务器线程。其次，一旦请求到达，我们看到Apache花费超过75%的时间在操作系统上，即，Apache的大部分执行是在操作系统中，而不是在应用程序代码中。<br>图六显示了Apache内核周期的分解，与SPECInt启动期和稳定状态期比较。对Apache来说，其内核时间的大部分都花在了执行系统调用上。也就是说，SPECInt工作负载由隐式操作系统使用主导，而Apache则更显式地使用操作系统。Apache还显示了通过网络中断的重要内核活动—SPECInt工作负载中没有响应活动，Apache花费了34%的内核周期在neister线程中处理中断请求或响应网络中断，neister线程是一组相同的线程，负责代表到达的消息管理网络协议栈。Apache中只有少量的内核活动是由于DTLB失误造成的，相比之下，SPECInt工作负载大部分内核时间与TLB丢失处理有关（稳定状态为82%，启动时为58%）<br>图7显示了Apache系统调用更详细的分解。在左边，我们看到由Apache执行的每个系统调用引起的执行周期的百分比。如果所示，大部分时间花在处理对I/O例程的调用上：例如，Apache在star例程（查询文件信息）中花费了10%的周期，在读/写中花费了19%的周期，在I/O控制操作（如打开）中花费10%的周期，图7的右侧显示了相同数据的不同细分。在这里，我们根据资源类型（网络或文件）以及操作类型限定执行时间。从图中我们可以看出，网络读/写是最大的时间消耗者，大约占所有周期的17%，占Apache内核周期的22%。如上所述，文件查询（star例程）是第二大消耗者，其次是文件控制操作，占所有周期6%，占内核周期的8%。总的来说，花费在网络和文件系统的系统调用上的时间几乎与network相同服务占所有内核周期的21%，文件服务占18%。<br><img src="https://img-blog.csdnimg.cn/20201223122411242.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjMzMzQw,size_16,color_FFFFFF,t_70#pic_center" alt="图五：在SMT上执行的Apache中的内核和用户活动"><br><img src="https://img-blog.csdnimg.cn/20201223122421736.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjMzMzQw,size_16,color_FFFFFF,t_70#pic_center" alt="图六：在SMT上Apache内核活动分解，SPECInt工作负载的启动阶段和稳定阶段被包括进来比较"><br><img src="https://img-blog.csdnimg.cn/20201223122432279.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjMzMzQw,size_16,color_FFFFFF,t_70#pic_center" alt="图7：在SMT处理器上处理内核系统调用所花费的执行时间分解"></p><h3 id="3-2-2-结构性能特点"><a href="#3-2-2-结构性能特点" class="headerlink" title="3.2.2 结构性能特点"></a>3.2.2 结构性能特点</h3><p>表5显示了Apache中内核和用户代码的指令类型细分。总体来说，这类似于相应的SPECInt表。Apache的稳定加载/存储百分比更接近SPECInt的启动加载/存储百分比。因为SPECInt的启动包括各种OS服务，而稳定状态SPECInt工作负载主要由tlb处理条例控制。总的来说，Apache中大约一半的内核内存访问操作绕过TLB，即，它们直接指定物理地址。<br>表6展示了Apache的架构性能特征，并将它们与稳定状态下的SPECInt工作负载进行了比较，该图还显示了运行在超标量上的Apache的统计信息。Apache工作负载在SMT上实现了每个周期4.6条指令的吞吐量（最多为6条），比SPECInt工作负载低18%，性能下降的原因分布在大多数主要硬件组件中，Apache的性能比SPECInt差得多。除了数据TLB之外，内存子系统的所有组件都经历了更多的冲突；例如Apache的L2 miss率是SPECInt的1.5倍，D-cache miss率是2.3倍，I-cache miss率是2.5倍。<br>与SPECInt相比，Apache在fetch单元也表现得更差，Apache的可获取上下文平均比SPECInt少20%，被压缩的指令更多。在充分利用6个缺失插槽的情况下，Apache也减少了33%的周期。然而，尽管内存和获取系统行为有这些巨大的差异，SMT仍然能很好地容忍延迟，通过处理更多的缺失，并与要求更高的工作负载并行（最后三行）。<br>SMT在Apache中隐藏延迟的能力导致平均指令吞吐量为4.6IPC—是标准吞吐量的4.2倍，并且是SMT研究的任何工作负载的最高相对增益。超标量处理器实现的IPC仅为1.1—仅为SPECInt的42%（相比之下，在SMT处理器上Apache的IPC是它为SPECInt实现的82%。）最能说明性能差异的是，超标量在超过60%的周期内无法获取或发出指令，并且由于分支错误预测，它将获得的指令的46%删除了。SMT压缩的指令更少，因为多线程减少了错误预测的分支路径在条件解决之前执行的距离。<br><img src="https://img-blog.csdnimg.cn/20201223122454416.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjMzMzQw,size_16,color_FFFFFF,t_70#pic_center" alt="表5：按指令类型执行Apache时动态指令的百分比"><br><img src="https://img-blog.csdnimg.cn/2020122312250543.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjMzMzQw,size_16,color_FFFFFF,t_70#pic_center" alt="表6：比较在SMT上执行的Apache、在SMT上执行的SPECInt95以及在超标量上执行的Apache的体系结构指标"></p><h3 id="3-2-3-线程间的竞争与合作"><a href="#3-2-3-线程间的竞争与合作" class="headerlink" title="3.2.3 线程间的竞争与合作"></a>3.2.3 线程间的竞争与合作</h3><p>如前所述，SMT可以在单个周期中发出来自多个内核线程的指令，这就为线程间冲突创造了新的可能性，表7给出了Apache miss行为了更多细节，重点关注冲突的原因。与SPECInt工作负载相比，最引人注目的是内核/内核和用户/内核冲突，用粗体显示。Apache中缓存丢失的最高原因是内核内部的冲突：65%的L1 Icache丢失，65%的L1 Dcache丢失，以及41%的L2缓存丢失是由于线程内或线程间的内核冲突造成的。除L2缓存之外，这两类缓存中的内核线程缺失几乎是线程内缺失的两倍。用户/内核冲突也是非常重要的：25%的L1 Icache丢失，10%的L1 Dcahce丢失，22%的L2缓存丢失是由于内核和用户代码或数据之间的冲突造成的。<br>在SMT上同时运行多个内核线程的影响还可以通过将其与超标量进行比较来观察，超标量中一次只能活动一个内核线程。在Apache（未显示数据）的超标量执行中，与SMT上的Apache相比，Icache、Dcache和L2缓存中由于内核线程间冲突而导致的丢失百分比分别要低24%、28%和38%<br>在BTB中，内核线程内冲突占主导地位，占所有BTB丢失的68%，而6%的丢失是由用户/引起的内核冲突。相反，用户代码要为两个TLB中的大部分丢失负责（53%的数据TLB丢失和86%的指令TLB丢失是由于用户/用户冲突造成的）。尽管用户代码只占执行周期的22%。<br>虽然上面提到的数据涉及冲突，但同时执行线程也可能导致建设性的线程间行为。具体来说，当一个线程接触到即将被第二个线程访问的数据时，就会发生预取；然后第二个线程将在缓存中找到数据，从而避免丢失数据。比较SMT上这种构造共享的数量和超标量上相同的行为是很有趣的。由于SMT上有更细粒度的并行性，因此这种预取活动有更多机会。表8显示了集中资源由于在Apache中进行建设性共享而避免丢失的百分比。例如，在SMT上，如果不是内核中也在执行的其他线程预加载一个内核线程的指令，L1 Icache的总体缺失率将会更高66%。相比之下，这种共享对运行Apache的超标量的影响只有28%。同样，差异是由于SMT同时执行多个内核线程，或者在比超标量上执行的更短的时间内执行。<br>对于L2缓存来说，内核-内核预取的影响甚至更大，在L2缓存中，避免了额外71%的丢失，12%的内核TLB失误也被避免了。<br><img src="https://img-blog.csdnimg.cn/20201223122518707.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjMzMzQw,size_16,color_FFFFFF,t_70#pic_center" alt="表7：在SMT上模拟Apache和操作系统时，几种硬件数据结构的缺失分布"><br><img src="https://img-blog.csdnimg.cn/20201223122630240.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjMzMzQw,size_16,color_FFFFFF,t_70#pic_center" alt="表8：Apache上由于线程间合作而避免缺失的百分比"></p><h3 id="3-2-4-操作系统对硬件的影响"><a href="#3-2-4-操作系统对硬件的影响" class="headerlink" title="3.2.4 操作系统对硬件的影响"></a>3.2.4 操作系统对硬件的影响</h3><p>与前面对SPECInt工作负载的分析类似，我们现在研究操作系统对缓存和转移预测硬件的影响。操作系统增加了所有硬件结构的冲突，从L1数据丢失率增加35%到L1指令丢失率增加超过5倍不等。这些增长大致对应表7的冲突缺失数据，即，由于内核引用的增加，硬件结构中的用户丢失率降低的程度大致与内核冲突导致的用户丢失比例成正比。<br>除了超标量指令缓存丢失率外，操作系统对硬件结构的影响更大，在SPECInt工作负载上执行Apache比在SPECInt工作负载上执行更少。出现这种差异主要是因为操作系统活动主导Apache的执行，但也因为它们更多样化，因此比SPECInt所需的地方更少（Apache工作负载执行各种OS服务，而SPECInt主要使用内存管理）。<br><img src="https://img-blog.csdnimg.cn/20201223122642688.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjMzMzQw,size_16,color_FFFFFF,t_70#pic_center" alt="表9：操作系统对特定硬件结构的影响"></p><h2 id="3-3-结果总结"><a href="#3-3-结果总结" class="headerlink" title="3.3 结果总结"></a>3.3 结果总结</h2><p>在本节中，我们测量和分析了SMT处理器的性能，包括其操作系统对于Apache Web服务器和多程序SPECInt工作负载的性能。我们的结果表明，对于SMT，操作系统的遗漏不会导致SPECInt的性能严重错误预测，尽管对于执行相同工作负载的超标量的影响更为显著。然而，在Apache工作负载上，操作系统负责执行大部分指令。Apache在响应文件系统和内核网络代码中的系统服务上花费了大量时间，大量执行OS代码的结果是增加了更重底层资源的压力，包括缓存和BTB。内核线程也会在这些资源中引起更多的冲突，包括与其他内核线程和用户线程的冲突；另一方面，也有线程间共享的效果。Apache给处理器带来了挑战性，这可以从它在超标量上的极低吞吐量（1.1IPC）看出。SMT能够隐藏Apache的大部分延迟，使其能够实现相对于超标量处理器的4.2倍速的吞吐量改进。</p><h1 id="4-结论"><a href="#4-结论" class="headerlink" title="4 结论"></a>4 结论</h1><p>在这篇文章中，我们报告了在一个同步多线程处理器上执行操作系统的第一次测量。对于这些测量，我们修改了康柏/DEC Unix 4.0d操作系统以在SMT CPU上执行，并通过将SMT指令级模拟器集成到Alpha SimOS环境中来执行操作系统及其应用程序。结果表明<br>1.对于SEPCInt95工作负载，模拟操作系统不会显著影响SMT的总体性能，尽管操作系统的执行会对超标量产生影响。<br>2.Apache大部分时间都花在操作系统内核上，执行文件系统和网络操作。<br>3.Apache os密集型的工作负载对处理器来说压力很大，与SPECInt相比，这会导致缓存丢失率显著增加。<br>4.从我们对冲突缺失的详细分析来看，SMT上的内核线程之间存在显著的干扰，因为SMT可以同时执行来自多个内核线程的指令。另一方面，存在从合作共享中获益的机会，正如我们在线程间预取分析中所展示的那样。<br>5.总的来说，操作系统代码在超标量上导致较差的指令吞吐量，这对Apache Web服务器有很大的影响，它的IPC仅为1.1。<br>6.SMT的延迟容忍能够补偿操作系统代码的许多要求，在执行Apache时，SMT的吞吐量比超标量高了四倍，这是迄今为止SMT工作负载的最高相对收益。<br>最后，我们展示了将支持SMP的操作系统修改为在同步多线程处理器上执行相对简单。未来，我们打算对操作系统结构进行实验，以优化操作系统以适应SMT的特殊特性。</p>]]></content>
    
    
    <categories>
      
      <category>翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大数运算</title>
    <link href="/2021/04/11/%E5%A4%A7%E6%95%B0%E8%BF%90%E7%AE%97/"/>
    <url>/2021/04/11/%E5%A4%A7%E6%95%B0%E8%BF%90%E7%AE%97/</url>
    
    <content type="html"><![CDATA[<p>高精度整数：使用vector/数组存储每一位数字</p><p>下面介绍具体的实现</p><span id="more"></span><h2 id="加法和减法"><a href="#加法和减法" class="headerlink" title="加法和减法"></a>加法和减法</h2><p>加法：</p><div class="table-container"><table><thead><tr><th>a/b</th><th>+</th><th>-</th></tr></thead><tbody><tr><td>+</td><td>a+b</td><td>a-(-b)</td></tr><tr><td>-</td><td>-((-a)-b)</td><td>-((-a)+(-b))</td></tr></tbody></table></div><p>减法：</p><div class="table-container"><table><thead><tr><th>a/b(a-b）</th><th>+</th><th>-</th></tr></thead><tbody><tr><td>+</td><td>a-b / -(b-a)</td><td>a+(-b)</td></tr><tr><td>-</td><td>-((-a)+b)</td><td>-((-a)-(-b)) / (-b)-(-a)</td></tr></tbody></table></div><p>从上表看出，实现加法和减法只需要实现：</p><ol><li>两个正整数相加</li><li>一个较大的正整数减去一个较小的正整数</li></ol><p>注意：减法后可能出现vector后面有多余的零的情况，需要去掉</p><h2 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h2><p>以123*345=42435为例</p><p>存储在vector中为</p><div class="table-container"><table><thead><tr><th>BigNum.vec</th><th>0</th><th>1</th><th>2</th><th>3</th></tr></thead><tbody><tr><td>num1 123</td><td>0</td><td>3</td><td>2</td><td>1</td></tr><tr><td>num2 345</td><td>0</td><td>5</td><td>4</td><td>3</td></tr></tbody></table></div><p>结果存储在ans中</p><div class="table-container"><table><thead><tr><th>ans.vec</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th></tr></thead><tbody><tr><td>循环过程</td><td>0</td><td>15</td><td>12+10</td><td>9+8+5</td><td>6+4</td><td>3</td></tr><tr><td>循环结果</td><td>0</td><td>15</td><td>22</td><td>22</td><td>10</td><td>3</td></tr><tr><td>进位后</td><td>0</td><td>5（进1）</td><td>3（进2）</td><td>4（进2）</td><td>2（进1）</td><td>4</td></tr></tbody></table></div><h2 id="除法和取余"><a href="#除法和取余" class="headerlink" title="除法和取余"></a>除法和取余</h2><p>以7546除以23等于328为例</p><div class="table-container"><table><thead><tr><th>时间</th><th>b1</th><th>sub</th><th>ans</th><th>add</th></tr></thead><tbody><tr><td>i=0</td><td>7546</td><td>2300</td><td>0</td><td>100</td></tr><tr><td>i=1</td><td>646</td><td>230</td><td>300</td><td>10</td></tr><tr><td>i=2</td><td>186</td><td>23</td><td>320</td><td>1</td></tr><tr><td>从第三次循环出来后</td><td>2</td><td>2</td><td>328</td><td>0</td></tr></tbody></table></div><p>取余借助除法实现即可</p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p>BigNum.h</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> TERMPJ_BIGNUM_H</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> TERMPJ_BIGNUM_H</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BigNum</span> &#123;</span><br>    <span class="hljs-function"><span class="hljs-keyword">friend</span> BigNum <span class="hljs-title">absv</span><span class="hljs-params">(<span class="hljs-keyword">const</span> BigNum&amp; num)</span></span>;<br><br>    <span class="hljs-keyword">friend</span> <span class="hljs-built_in">std</span>::istream&amp; <span class="hljs-keyword">operator</span>&gt;&gt;(<span class="hljs-built_in">std</span>::istream&amp;, BigNum&amp;);<br>    <span class="hljs-keyword">friend</span> <span class="hljs-built_in">std</span>::ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(<span class="hljs-built_in">std</span>::ostream&amp;, <span class="hljs-keyword">const</span> BigNum&amp;);<br><br>    <span class="hljs-keyword">friend</span> BigNum <span class="hljs-keyword">operator</span>-(<span class="hljs-keyword">const</span> BigNum&amp; num);<br><br>    <span class="hljs-keyword">friend</span> BigNum <span class="hljs-keyword">operator</span>+(<span class="hljs-keyword">const</span> BigNum&amp; num1, <span class="hljs-keyword">const</span> BigNum&amp; num2);<br>    <span class="hljs-keyword">friend</span> BigNum <span class="hljs-keyword">operator</span>-(<span class="hljs-keyword">const</span> BigNum&amp; num1, <span class="hljs-keyword">const</span> BigNum&amp; num2);<br>    <span class="hljs-keyword">friend</span> BigNum <span class="hljs-keyword">operator</span>+(<span class="hljs-keyword">const</span> BigNum&amp; num1, <span class="hljs-keyword">int</span> num2);<br>    <span class="hljs-keyword">friend</span> BigNum <span class="hljs-keyword">operator</span>-(<span class="hljs-keyword">const</span> BigNum&amp; num1, <span class="hljs-keyword">int</span> num2);<br>    <span class="hljs-keyword">friend</span> BigNum <span class="hljs-keyword">operator</span>*(<span class="hljs-keyword">const</span> BigNum&amp; num1, <span class="hljs-keyword">const</span> BigNum&amp; num2);<br>    <span class="hljs-keyword">friend</span> BigNum <span class="hljs-keyword">operator</span>*(<span class="hljs-keyword">const</span> BigNum&amp; num1, <span class="hljs-keyword">int</span> num2);<br>    <span class="hljs-keyword">friend</span> BigNum <span class="hljs-keyword">operator</span>/(<span class="hljs-keyword">const</span> BigNum&amp; num1, <span class="hljs-keyword">const</span> BigNum&amp; num2);<br>    <span class="hljs-keyword">friend</span> BigNum <span class="hljs-keyword">operator</span>/(<span class="hljs-keyword">const</span> BigNum&amp; num1, <span class="hljs-keyword">int</span> num2);<br>    <span class="hljs-keyword">friend</span> BigNum <span class="hljs-keyword">operator</span>%(<span class="hljs-keyword">const</span> BigNum&amp; num1, <span class="hljs-keyword">const</span> BigNum&amp; num2);<br>    <span class="hljs-keyword">friend</span> BigNum <span class="hljs-keyword">operator</span>%(<span class="hljs-keyword">const</span> BigNum&amp; num1, <span class="hljs-keyword">int</span> num2);<br><br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> BigNum&amp; num1, <span class="hljs-keyword">const</span> BigNum&amp; num2);<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&gt;(<span class="hljs-keyword">const</span> BigNum&amp; num1, <span class="hljs-keyword">const</span> BigNum&amp; num2);<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;=(<span class="hljs-keyword">const</span> BigNum&amp; num1, <span class="hljs-keyword">const</span> BigNum&amp; num2);<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&gt;=(<span class="hljs-keyword">const</span> BigNum&amp; num1, <span class="hljs-keyword">const</span> BigNum&amp; num2);<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>==(<span class="hljs-keyword">const</span> BigNum&amp; num1, <span class="hljs-keyword">const</span> BigNum&amp; num2);<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>!=(<span class="hljs-keyword">const</span> BigNum&amp; num1, <span class="hljs-keyword">const</span> BigNum&amp; num2);<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">typedef</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;::size_type size_type;<br><br>    <span class="hljs-comment">// 构造函数</span><br>    BigNum() &#123; create(); &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">BigNum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num)</span> </span>&#123; create(num); &#125;<br>    BigNum(<span class="hljs-keyword">size_t</span> n, <span class="hljs-keyword">int</span> v);<br><br>    <span class="hljs-function">size_type <span class="hljs-title">size</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span> </span>&#123; <span class="hljs-keyword">return</span> vec.size() - <span class="hljs-number">1</span>; &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">isNegative</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span> </span>&#123; <span class="hljs-keyword">return</span> vec[<span class="hljs-number">0</span>] != <span class="hljs-number">0</span>; &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">isZero</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span> </span>&#123; <span class="hljs-keyword">return</span> vec.size() == <span class="hljs-number">2</span> &amp;&amp; vec[<span class="hljs-number">1</span>] == <span class="hljs-number">0</span>; &#125;<br><br>    BigNum&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-keyword">const</span> BigNum&amp; num);<br><br>    <span class="hljs-keyword">int</span>&amp; <span class="hljs-keyword">operator</span>[](size_type i) &#123;<br>        <span class="hljs-keyword">return</span> vec[i];<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">trim</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">while</span> (vec.size() &gt; <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">if</span> (*(vec.end() - <span class="hljs-number">1</span>) == <span class="hljs-number">0</span>) &#123;<br>                vec.erase(vec.end() - <span class="hljs-number">1</span>);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125; <span class="hljs-comment">// 减法后可能出现前面有多余的零的情况，需要去掉</span><br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">create</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">create</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num)</span></span>;<br><br><span class="hljs-keyword">protected</span>:<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; vec;<br>&#125;;<br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">//TERMPJ_BIGNUM_H</span></span><br></code></pre></div></td></tr></table></figure><p>BigNum.cpp</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;BigNum.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdexcept&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::ostream;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::istream;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">isspace</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::domain_error;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">BigNum::create</span><span class="hljs-params">()</span> </span>&#123;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">BigNum::create</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num)</span> </span>&#123;<br>    vec.push_back(num &lt; <span class="hljs-number">0</span> ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">int</span> temp = <span class="hljs-keyword">this</span>-&gt;isNegative() ? -num : num;<br>    <span class="hljs-keyword">while</span> (temp != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">int</span> digit = temp % <span class="hljs-number">10</span>;<br>        vec.push_back(digit);<br>        temp = temp / <span class="hljs-number">10</span>;<br>    &#125;<br>&#125;<br><br>BigNum::BigNum(<span class="hljs-keyword">size_t</span> n, <span class="hljs-keyword">int</span> v) &#123;<br>    vec.push_back(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">for</span> (BigNum::size_type i = <span class="hljs-number">0</span>; i != n; i++) &#123;<br>        vec.push_back(v);<br>    &#125;<br>&#125;<br><br>ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(ostream&amp; os, <span class="hljs-keyword">const</span> BigNum&amp; num)<br>&#123;<br>    <span class="hljs-keyword">if</span> (num.size() == <span class="hljs-number">0</span>) &#123;<br>        os &lt;&lt; <span class="hljs-string">&quot;0&quot;</span>;<br>        <span class="hljs-keyword">return</span> os;<br>    &#125;<br>    <span class="hljs-keyword">if</span> ( num.isNegative() ) &#123;<br>        os &lt;&lt; <span class="hljs-string">&quot;-&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (BigNum::size_type i = num.size(); i != <span class="hljs-number">0</span>; i--) &#123;<br>        os &lt;&lt; num.vec[i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> os;<br>&#125;<br><br>istream&amp; <span class="hljs-keyword">operator</span>&gt;&gt;(istream&amp; is, BigNum&amp; num)<br>&#123;<br>    num.vec.clear();<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; temp;<br><br>    <span class="hljs-keyword">char</span> v;<br>    <span class="hljs-keyword">while</span> (is.get(v) &amp;&amp; <span class="hljs-built_in">isspace</span>(v))<br>        ;<br><br>    <span class="hljs-keyword">if</span> (is) &#123;<br>        <span class="hljs-keyword">do</span>temp.push_back(v);<br>        <span class="hljs-keyword">while</span> (is.get(v) &amp;&amp; !<span class="hljs-built_in">isspace</span>(v));<br><br>        <span class="hljs-keyword">if</span> (is)<br>            is.unget();<br>    &#125;<br>    num.vec.push_back(temp[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;-&#x27;</span> ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (num.vec[<span class="hljs-number">0</span>] == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = temp.size() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            num.vec.push_back(temp[i] - <span class="hljs-string">&#x27;0&#x27;</span>);<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = temp.size() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">1</span>; i--) &#123;<br>            num.vec.push_back(temp[i] - <span class="hljs-string">&#x27;0&#x27;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> is;<br>&#125;<br><br><span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> BigNum&amp; num1, <span class="hljs-keyword">const</span> BigNum&amp; num2) &#123;<br>    <span class="hljs-keyword">if</span> ( num1.isNegative() ) &#123;<br>        <span class="hljs-keyword">if</span> ( !num2.isNegative() ) <span class="hljs-comment">// -x &lt; y</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span> ( num1.size() &gt; num2.size() ) <span class="hljs-comment">// -xx &lt; -y</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span> ( num1.size() &lt; num2.size() ) <span class="hljs-comment">// -x &gt; -yy</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-keyword">for</span> (BigNum::size_type i = num1.size(); i &gt;= <span class="hljs-number">1</span>; i--) &#123;<br>            <span class="hljs-keyword">if</span> ( num1.vec[i] &lt; num2.vec[i] )<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">if</span> ( num1.vec[i] &gt; num2.vec[i] )<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;  <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> ( num2.isNegative() ) <span class="hljs-comment">// x &gt; -y</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">if</span> ( num1.size() &gt; num2.size() ) <span class="hljs-comment">// xx &gt; y</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">if</span> ( num1.size() &lt; num2.size() ) <span class="hljs-comment">// x &lt; yy</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-keyword">for</span> (BigNum::size_type i = num1.size(); i &gt;= <span class="hljs-number">1</span>; i--) &#123;<br>            <span class="hljs-keyword">if</span> ( num1.vec[i] &lt; num2.vec[i] )<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> ( num1.vec[i] &gt; num2.vec[i] )<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&gt;(<span class="hljs-keyword">const</span> BigNum&amp; num1, <span class="hljs-keyword">const</span> BigNum&amp; num2) &#123;<br>    <span class="hljs-keyword">return</span> num2 &lt; num1;<br>&#125;<br><br><span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;=(<span class="hljs-keyword">const</span> BigNum&amp; num1, <span class="hljs-keyword">const</span> BigNum&amp; num2) &#123;<br>    <span class="hljs-keyword">return</span> !(num1 &gt; num2);<br>&#125;<br><br><span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&gt;=(<span class="hljs-keyword">const</span> BigNum&amp; num1, <span class="hljs-keyword">const</span> BigNum&amp; num2) &#123;<br>    <span class="hljs-keyword">return</span> !(num1 &lt; num2);<br>&#125;<br><br><span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>==(<span class="hljs-keyword">const</span> BigNum&amp; num1, <span class="hljs-keyword">const</span> BigNum&amp; num2) &#123;<br>    <span class="hljs-keyword">return</span> (num1 &lt;= num2) &amp;&amp; (num1 &gt;= num2);<br>&#125;<br><br><span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>!=(<span class="hljs-keyword">const</span> BigNum&amp; num1, <span class="hljs-keyword">const</span> BigNum&amp; num2) &#123;<br>    <span class="hljs-keyword">return</span> !(num1 == num2);<br>&#125;<br><br>BigNum <span class="hljs-keyword">operator</span>-(<span class="hljs-keyword">const</span> BigNum&amp; num) &#123;<br>    BigNum negative;<br>    negative.vec.push_back(num.isNegative() ? <span class="hljs-number">0</span> : <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (BigNum::size_type i = <span class="hljs-number">1</span>; i &lt;= num.size(); i++) &#123;<br>        negative.vec.push_back(num.vec[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> negative;<br>&#125;<br><br>BigNum &amp; BigNum::<span class="hljs-keyword">operator</span>=(<span class="hljs-keyword">const</span> BigNum &amp;num)&#123;<br>    <span class="hljs-keyword">this</span>-&gt;vec = *<span class="hljs-keyword">new</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;();<br>    <span class="hljs-keyword">for</span> (BigNum::size_type i = <span class="hljs-number">0</span>; i &lt;= num.size(); i++) &#123;<br>        <span class="hljs-keyword">this</span>-&gt;vec.push_back(num.vec[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br><br><span class="hljs-function">BigNum <span class="hljs-title">absv</span><span class="hljs-params">(<span class="hljs-keyword">const</span> BigNum&amp; num)</span> </span>&#123;<br>    BigNum <span class="hljs-built_in">abs</span>;<br>    <span class="hljs-built_in">abs</span>.vec.push_back(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">for</span> (BigNum::size_type i = <span class="hljs-number">1</span>; i &lt;= num.size(); i++) &#123;<br>        <span class="hljs-built_in">abs</span>.vec.push_back(num.vec[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">abs</span>;<br>&#125;<br><br>BigNum <span class="hljs-keyword">operator</span>+(<span class="hljs-keyword">const</span> BigNum&amp; num1, <span class="hljs-keyword">const</span> BigNum&amp; num2) &#123;<br>    BigNum b1 = absv(num1) &gt; absv(num2) ? num1 : num2;<br>    BigNum b2 = absv(num1) &gt; absv(num2) ? num2 : num1;<br>    BigNum ans;<br>    <span class="hljs-keyword">int</span> carry = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (!b1.isNegative() &amp;&amp; !b2.isNegative()) &#123;<br>        ans.vec.push_back(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">for</span> (BigNum::size_type i = <span class="hljs-number">1</span>; i &lt;= b1.size(); i++) &#123;<br>            carry += b1[i];<br>            <span class="hljs-keyword">if</span>(i &lt;= b2.size()) carry += b2[i];<br>            ans.vec.push_back(carry % <span class="hljs-number">10</span>);<br>            carry /= <span class="hljs-number">10</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (carry != <span class="hljs-number">0</span>) ans.vec.push_back(carry);<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (b1.isNegative() &amp;&amp; !b2.isNegative()) &#123;<br>        <span class="hljs-keyword">return</span> -( (-b1) - b2 );<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!b1.isNegative() &amp;&amp; b2.isNegative()) &#123;<br>        <span class="hljs-keyword">return</span> b1 - (-b2);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (b1.isNegative() &amp;&amp; b2.isNegative()) &#123;<br>        <span class="hljs-keyword">return</span> -((-b1) + (-b2));<br>    &#125;<br><br>&#125;<br><br>BigNum <span class="hljs-keyword">operator</span>-(<span class="hljs-keyword">const</span> BigNum&amp; num1, <span class="hljs-keyword">const</span> BigNum&amp; num2) &#123;<br>    <span class="hljs-keyword">if</span> (num1 == num2)<br>    &#123;<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">new</span> BigNum(<span class="hljs-number">0</span>);<br>    &#125;<br>    BigNum ans;<br>    BigNum b1 = num1;<br>    BigNum b2 = num2;<br>    <span class="hljs-keyword">int</span> carry = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (!num1.isNegative() &amp;&amp; !num2.isNegative()) &#123;<br>        <span class="hljs-keyword">if</span> (absv(num1) &gt; absv(num2)) &#123;<br>            ans.vec.push_back(<span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">for</span> (BigNum::size_type i = <span class="hljs-number">1</span>; i &lt;= b1.size(); i++) &#123;<br>                <span class="hljs-keyword">if</span> (i &lt;= b2.size()) &#123;<br>                    <span class="hljs-keyword">if</span> (b1[i] + carry &lt; b2[i]) &#123;<br>                        ans.vec.push_back(<span class="hljs-number">10</span> + b1[i] - b2[i] + carry);<br>                        carry = <span class="hljs-number">-1</span>;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        ans.vec.push_back(b1[i] - b2[i] + carry);<br>                        carry = <span class="hljs-number">0</span>;<br>                    &#125;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">if</span> (b1[i] + carry &lt; <span class="hljs-number">0</span>) &#123;<br>                        ans.vec.push_back(<span class="hljs-number">10</span> + b1[i] + carry);<br>                        carry = <span class="hljs-number">-1</span>;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        ans.vec.push_back(b1[i] + carry);<br>                        carry = <span class="hljs-number">0</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> -(num2 - num1);<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (num1.isNegative() &amp;&amp; !num2.isNegative()) &#123;<br>        <span class="hljs-keyword">return</span> -( (-num1) + num2 );<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!num1.isNegative() &amp;&amp; num2.isNegative()) &#123;<br>        <span class="hljs-keyword">return</span> num1 + (-num2);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (num1.isNegative() &amp;&amp; num2.isNegative()) &#123;<br>       <span class="hljs-keyword">if</span> (absv(num1) &gt; absv(num2)) &#123;<br>           <span class="hljs-keyword">return</span> -( (-num1) - (-num2) );<br>       &#125; <span class="hljs-keyword">else</span> &#123;<br>           <span class="hljs-keyword">return</span> (-num2) - (-num1);<br>       &#125;<br>    &#125;<br><br>    ans.trim();<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br>BigNum <span class="hljs-keyword">operator</span>+(<span class="hljs-keyword">const</span> BigNum&amp; num1, <span class="hljs-keyword">int</span> num2) &#123;<br>    <span class="hljs-keyword">return</span> num1 + *<span class="hljs-keyword">new</span> BigNum(num2);<br>&#125;<br><br>BigNum <span class="hljs-keyword">operator</span>-(<span class="hljs-keyword">const</span> BigNum&amp; num1, <span class="hljs-keyword">int</span> num2) &#123;<br>    <span class="hljs-keyword">return</span> num1 - *<span class="hljs-keyword">new</span> BigNum(num2);<br>&#125;<br><br>BigNum <span class="hljs-keyword">operator</span>*(<span class="hljs-keyword">const</span> BigNum &amp;num1, <span class="hljs-keyword">const</span> BigNum &amp;num2) &#123;<br>    <span class="hljs-keyword">if</span> (num1.isZero() || num2.isZero()) &#123;<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">new</span> BigNum(<span class="hljs-number">0</span>);<br>    &#125;<br>    BigNum ans;<br>    <span class="hljs-keyword">if</span> (!num1.isNegative() &amp;&amp; !num2.isNegative()) &#123;<br>        ans.vec.push_back(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">for</span> (BigNum::size_type i = <span class="hljs-number">1</span>; i &lt;= num1.size(); i++) &#123;<br>            <span class="hljs-keyword">for</span> (BigNum::size_type j = <span class="hljs-number">1</span>; j &lt;= num2.size(); j++) &#123;<br>                <span class="hljs-keyword">if</span> (ans.vec.size() &lt;= i + j - <span class="hljs-number">1</span>) &#123;<br>                    ans.vec.push_back(<span class="hljs-number">0</span>);<br>                &#125;<br>                ans.vec[i + j - <span class="hljs-number">1</span>] += num1.vec[i] * num2.vec[j];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (BigNum::size_type i = <span class="hljs-number">1</span>; i &lt; ans.size(); i++) &#123;<br>            ans.vec[i + <span class="hljs-number">1</span>] += ans.vec[i] / <span class="hljs-number">10</span>;<br>            ans.vec[i] = ans.vec[i] % <span class="hljs-number">10</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (ans.vec[ans.size()] &gt;= <span class="hljs-number">10</span>) &#123;<br>            ans.vec.push_back(ans.vec[ans.size()] / <span class="hljs-number">10</span>);<br>            ans.vec[ans.size()] = ans.vec[ans.size()] % <span class="hljs-number">10</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!num1.isNegative() &amp;&amp; num2.isNegative()) &#123;<br>        <span class="hljs-keyword">return</span> - (num1 * (-num2));<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (num1.isNegative() &amp;&amp; !num2.isNegative()) &#123;<br>        <span class="hljs-keyword">return</span> - ((-num1) * num2);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (num1.isNegative() &amp;&amp; num2.isNegative()) &#123;<br>        <span class="hljs-keyword">return</span> (-num1) * (-num2);<br>    &#125;<br>&#125;<br><br>BigNum <span class="hljs-keyword">operator</span>*(<span class="hljs-keyword">const</span> BigNum &amp;num1, <span class="hljs-keyword">int</span> num2) &#123;<br>    <span class="hljs-keyword">return</span> num1 * *<span class="hljs-keyword">new</span> BigNum(num2);<br>&#125;<br><br>BigNum <span class="hljs-keyword">operator</span>/(<span class="hljs-keyword">const</span> BigNum &amp;num1, <span class="hljs-keyword">const</span> BigNum &amp;num2) &#123;<br>    <span class="hljs-keyword">if</span> ( num2.isZero() ) &#123;<br>        <span class="hljs-keyword">throw</span> domain_error(<span class="hljs-string">&quot;dividend cannot be zero!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> ( num1.isZero() ) &#123;<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">new</span> BigNum(<span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> ( num1 &lt; num2 ) &#123;<br>        <span class="hljs-keyword">return</span> num1;<br>    &#125;<br>    BigNum ans = *<span class="hljs-keyword">new</span> BigNum(<span class="hljs-number">0</span>);<br>    BigNum b1 = num1;<br>    BigNum b2 = num2;<br>    <span class="hljs-keyword">if</span> (!num1.isNegative() &amp;&amp; !num2.isNegative()) &#123;<br>        BigNum::size_type diff = b1.size() - b2.size();<br>        BigNum sub = b2;<br>        BigNum add = *<span class="hljs-keyword">new</span> BigNum(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span> (BigNum::size_type i = <span class="hljs-number">0</span>; i &lt; diff; i++) &#123;<br>            sub = sub * <span class="hljs-number">10</span>;<br>            add = add * <span class="hljs-number">10</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (BigNum::size_type i = <span class="hljs-number">0</span>; i &lt;= diff; i++) &#123;<br>            <span class="hljs-keyword">while</span> (b1 &gt;= sub) &#123;<br>                b1 = b1 - sub;<br>                ans = ans + add;<br>            &#125;<br>            sub.vec.erase(sub.vec.begin() + <span class="hljs-number">1</span>);<br>            add.vec.erase(add.vec.begin() + <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!num1.isNegative() &amp;&amp; num2.isNegative()) &#123;<br>        <span class="hljs-keyword">return</span> - (num1 / (-num2));<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (num1.isNegative() &amp;&amp; !num2.isNegative()) &#123;<br>        <span class="hljs-keyword">return</span> - ((-num1) / num2);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (num1.isNegative() &amp;&amp; num2.isNegative()) &#123;<br>        <span class="hljs-keyword">return</span> (-num1) / (-num2);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br>BigNum <span class="hljs-keyword">operator</span>/(<span class="hljs-keyword">const</span> BigNum &amp;num1, <span class="hljs-keyword">int</span> num2) &#123;<br>    <span class="hljs-keyword">return</span> num1 / *<span class="hljs-keyword">new</span> BigNum(num2);<br>&#125;<br><br>BigNum <span class="hljs-keyword">operator</span>%(<span class="hljs-keyword">const</span> BigNum &amp;num1, <span class="hljs-keyword">const</span> BigNum &amp;num2) &#123;<br>    <span class="hljs-keyword">return</span> num1 - ( (num1 / num2) * num2 );<br>&#125;<br><br>BigNum <span class="hljs-keyword">operator</span>%(<span class="hljs-keyword">const</span> BigNum &amp;num1, <span class="hljs-keyword">int</span> num2) &#123;<br>    <span class="hljs-keyword">return</span> num1 / *<span class="hljs-keyword">new</span> BigNum(num2);<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo报错</title>
    <link href="/2021/03/17/Hexo%E6%8A%A5%E9%94%99/"/>
    <url>/2021/03/17/Hexo%E6%8A%A5%E9%94%99/</url>
    
    <content type="html"><![CDATA[<p>今天在使用hexo博客运行 hexo d 出现报错</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">OpenSSL SSL_connect: <span class="hljs-keyword">Connection</span> was <span class="hljs-keyword">reset</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">connection</span> <span class="hljs-keyword">to</span> github.com:<span class="hljs-number">443</span><br></code></pre></div></td></tr></table></figure><p> 查询了很多方案后，发现是代理的问题，如果你使用了VPN，需要设置一下http.proxy，先查看端口号</p><span id="more"></span><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210317125202.png" alt="image-20210317125154852"></p><p>我的端口号是2802，设置http.proxy</p><figure class="highlight lua"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs lua">git <span class="hljs-built_in">config</span> <span class="hljs-comment">--global http.proxy 127.0.0.1:2802</span><br>git <span class="hljs-built_in">config</span> <span class="hljs-comment">--global https.proxy 127.0.0.1:2802</span><br></code></pre></div></td></tr></table></figure><p>如果之前已经有过设置，先取消</p><figure class="highlight tcl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tcl">git config --<span class="hljs-keyword">global</span> --<span class="hljs-keyword">unset</span> <span class="hljs-keyword">http</span>.proxy<br>git config --<span class="hljs-keyword">global</span> --<span class="hljs-keyword">unset</span> https.proxy<br></code></pre></div></td></tr></table></figure><p>设置好之后再hexo d，部署成功</p><p>附上我的报错和解决截图</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210317125426.png" alt="image-20210317125426084"></p>]]></content>
    
    
    <categories>
      
      <category>问题记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>上车问题</title>
    <link href="/2021/03/13/%E4%B8%8A%E8%BD%A6%E9%97%AE%E9%A2%98/"/>
    <url>/2021/03/13/%E4%B8%8A%E8%BD%A6%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>问题描述：火车从始发站（第 1站）开出，在始发站上车的人数为 a，然后到达第 2 站，在第 2 站有人上、下车，但上、下车的人数相同，因此在第 2 站开出时车上的人数保持为 a 人。从第 3 站起，上、下车的人数有如下规律：上车的人数都是前两站上车人数之和，而下车人数等于上一站上车人数，一直到终点站的前一站。已知：共有 n 个车站，始发站上车的人数为 a ，终点站全部下车的人数是 m。试问 第x 站开出时车上的人数是多少？程序运行时，先输入四个整数：始发站上车人数 a，车站数 n，终点站下车人数 m 和所求的站点编号 x。要求输出从 x 站开出时车上的人数。</p><span id="more"></span><p>根据题意列出上车下车人数的表格：</p><div class="table-container"><table><thead><tr><th>车站</th><th>进站前人数</th><th>上车人数</th><th>下车人数</th><th>出站人数</th></tr></thead><tbody><tr><td>1</td><td>0</td><td>a</td><td>0</td><td>a</td></tr><tr><td>2</td><td>a</td><td>b</td><td>b</td><td>a</td></tr><tr><td>3</td><td>a</td><td>a+b</td><td>b</td><td>2a</td></tr><tr><td>4</td><td>2a</td><td>a+2b</td><td>a+b</td><td>2a+b</td></tr><tr><td>5</td><td>2a+b</td><td>2a+3b</td><td>a+2b</td><td>3a+2b</td></tr><tr><td>…</td><td>…</td><td>…</td><td>…</td><td>…</td></tr><tr><td>n-1</td><td>?</td><td>?</td><td>?</td><td>m</td></tr><tr><td>n</td><td>m</td><td>0</td><td>m</td><td>0</td></tr></tbody></table></div><p>根据表格本题的关键在于根据m求出b</p><p><em>m=f(n-1)a+g(n-1)b</em></p><p>求出f和g即可</p><p>而出站人数=进站人数 + 上车人数 - 下车人数</p><p>每站的上车人数和下车人数可以根据题意递推求得</p><p>据此可解决问题</p><p>C++代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cin</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>;<br><br><span class="hljs-comment">//每一站上了多少a</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">upa</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(n==<span class="hljs-number">2</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> upa(n<span class="hljs-number">-1</span>) + upa(n<span class="hljs-number">-2</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//每一站上了多少b</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">upb</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(n==<span class="hljs-number">2</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> upb(n<span class="hljs-number">-1</span>) + upb(n<span class="hljs-number">-2</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//每一站下了多少a</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">downa</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span> || n==<span class="hljs-number">2</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> upa(n<span class="hljs-number">-1</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//每一站下了多少b</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">downb</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(n==<span class="hljs-number">2</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> upb(n<span class="hljs-number">-1</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//每一站出的时候有多少a</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span> || n==<span class="hljs-number">2</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> (upa(n) - downa(n)) + f(n<span class="hljs-number">-1</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//每一站出的时候有多少b</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">g</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span> || n==<span class="hljs-number">2</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> (upb(n) - downb(n)) + g(n<span class="hljs-number">-1</span>);<br>    &#125;<br>&#125; <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> a, n, m, x;<br>    <span class="hljs-keyword">int</span> b; <span class="hljs-comment">//b表示第二站上车人数</span><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;输入始发站上车人数，车站数，终点站下车人数和所求的站点编号：&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cin</span> &gt;&gt; a;<br><span class="hljs-built_in">cin</span> &gt;&gt; n;<br><span class="hljs-built_in">cin</span> &gt;&gt; m;<br><span class="hljs-built_in">cin</span> &gt;&gt; x;<br><br><span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>; <br><br>    <span class="hljs-comment">//根据定义m=f(n-1)+g(n-1)，据此求出b</span><br>b = (m-(f(n<span class="hljs-number">-1</span>) * a)) / g(n<span class="hljs-number">-1</span>);<br>    <span class="hljs-comment">//计算第x站出站后人数</span><br>ans = (f(x)*a) + (g(x)*b);<br><br><span class="hljs-built_in">cout</span> &lt;&lt;<span class="hljs-string">&quot;第&quot;</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt;x;<br><span class="hljs-built_in">cout</span> &lt;&lt;<span class="hljs-string">&quot;站开出时车上的人数是:&quot;</span>; <br><span class="hljs-built_in">cout</span> &lt;&lt;ans&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>递归</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
