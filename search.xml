<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>图书馆管理系统</title>
      <link href="2021/04/24/%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/%E5%9B%BE%E4%B9%A6%E9%A6%86%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
      <url>2021/04/24/%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/%E5%9B%BE%E4%B9%A6%E9%A6%86%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 项目记录 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>常用命令</title>
      <link href="2021/04/17/%E5%B7%A5%E5%85%B7/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>2021/04/17/%E5%B7%A5%E5%85%B7/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="maven创建web项目命令："><a href="#maven创建web项目命令：" class="headerlink" title="maven创建web项目命令："></a>maven创建web项目命令：</h3><blockquote><p>mvn archetype:generate -DgroupId=cn.ryan377.项目名称 -DartifactId=项目名称 -Dpackage=cn.ryan377.项目名称 -Dversion=1.0-SNAPSHOT -DarchetypeArtifactId=maven-archetype-webapp</p></blockquote><h3 id="项目上传github"><a href="#项目上传github" class="headerlink" title="项目上传github"></a>项目上传github</h3><blockquote><p>git init</p><p>git add .</p><p>git commit -m “first commit”</p><p>git remote add origin <a href="https://github.com/ryan377/reponame.git">https://github.com/ryan377/reponame.git</a></p><p>git push -u origin master</p></blockquote><p>此后在IDEA中更新即可</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第13章 红黑树</title>
      <link href="2021/04/16/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA/%E7%AC%AC13%E7%AB%A0-%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
      <url>2021/04/16/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA/%E7%AC%AC13%E7%AB%A0-%E7%BA%A2%E9%BB%91%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="红黑树的性质"><a href="#红黑树的性质" class="headerlink" title="红黑树的性质"></a>红黑树的性质</h2><p>在二叉搜索树的基础上增加一位表示结点是红色或黑色。</p><p>定义：红黑树是满足下列条件的二叉搜索树</p><ol><li>每个结点是红色或者黑色</li><li>根节点是黑色</li><li>每个叶子节点（NIL）是黑色</li><li>如果一个结点是红色，则其两个子节点是黑色</li><li>对每个结点，从该结点到其所有后代结点的简单路径上，均包含相同数目的黑色节点</li></ol><p><em>设置一个哨兵结点代表NIL，所有指向NIL的指针都用哨兵结点替换</em></p><p>黑高bh(x)：从某个结点出发到叶结点的任意一条简单路径上，黑色结点个数，红黑树的黑高定义为根节点的黑高</p><p>引理：一颗有n个内部节点的红黑树高度至多为$2\lg(n+1)$</p><h2 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h2><p>进行插入和删除操作可能会破坏红黑树的性质，需要旋转操作来维护。</p><p><img src="C:\Users\87670\AppData\Roaming\Typora\typora-user-images\image-20210421135539585.png" alt="image-20210421135539585"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">LEFT-ROTATE(T, x)</span><br><span class="line">y &#x3D; x.right</span><br><span class="line">x.right &#x3D; y.left</span><br><span class="line">if y.left !&#x3D; T.nil</span><br><span class="line">y.left.p &#x3D; x</span><br><span class="line">    y.p &#x3D; x.p</span><br><span class="line">    if x.p &#x3D;&#x3D; T.nil</span><br><span class="line">    T.root &#x3D; y</span><br><span class="line">    else x &#x3D;&#x3D; x.p.left</span><br><span class="line">    x.p.left &#x3D; y</span><br><span class="line">    else x.p.right &#x3D; y</span><br><span class="line">    y.left &#x3D; x</span><br><span class="line">    x.p &#x3D; y</span><br></pre></td></tr></table></figure><p>右旋转和左旋转对称，时间复杂度都为$O(1)$</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210421135908.png" alt="image-20210421135908430"></p><h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><p>先按照二叉搜索树的INSERT方式把结点插入并着为红色，然后调用辅助程序RB-INSERT-FIXUP对结点重新着色并旋转。</p><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2>]]></content>
      
      
      <categories>
          
          <category> 算法导论 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第12章 二叉搜索树</title>
      <link href="2021/04/14/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA/%E7%AC%AC12%E7%AB%A0-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
      <url>2021/04/14/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA/%E7%AC%AC12%E7%AB%A0-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是二叉搜索树"><a href="#什么是二叉搜索树" class="headerlink" title="什么是二叉搜索树"></a>什么是二叉搜索树</h2><p>中序遍历递增，执行一次中序遍历耗费的时间是O(n)</p><h2 id="查询二叉搜索树"><a href="#查询二叉搜索树" class="headerlink" title="查询二叉搜索树"></a>查询二叉搜索树</h2><p><em>查找</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">TREE-SEARCH(x,k)</span><br><span class="line"><span class="keyword">if</span> x == NIL or k == x.key</span><br><span class="line"><span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">if</span> k &lt; x.key</span><br><span class="line">    <span class="keyword">return</span> TREE-SEARCH(x.left, k)</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> TREE-SEARCH(x.right, k)</span><br></pre></td></tr></table></figure><p><em>最大关键字元素和最小关键字元素</em></p><p>略</p><p><em>后继和前驱</em></p><p>略</p><p>以上操作在高度为h的二叉树上都能在O(h)的时间内完成</p><h2 id="插入和删除"><a href="#插入和删除" class="headerlink" title="插入和删除"></a>插入和删除</h2><p><em>插入</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">TREE-INSERT(T,z)</span><br><span class="line">y &#x3D; NIL</span><br><span class="line">x &#x3D; T.root</span><br><span class="line">while x !&#x3D; NIL</span><br><span class="line">y &#x3D; x</span><br><span class="line"> if z.key &lt; x.key</span><br><span class="line"> x &#x3D; x.left</span><br><span class="line">        else x &#x3D; x.right</span><br><span class="line">    z.p &#x3D; y</span><br><span class="line">    if y &#x3D;&#x3D; NIL</span><br><span class="line">    T.root &#x3D; x &#x2F;&#x2F; 空树</span><br><span class="line">    elseif z.key &lt; y.key</span><br><span class="line">    y.left &#x3D; z</span><br><span class="line">    else y.right &#x3D; z</span><br></pre></td></tr></table></figure><p>运行时间同样为O(h)，因为这些操作都是在二叉搜索树上从上往下进行一次遍历</p><p><em>删除</em></p><p>首先定义一个子过程TRANSPLANT，用另一棵子树替换一棵子树并成为其双亲的孩子节点</p>]]></content>
      
      
      <categories>
          
          <category> 算法导论 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>存储过程</title>
      <link href="2021/04/13/%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/"/>
      <url>2021/04/13/%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="物理存储介质"><a href="#物理存储介质" class="headerlink" title="物理存储介质"></a>物理存储介质</h2><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210413184802.png" alt="image-20210413184754054"></p><p>存储介质层次</p><p>（CPU）、第一级存储器（高速缓存、内存）、第二级存储器（快闪存、磁盘存储器）、第三级存储器（光存储器、磁带存储器）</p><p>分级存储的原因：</p><ol><li>价格因素：主存是磁盘的100倍</li><li>寻址的问题：32位主存大小小于$2^{32}$</li><li>数据需要永久保存</li></ol><p><strong>磁盘</strong></p><p>磁盘结构对性能的影响</p><p>DBMS在操作时数据在内存中</p><h2 id="RAID磁盘系统"><a href="#RAID磁盘系统" class="headerlink" title="RAID磁盘系统"></a>RAID磁盘系统</h2><h2 id="DBMS对磁盘空间的管理"><a href="#DBMS对磁盘空间的管理" class="headerlink" title="DBMS对磁盘空间的管理"></a>DBMS对磁盘空间的管理</h2><h2 id="DBMS从磁盘读取数据的方法"><a href="#DBMS从磁盘读取数据的方法" class="headerlink" title="DBMS从磁盘读取数据的方法"></a>DBMS从磁盘读取数据的方法</h2><h2 id="文件中管理页-page-的方式"><a href="#文件中管理页-page-的方式" class="headerlink" title="文件中管理页(page)的方式"></a>文件中管理页(page)的方式</h2><h2 id="页中记录的处理形式"><a href="#页中记录的处理形式" class="headerlink" title="页中记录的处理形式"></a>页中记录的处理形式</h2><h2 id="单条记录的存储方式"><a href="#单条记录的存储方式" class="headerlink" title="单条记录的存储方式"></a>单条记录的存储方式</h2>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>高并发秒杀系统</title>
      <link href="2021/04/12/%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F/"/>
      <url>2021/04/12/%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h3 id="一个javaweb项目的运行流程"><a href="#一个javaweb项目的运行流程" class="headerlink" title="一个javaweb项目的运行流程"></a>一个javaweb项目的运行流程</h3><p><img src="https://images2018.cnblogs.com/blog/1200305/201806/1200305-20180615104548781-252441748.png" alt="img"></p><p>参考自：<a href="https://github.com/codingXiaxw/seckill">https://github.com/codingXiaxw/seckill</a></p><h3 id="1-业务流程描述"><a href="#1-业务流程描述" class="headerlink" title="1. 业务流程描述"></a>1. 业务流程描述</h3><p><strong>用户成功秒杀商品，系统需要做的事：</strong></p><p>1、减库存；</p><p>2、记录用户的购买明细。（1.谁购买成功了。2.购买成功的时间/有效期。3.付款/发货信息）</p><p><strong>为什么我们的系统需要事务:</strong></p><p>1.用户成功秒杀商品我们记录了其购买明细却没有减库存，导致超卖。</p><p>2.减了库存却没有记录用户的购买明细，导致少卖。</p><p><strong>如何在保证事务的情况下，实现高并发？</strong></p><h3 id="2-环境搭建"><a href="#2-环境搭建" class="headerlink" title="2.环境搭建"></a>2.环境搭建</h3><h4 id="2-1-添加依赖"><a href="#2-1-添加依赖" class="headerlink" title="2.1 添加依赖"></a>2.1 添加依赖</h4><p>单元测试、日志、数据库相关依赖、servlet web相关、mybatis、Spring核心依赖、Spring-dao、spring-web依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--单元测试--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--日志--&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--实现slf4j接口整合--&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!--数据库连接池--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--数据库驱动--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--servlet web相关依赖--&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>standard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0-alpha-1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!--SSM框架--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!--spring 依赖--&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--spring核心依赖--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!--spring-dao依赖--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!--spring web依赖--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--spring test依赖--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-Dao层"><a href="#3-Dao层" class="headerlink" title="3. Dao层"></a>3. Dao层</h3><h4 id="3-1-创建数据库和表"><a href="#3-1-创建数据库和表" class="headerlink" title="3.1 创建数据库和表"></a>3.1 创建数据库和表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database seckill;</span><br><span class="line"></span><br><span class="line">use seckill;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> `seckill`(</span><br><span class="line">`seckill_id` <span class="type">bigint</span> <span class="keyword">not</span> <span class="keyword">null</span> auto_increment comment <span class="string">&#x27;商品库存ID&#x27;</span>,</span><br><span class="line">`name` <span class="type">varchar</span>(<span class="number">120</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;商品名称&#x27;</span>,</span><br><span class="line">`number` <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;库存数量&#x27;</span>,</span><br><span class="line">`start_time` <span class="type">timestamp</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;秒杀开始时间&#x27;</span>,</span><br><span class="line">`end_time` <span class="type">timestamp</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;秒杀结束时间&#x27;</span>,</span><br><span class="line">`create_time` <span class="type">timestamp</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="built_in">current_timestamp</span> comment <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line"><span class="keyword">primary</span> key (seckill_id),</span><br><span class="line">key idx_start_time(start_time),</span><br><span class="line">key idx_end_time(end_time),</span><br><span class="line">key idx_create_time(create_time)</span><br><span class="line">)engine<span class="operator">=</span>innodb auto_increment<span class="operator">=</span><span class="number">1000</span> <span class="keyword">default</span> charset<span class="operator">=</span>utf8 comment<span class="operator">=</span><span class="string">&#x27;秒杀库存表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> seckill(name,number,start_time,end_time)</span><br><span class="line"><span class="keyword">values</span></span><br><span class="line">(<span class="string">&#x27;1000元秒杀iphone12&#x27;</span>, <span class="number">100</span>, <span class="string">&#x27;2020-10-30 00:00:00&#x27;</span>,<span class="string">&#x27;2020-10-31 00:00:00&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;800元秒杀ipad pro&#x27;</span>, <span class="number">200</span>, <span class="string">&#x27;2020-10-30 00:00:00&#x27;</span>,<span class="string">&#x27;2020-10-31 00:00:00&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;6600元秒杀iMac&#x27;</span>, <span class="number">100</span>, <span class="string">&#x27;2020-10-30 00:00:00&#x27;</span>,<span class="string">&#x27;2020-10-31 00:00:00&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;7000元秒杀macbook pro&#x27;</span>, <span class="number">100</span>, <span class="string">&#x27;2020-10-30 00:00:00&#x27;</span>,<span class="string">&#x27;2020-10-31 00:00:00&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">--秒杀成功明细表</span></span><br><span class="line"><span class="comment">--用户登录认证相关信息：简化为手机号</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> success_killed(</span><br><span class="line">`seckill_id` <span class="type">bigint</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;秒杀商品ID&#x27;</span>,</span><br><span class="line">`user_phone` <span class="type">bigint</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;用户手机号&#x27;</span>,</span><br><span class="line">`state` tinyint <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="number">-1</span> comment <span class="string">&#x27;状态标识：-1:无效 0:成功 1:已付款 2:已发货&#x27;</span>,</span><br><span class="line">`create_time` <span class="type">timestamp</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="built_in">current_timestamp</span> comment <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line"><span class="keyword">primary</span> key(seckill_id, user_phone),<span class="comment">/*联合主键？*/</span></span><br><span class="line">key idx_create_time(create_time)</span><br><span class="line">)engine<span class="operator">=</span>innodb <span class="keyword">default</span> charset<span class="operator">=</span>utf8 comment<span class="operator">=</span><span class="string">&#x27;秒杀成功明细表&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="3-2-创建实体类"><a href="#3-2-创建实体类" class="headerlink" title="3.2 创建实体类"></a>3.2 创建实体类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Seckill</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> seckill_id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number;</span><br><span class="line">    <span class="keyword">private</span> Date start_time;</span><br><span class="line">    <span class="keyword">private</span> Date end_time;</span><br><span class="line">    <span class="keyword">private</span> Date create_time;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Seckill</span><span class="params">(<span class="keyword">long</span> seckill_id, String name, <span class="keyword">int</span> number, Date start_time, Date end_time, Date create_time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.seckill_id = seckill_id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.number = number;</span><br><span class="line">        <span class="keyword">this</span>.start_time = start_time;</span><br><span class="line">        <span class="keyword">this</span>.end_time = end_time;</span><br><span class="line">        <span class="keyword">this</span>.create_time = create_time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Seckill</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Seckill&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;seckill_id=&quot;</span> + seckill_id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, number=&quot;</span> + number +</span><br><span class="line">                <span class="string">&quot;, start_time=&quot;</span> + start_time +</span><br><span class="line">                <span class="string">&quot;, end_time=&quot;</span> + end_time +</span><br><span class="line">                <span class="string">&quot;, create_time=&quot;</span> + create_time +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getSeckill_id</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seckill_id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSeckill_id</span><span class="params">(<span class="keyword">long</span> seckill_id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.seckill_id = seckill_id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNumber</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.number = number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getStart_time</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> start_time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStart_time</span><span class="params">(Date start_time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.start_time = start_time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getEnd_time</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> end_time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEnd_time</span><span class="params">(Date end_time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.end_time = end_time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getCreate_time</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> create_time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCreate_time</span><span class="params">(Date create_time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.create_time = create_time;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuccessKilled</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> seckill_id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> user_phone;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">short</span> state;</span><br><span class="line">    <span class="keyword">private</span> Date create_time;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SuccessKilled</span><span class="params">(<span class="keyword">long</span> seckill_id, <span class="keyword">long</span> user_phone, <span class="keyword">short</span> state, Date create_time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.seckill_id = seckill_id;</span><br><span class="line">        <span class="keyword">this</span>.user_phone = user_phone;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">        <span class="keyword">this</span>.create_time = create_time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SuccessKilled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;SuccessKilled&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;seckill_id=&quot;</span> + seckill_id +</span><br><span class="line">                <span class="string">&quot;, user_phone=&quot;</span> + user_phone +</span><br><span class="line">                <span class="string">&quot;, state=&quot;</span> + state +</span><br><span class="line">                <span class="string">&quot;, create_time=&quot;</span> + create_time +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getSeckill_id</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seckill_id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSeckill_id</span><span class="params">(<span class="keyword">long</span> seckill_id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.seckill_id = seckill_id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getUser_phone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user_phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser_phone</span><span class="params">(<span class="keyword">long</span> user_phone)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.user_phone = user_phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">short</span> <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(<span class="keyword">short</span> state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getCreate_time</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> create_time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCreate_time</span><span class="params">(Date create_time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.create_time = create_time;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-3-创建dao接口"><a href="#3-3-创建dao接口" class="headerlink" title="3.3 创建dao接口"></a>3.3 创建dao接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SeckillMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 减库存的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> seckill_id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> kill_time</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  表示更新库存的记录行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reduceNumber</span><span class="params">(<span class="meta">@Param(&quot;seckillId&quot;)</span> <span class="keyword">long</span> seckill_id,<span class="meta">@Param(&quot;killTime&quot;)</span> Date kill_time)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询秒杀的商品信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> seckill_id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Seckill <span class="title">queryById</span><span class="params">(<span class="meta">@Param(&quot;seckillId&quot;)</span> <span class="keyword">long</span> seckill_id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据偏移量查询秒杀商品列表（什么偏移量？）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> off</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> limit</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Seckill&gt; <span class="title">queryAll</span><span class="params">(<span class="meta">@Param(&quot;offset&quot;)</span> <span class="keyword">int</span> off,<span class="meta">@Param(&quot;limit&quot;)</span> <span class="keyword">int</span> limit)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yucaihuang.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.yucaihuang.pojo.SuccessKilled;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SuccessKilledMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入购买明细，可过滤重复</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> seckill_id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user_phone</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  插入的行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insertSuccessKilled</span><span class="params">(<span class="meta">@Param(&quot;seckillId&quot;)</span> <span class="keyword">long</span> seckill_id,<span class="meta">@Param(&quot;userPhone&quot;)</span> <span class="keyword">long</span> user_phone)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">SuccessKilled <span class="title">queryByIdWithSeckill</span><span class="params">(<span class="meta">@Param(&quot;seckillId&quot;)</span> <span class="keyword">long</span> seckill_id,<span class="meta">@Param(&quot;userPhone&quot;)</span> <span class="keyword">long</span> user_phone)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-4-动态代理实现dao接口"><a href="#3-4-动态代理实现dao接口" class="headerlink" title="3.4 动态代理实现dao接口"></a>3.4 动态代理实现dao接口</h4><p>mybatis全局配置文件<code>mybatis-config.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置全局属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--使用jdbc的getGenerateKeys获取自增主键值--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useGenerateKeys&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--使用列别名替换列名</span></span><br><span class="line"><span class="comment">        开启后mybatis会自动帮我们把表中name的值赋到对应的实体的title属性中</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useColumnLabel&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.yucaihuang.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.yucaihuang.dao.SeckillMapper&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.yucaihuang.dao.SuccessKilledMapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>映射配置，必须与接口同名，但是这个Mapper文件存放的位置有两种形式：</p><ul><li><p>XxxMapper.xml和XxxMapper.java接口文件放在同个包下，即都放在<code>com.yucaihuang.dao</code>下：</p><p><img src="https://hyc-pic.oss-cn-hangzhou.aliyuncs.com/image-20201031150351335.png" alt="image-20201031150351335"></p><p>那么需要在pom.xml下加入以下配置，处理静态资源：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在mybatis-config.xml主配置文件中配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.yucaihuang.dao.SeckillMapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.yucaihuang.dao.SuccessKilledMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或者在后面的spring-dao.xml配置文件中配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--绑定mybatis配置文件，交给Spring管理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:Mapper/*.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>或者直接在resources目录下存放XxxMapper.xml文件：</p><p>然后在mybatis-config.xml主配置文件中配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;Mapper/SeckillMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;Mapper/SuccessKilledMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或者在后面的spring-dao.xml配置文件中配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--绑定mybatis配置文件，交给Spring管理--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:Mapper/*.xml&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p><code>SeckillMapper.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.yucaihuang.dao.SeckillMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;reduceNumber&quot;</span>&gt;</span></span><br><span class="line">        update seckill.seckill</span><br><span class="line">        set number = number-1</span><br><span class="line">        where seckill_id=#&#123;seckillId&#125;</span><br><span class="line">        and start_time &lt;![CDATA[ &lt;= ]]&gt; #&#123;killTime&#125;</span><br><span class="line">        and end_time &gt;= #&#123;killTime&#125;</span><br><span class="line">        and number &gt; 0;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Seckill&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;long&quot;</span>&gt;</span></span><br><span class="line">        select * from seckill.seckill</span><br><span class="line">        where seckill_id=#&#123;seckillId&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Seckill&quot;</span>&gt;</span></span><br><span class="line">        select * from seckill.seckill</span><br><span class="line">        order by create_time desc</span><br><span class="line">        limit #&#123;offset&#125;,#&#123;limit&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>SuccessKilledMapper.xml</code>:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="line">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;mapper namespace=<span class="string">&quot;com.yucaihuang.dao.SuccessKilledMapper&quot;</span>&gt;</span><br><span class="line">    &lt;insert id=<span class="string">&quot;insertSuccessKilled&quot;</span> parameterType=<span class="string">&quot;long&quot;</span>&gt;</span><br><span class="line">        &lt;!--当出现主键冲突时（即重复秒杀时），会报错；不想让程序报错，就加入ignore???--&gt;</span><br><span class="line">        insert ignore into seckill.success_killed(seckill_id, user_phone,state)</span><br><span class="line">        values (#&#123;seckillId&#125;,#&#123;userPhone&#125;,0);</span><br><span class="line">    &lt;/insert&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=<span class="string">&quot;queryByIdWithSeckill&quot;</span> resultType=<span class="string">&quot;SuccessKilled&quot;</span>&gt;</span><br><span class="line">        select</span><br><span class="line">        sk.seckill_id,</span><br><span class="line">        sk.user_phone,</span><br><span class="line">        sk.create_time,</span><br><span class="line">        sk.state,</span><br><span class="line">        s.seckill_id <span class="string">&quot;seckill.seckill_id&quot;</span>,</span><br><span class="line">        s.name <span class="string">&quot;seckill.name&quot;</span>,</span><br><span class="line">        s.number <span class="string">&quot;seckill&quot;</span>,</span><br><span class="line">        s.start_time <span class="string">&quot;seckill.start_time&quot;</span>,</span><br><span class="line">        s.end_time <span class="string">&quot;seckill.end_time&quot;</span>,</span><br><span class="line">        s.create_time <span class="string">&quot;seckill.create_time&quot;</span></span><br><span class="line">        from seckill.success_killed sk</span><br><span class="line">        inner join seckill.seckill s on sk.seckill_id=s.seckill_id</span><br><span class="line">        where sk.seckill_id=#&#123;seckillId&#125;</span><br><span class="line">        and sk.user_phone=#&#123;userPhone&#125;;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><h4 id="3-5-整合spring和mybatis"><a href="#3-5-整合spring和mybatis" class="headerlink" title="3.5 整合spring和mybatis"></a>3.5 整合spring和mybatis</h4><p>编写<code>spring-dao.xml</code>，让Spring管理数据库连接池和dao接口的动态注入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--关联数据库配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--c3p0私有属性--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;30&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--关闭连接后不自动commit--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;autoCommitOnClose&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--获取连接超时时间--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;checkoutTimeout&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1000&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--当获取连接失败重试次数--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;acquireRetryAttempts&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--绑定mybatis配置文件，交给Spring管理--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;typeAliasesPackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.yucaihuang.pojo&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:Mapper/*.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--实现dao接口动态注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.yucaihuang.dao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-6-dao层测试"><a href="#3-6-dao层测试" class="headerlink" title="3.6 dao层测试"></a>3.6 dao层测试</h4><p>测试SeckillMapper.java接口方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * junt整合spring</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="comment">//告诉junit spring的配置文件</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:spring-dao.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeckillMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> SeckillMapper seckillMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reduceNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = seckillMapper.reduceNumber(<span class="number">1001</span>, <span class="keyword">new</span> Date());</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> seckillId = <span class="number">1001</span>;</span><br><span class="line">        Seckill seckill = seckillMapper.queryById(seckillId);</span><br><span class="line">        System.out.println(seckill);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Seckill&gt; seckills = seckillMapper.queryAll(<span class="number">0</span>, <span class="number">100</span>);</span><br><span class="line">        <span class="keyword">for</span> (Seckill seckill : seckills) &#123;</span><br><span class="line">            System.out.println(seckill);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三个方法均测试通过。</p><p>测试SuccessKilledMapper.java接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:spring-dao.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuccessKilledMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SuccessKilledMapper successKilledMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertSuccessKilled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        successKilledMapper.insertSuccessKilled(<span class="number">1001</span>,<span class="number">12855555</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryByIdWithSeckill</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SuccessKilled successKilled = successKilledMapper.queryByIdWithSeckill(<span class="number">1001</span>, <span class="number">12855555</span>);</span><br><span class="line">        System.out.println(successKilled);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个方法均测试通过。</p><h3 id="4-Service层"><a href="#4-Service层" class="headerlink" title="4. Service层"></a>4. Service层</h3><h4 id="4-1-创建业务层接口"><a href="#4-1-创建业务层接口" class="headerlink" title="4.1 创建业务层接口"></a>4.1 创建业务层接口</h4><p>编写业务层接口，有两个重要的方法：1、暴露秒杀接口的地址。2、处理秒杀</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 业务层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SeckillService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询全部的秒杀记录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Seckill&gt; <span class="title">getSeckillList</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按ID查询秒杀记录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Seckill <span class="title">getSeckillById</span><span class="params">(<span class="keyword">long</span> seckillId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//往下是我们最重要的行为的一些接口</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在秒杀开启时输出秒杀接口的地址，否则输出系统时间和秒杀时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> seckillId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Exposer <span class="title">exportSeckillUrl</span><span class="params">(<span class="keyword">long</span> seckillId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行秒杀操作，有可能失败，有可能成功，所以要抛出我们允许的异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> seckillId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userPhone</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> md5</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SeckillException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> RepeatKillException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SeckillCloseException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">SeckillExecution <span class="title">executeSeckill</span><span class="params">(<span class="keyword">long</span> seckillId, <span class="keyword">long</span> userPhone, String md5)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> SeckillException, RepeatKillException, SeckillCloseException</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-2-dto封装类"><a href="#4-2-dto封装类" class="headerlink" title="4.2 dto封装类"></a>4.2 dto封装类</h4><p>建立一个包dto，用于封装业务层给web传输的数据，其中包括上面两个重要方法的返回值封装：<code>Exposer</code>和<code>SeckillExecution</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 暴露秒杀地址(接口)DTO</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exposer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否开启秒杀</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> exposed;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对秒杀地址加密的措施</span></span><br><span class="line">    <span class="keyword">private</span> String md5;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//id为seckillId的商品的秒杀地址</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> seckillId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//系统当前时间（毫秒）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> now_time;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//秒杀的开启时间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> start_time;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//秒杀的结束时间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> end_time;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Exposer</span><span class="params">(<span class="keyword">boolean</span> exposed, String md5, <span class="keyword">long</span> seckillId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.exposed = exposed;</span><br><span class="line">        <span class="keyword">this</span>.md5 = md5;</span><br><span class="line">        <span class="keyword">this</span>.seckillId = seckillId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Exposer</span><span class="params">(<span class="keyword">boolean</span> exposed, <span class="keyword">long</span> seckillId, <span class="keyword">long</span> now_time, <span class="keyword">long</span> start_time, <span class="keyword">long</span> end_time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.exposed = exposed;</span><br><span class="line">        <span class="keyword">this</span>.seckillId = seckillId;</span><br><span class="line">        <span class="keyword">this</span>.now_time = now_time;</span><br><span class="line">        <span class="keyword">this</span>.start_time = start_time;</span><br><span class="line">        <span class="keyword">this</span>.end_time = end_time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Exposer</span><span class="params">(<span class="keyword">boolean</span> exposed, <span class="keyword">long</span> seckillId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.exposed = exposed;</span><br><span class="line">        <span class="keyword">this</span>.seckillId = seckillId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isExposed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> exposed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setExposed</span><span class="params">(<span class="keyword">boolean</span> exposed)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.exposed = exposed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMd5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> md5;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMd5</span><span class="params">(String md5)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.md5 = md5;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getSeckillId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seckillId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSeckillId</span><span class="params">(<span class="keyword">long</span> seckillId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.seckillId = seckillId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getNow_time</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> now_time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNow_time</span><span class="params">(<span class="keyword">long</span> now_time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.now_time = now_time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getStart_time</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> start_time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStart_time</span><span class="params">(<span class="keyword">long</span> start_time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.start_time = start_time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getEnd_time</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> end_time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEnd_time</span><span class="params">(<span class="keyword">long</span> end_time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.end_time = end_time;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 封装执行秒杀后的结果：是否秒杀成功</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeckillExecution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> seckillId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//秒杀执行结果的状态</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> state;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//状态的明文标识</span></span><br><span class="line">    <span class="keyword">private</span> String stateInfo;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当秒杀成功时，需要传递秒杀成功的对象回去</span></span><br><span class="line">    <span class="keyword">private</span> SuccessKilled successKilled;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 秒杀成功返回所有信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> seckillId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> seckillStatEnum</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stateInfo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> successKilled</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SeckillExecution</span><span class="params">(<span class="keyword">long</span> seckillId, SeckillStatEnum seckillStatEnum, String stateInfo, SuccessKilled successKilled)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.seckillId = seckillId;</span><br><span class="line">        <span class="keyword">this</span>.state = seckillStatEnum.getState();</span><br><span class="line">        <span class="keyword">this</span>.stateInfo = stateInfo;</span><br><span class="line">        <span class="keyword">this</span>.successKilled = successKilled;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 秒杀失败</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> seckillId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> seckillStatEnum</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stateInfo</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SeckillExecution</span><span class="params">(<span class="keyword">long</span> seckillId, SeckillStatEnum seckillStatEnum, String stateInfo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.seckillId = seckillId;</span><br><span class="line">        <span class="keyword">this</span>.state = seckillStatEnum.getState();</span><br><span class="line">        <span class="keyword">this</span>.stateInfo = stateInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getSeckillId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seckillId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSeckillId</span><span class="params">(<span class="keyword">long</span> seckillId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.seckillId = seckillId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStateInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stateInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStateInfo</span><span class="params">(String stateInfo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.stateInfo = stateInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SuccessKilled <span class="title">getSuccessKilled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> successKilled;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSuccessKilled</span><span class="params">(SuccessKilled successKilled)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.successKilled = successKilled;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-异常处理类"><a href="#4-3-异常处理类" class="headerlink" title="4.3 异常处理类"></a>4.3 异常处理类</h4><p>创建一个exception包，用于处理异常，主要有两个异常：1、重复秒杀异常；2、秒杀结束异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeckillException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SeckillException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SeckillException</span><span class="params">(String message, Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yucaihuang.exception;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 重复秒杀异常，是一个运行时异常，不需要我们手动try catch</span></span><br><span class="line"><span class="comment"> * mysql只支持运行时异常的回滚操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RepeatKillException</span> <span class="keyword">extends</span> <span class="title">SeckillException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RepeatKillException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RepeatKillException</span><span class="params">(String message, Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yucaihuang.exception;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 秒杀关闭异常，当秒杀结束时，用户还要进行秒杀，就会出现这个异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeckillCloseException</span> <span class="keyword">extends</span> <span class="title">SeckillException</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SeckillCloseException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SeckillCloseException</span><span class="params">(String message, Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-4-业务层接口的实现"><a href="#4-4-业务层接口的实现" class="headerlink" title="4.4 业务层接口的实现"></a>4.4 业务层接口的实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeckillServiceImpl</span> <span class="keyword">implements</span> <span class="title">SeckillService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//日志对象</span></span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加入一个混淆字符串（秒杀接口）的salt，为了避免用户猜出我们的md5值，值任意给，越复杂越好</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String salt=<span class="string">&quot;safjlvllj`asdl.kn&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SeckillMapper seckillMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SuccessKilledMapper successKilledMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSeckillMapper</span><span class="params">(SeckillMapper seckillMapper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.seckillMapper = seckillMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSuccessKilledMapper</span><span class="params">(SuccessKilledMapper successKilledMapper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.successKilledMapper = successKilledMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Seckill&gt; <span class="title">getSeckillList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seckillMapper.queryAll(<span class="number">0</span>,<span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Seckill <span class="title">getSeckillById</span><span class="params">(<span class="keyword">long</span> seckillId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seckillMapper.queryById(seckillId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据seckillId来验证此产品是否在秒杀商品信息中，如果存在就判断当前时间是否在秒杀时间段内</span></span><br><span class="line"><span class="comment">     * 如果二者都成立，就生成一个加密后的md5，返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> seckillId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Exposer <span class="title">exportSeckillUrl</span><span class="params">(<span class="keyword">long</span> seckillId)</span> </span>&#123;</span><br><span class="line">        Seckill seckill = seckillMapper.queryById(seckillId);</span><br><span class="line">        <span class="comment">//说明查不到这个秒杀产品的记录</span></span><br><span class="line">        <span class="keyword">if</span>(seckill == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Exposer(<span class="keyword">false</span>,seckillId);</span><br><span class="line">        &#125;</span><br><span class="line">        Date start_time = seckill.getStart_time();</span><br><span class="line">        Date end_time = seckill.getEnd_time();</span><br><span class="line">        Date now_time = <span class="keyword">new</span> Date();</span><br><span class="line">        <span class="comment">//若是当前时间不在秒杀时间段内</span></span><br><span class="line">        <span class="keyword">if</span>(start_time.getTime() &gt; now_time.getTime() || end_time.getTime() &lt; now_time.getTime())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Exposer(<span class="keyword">false</span>, seckillId, now_time.getTime(), start_time.getTime(),end_time.getTime());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//秒杀开启，返回秒杀商品的id、用给接口加密的md5</span></span><br><span class="line">        String md5 = getMD5(seckillId);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Exposer(<span class="keyword">true</span>, md5, seckillId);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getMD5</span><span class="params">(<span class="keyword">long</span> seckillId)</span></span>&#123;</span><br><span class="line">        String base = seckillId + <span class="string">&quot;/&quot;</span> + salt;</span><br><span class="line">        String md5 = DigestUtils.md5DigestAsHex(base.getBytes());</span><br><span class="line">        <span class="keyword">return</span> md5;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 秒杀是否成功，若成功：减库存，增加明细；失败：抛出异常，mysql自动事务回滚</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> seckillId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userPhone</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> md5</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SeckillException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> RepeatKillException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SeckillCloseException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SeckillExecution <span class="title">executeSeckill</span><span class="params">(<span class="keyword">long</span> seckillId, <span class="keyword">long</span> userPhone, String md5)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> SeckillException, RepeatKillException, SeckillCloseException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(md5 == <span class="keyword">null</span> || !md5.equals((getMD5(seckillId))))&#123;</span><br><span class="line">            <span class="comment">//md5不匹配，说明秒杀数据被重写了，抛出异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SeckillException(<span class="string">&quot;seckill data has been rewrite&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Date now_time = <span class="keyword">new</span> Date();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//减库存</span></span><br><span class="line">            <span class="keyword">int</span> updateCount = seckillMapper.reduceNumber(seckillId, now_time);</span><br><span class="line">            <span class="keyword">if</span>(updateCount &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//没有更新库存记录，说明秒杀结束</span></span><br><span class="line">                <span class="keyword">throw</span>  <span class="keyword">new</span> SeckillCloseException(<span class="string">&quot;seckill is closed&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//成功更新了库存</span></span><br><span class="line">                <span class="keyword">int</span> insertCount = successKilledMapper.insertSuccessKilled(seckillId, userPhone);</span><br><span class="line">                <span class="comment">//是否该明细被重复插入，即用户是否重复秒杀</span></span><br><span class="line">                <span class="keyword">if</span>(insertCount &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RepeatKillException(<span class="string">&quot;seckill repeated&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    SuccessKilled successKilled = successKilledMapper.queryByIdWithSeckill(seckillId, userPhone);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> SeckillExecution(seckillId, SeckillStatEnum.SUCCESS,<span class="string">&quot;秒杀成功&quot;</span>,successKilled);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (SeckillCloseException e1)&#123;</span><br><span class="line">            <span class="keyword">throw</span> e1;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (RepeatKillException e2)&#123;</span><br><span class="line">            <span class="keyword">throw</span> e2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            logger.error(e.getMessage(),e);</span><br><span class="line">            <span class="comment">//编译期异常转化为运行期异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SeckillException(<span class="string">&quot;seckill inner error :&quot;</span>+e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>由于我们返回的数据是交给前端的，所以秒杀是否成功的状态我们封装到一个枚举类中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span>  <span class="title">SeckillStatEnum</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    SUCCESS(<span class="number">1</span>,<span class="string">&quot;秒杀成功&quot;</span>),</span><br><span class="line">    END(<span class="number">0</span>,<span class="string">&quot;秒杀结束&quot;</span>),</span><br><span class="line">    REPEAT_KILL(-<span class="number">1</span>,<span class="string">&quot;重复秒杀&quot;</span>),</span><br><span class="line">    INNER_ERROR(-<span class="number">2</span>,<span class="string">&quot;系统异常&quot;</span>),</span><br><span class="line">    DATE_REWRITE(-<span class="number">3</span>,<span class="string">&quot;数据篡改&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> state;</span><br><span class="line">    <span class="keyword">private</span> String info;</span><br><span class="line"></span><br><span class="line">    SeckillStatEnum(<span class="keyword">int</span> state, String info) &#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">        <span class="keyword">this</span>.info = info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SeckillStatEnum <span class="title">stateOf</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (SeckillStatEnum state : values()) &#123;</span><br><span class="line">            <span class="keyword">if</span>(state.getState() == index)&#123;</span><br><span class="line">                <span class="keyword">return</span> state;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-5-将Service层交给Spring管理"><a href="#4-5-将Service层交给Spring管理" class="headerlink" title="4.5 将Service层交给Spring管理"></a>4.5 将Service层交给Spring管理</h4><p>创建<code>spring-service.xml</code>，配置扫描包，注入service的bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span> <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/tx </span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.yucaihuang.service&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.yucaihuang.service.impl.SeckillServiceImpl&quot;</span> <span class="attr">id</span>=<span class="string">&quot;seckillServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;seckillMapper&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;seckillMapper&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;successKilledMapper&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;successKilledMapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--事务--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-6-使用Spring的声明式事务配置"><a href="#4-6-使用Spring的声明式事务配置" class="headerlink" title="4.6 使用Spring的声明式事务配置"></a>4.6 使用Spring的声明式事务配置</h4><p>声明式事务的使用方式:</p><ol><li>早期使用的方式:ProxyFactoryBean+XMl.</li><li>tx:advice+aop命名空间，这种配置的好处就是一次配置永久生效。</li><li>注解@Transactional的方式。</li></ol><p>在实际开发中，建议使用第三种对我们的事务进行控制。继续在<code>spring-service.xml</code>中配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置基于注解的声明式事务--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>然后在Service实现类方法中，在需要进行事务声明的方法上加上事务的注解：<code>@Transactional</code></p><p>使用注解控制事务方法的优点：</p><ul><li>开发团队达成一致约定，明确标注事务方法的编程风格；</li><li>保证事务方法的执行时间尽可能短，不要穿插其他网络操作RPC/HTTP请求或者剥离到事务方法外部；</li><li>不是所有的方法都需要事务，如果只有一条修改操作、只读操作不需要事务控制。</li></ul><h4 id="4-7-Service逻辑的集成测试"><a href="#4-7-Service逻辑的集成测试" class="headerlink" title="4.7 Service逻辑的集成测试"></a>4.7 Service逻辑的集成测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:ApplicationContext.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeckillServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    SeckillService seckillService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getSeckillList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Seckill&gt; seckillList = seckillService.getSeckillList();</span><br><span class="line">        <span class="keyword">for</span> (Seckill seckill : seckillList) &#123;</span><br><span class="line">            System.out.println(seckill);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getSeckillById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Seckill seckillById = seckillService.getSeckillById(<span class="number">1001</span>);</span><br><span class="line">        System.out.println(seckillById);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exportSeckillUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Exposer exposer = seckillService.exportSeckillUrl(<span class="number">1002</span>);</span><br><span class="line">        System.out.println(exposer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeSeckill</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SeckillExecution seckillExecution = seckillService.executeSeckill(<span class="number">1002</span>, <span class="number">1506779719</span>, <span class="string">&quot;80267e7716eeec0135c23d6a4a61add4&quot;</span>);</span><br><span class="line">        System.out.println(seckillExecution);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当重复运行<code>executeSeckill</code>方法时，出现异常：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">com.yucaihuang.exception.RepeatKillException: seckill repeated</span><br><span class="line"></span><br><span class="line">at com.yucaihuang.service.impl.SeckillServiceImpl.executeSeckill(SeckillServiceImpl.java:115)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class="line">com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)</span><br><span class="line">at </span><br><span class="line">...</span><br><span class="line">com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)</span><br><span class="line">at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230)</span><br><span class="line">at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这是因为用户进行了重复秒杀，我们应该在该测试方法中添加try catch,将程序允许的异常包起来而不去向上抛给junit。</p><p>由上分析可知，第四个方法只有拿到了第三个方法暴露的秒杀商品的地址后才能进行测试，也就是说只有在第三个方法运行后才能运行测试第四个方法，而实际开发中我们不是这样的，需要将第三个测试方法和第四个方法合并到一个方法从而组成一个完整的逻辑流程:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSeckillSeckillLogic</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="keyword">long</span> seckillId = <span class="number">1002</span>;</span><br><span class="line">    <span class="keyword">long</span> userPhone = <span class="number">15067729719L</span>;</span><br><span class="line">    Exposer exposer = seckillService.exportSeckillUrl(seckillId);</span><br><span class="line">    <span class="keyword">if</span>(exposer.isExposed())&#123;</span><br><span class="line">        System.out.println(exposer);</span><br><span class="line">        String md5 = exposer.getMd5();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            seckillService.executeSeckill(seckillId,userPhone,md5);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (RepeatKillException e1)&#123;</span><br><span class="line">            <span class="keyword">throw</span> e1;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (SeckillCloseException e2)&#123;</span><br><span class="line">            <span class="keyword">throw</span> e2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//秒杀未开启</span></span><br><span class="line">        System.out.println(exposer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-mvc层"><a href="#5-mvc层" class="headerlink" title="5.mvc层"></a>5.mvc层</h3><h4 id="5-1-整合spring"><a href="#5-1-整合spring" class="headerlink" title="5.1 整合spring"></a>5.1 整合spring</h4><p>创建<code>spring-mvc.xml</code>配置文件，并开启注解模式、配置静态资源、扫描包、视图解析器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启SpringMVC注解模式</span></span><br><span class="line"><span class="comment">    a. 自动注册DefaultAnnotationHanderMapping, AnnotationMethodHandlerAdapter</span></span><br><span class="line"><span class="comment">    b. 默认提供一系列的功能：数据绑定，数字和日期的format @NumberFormat, @DateTimeFormat</span></span><br><span class="line"><span class="comment">    c. xml, json的默认读写支持</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--静态资源默认servlet配置--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    1. 加入对静态资源的处理：js, gif, png</span></span><br><span class="line"><span class="comment">    2. 允许使用&quot;/&quot;做整体映射</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--扫描Controller--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.yucaihuang.controller&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;viewClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.springframework.web.servlet.view.JstlView&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>写一个Controller先测试一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/seckill&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeckillController</span></span>&#123;</span><br><span class="line">  <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求：<code>localhost:8080/seckill/hello</code>测试成功。</p><h4 id="5-2-导入静态资源"><a href="#5-2-导入静态资源" class="headerlink" title="5.2 导入静态资源"></a>5.2 导入静态资源</h4><p>将web目录下的文件拷贝到自己的web目录下。</p><h4 id="5-3-结果封装类"><a href="#5-3-结果封装类" class="headerlink" title="5.3 结果封装类"></a>5.3 结果封装类</h4><p>在dto包下创建<code>SeckillResult.java</code>类，用于封装md5地址和秒杀结果，给前端传值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将所有的ajax请求返回类型全部封装成json数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeckillResult</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> success;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line">    <span class="keyword">private</span> String error;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SeckillResult</span><span class="params">(<span class="keyword">boolean</span> success, T data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.success = success;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SeckillResult</span><span class="params">(<span class="keyword">boolean</span> success, String error)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.success = success;</span><br><span class="line">        <span class="keyword">this</span>.error = error;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSuccess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> success;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSuccess</span><span class="params">(<span class="keyword">boolean</span> success)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.success = success;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getError</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> error;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setError</span><span class="params">(String error)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.error = error;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="5-4-编写Controller方法"><a href="#5-4-编写Controller方法" class="headerlink" title="5.4 编写Controller方法"></a>5.4 编写Controller方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/seckill&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeckillController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SeckillService seckillService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 展示秒杀列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        List&lt;Seckill&gt; seckillList = seckillService.getSeckillList();</span><br><span class="line">        model.addAttribute(<span class="string">&quot;seckillList&quot;</span>,seckillList);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;list&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 秒杀商品详情页</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> seckillId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;seckillId&#125;/detail&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">detail</span><span class="params">(<span class="meta">@PathVariable(&quot;seckillId&quot;)</span> Long seckillId, Model model)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(seckillId == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;redirect:/seckill/list&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Seckill seckill = seckillService.getSeckillById(seckillId);</span><br><span class="line">        <span class="keyword">if</span>(seckill == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;forward:/seckill/list&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;seckill&quot;</span>,seckill);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;detail&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回一个JSON数据，数据中封装了我们商品的秒杀地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> seckillId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/&#123;seckillId&#125;/exposer&quot;, produces = &#123;&quot;application/json;charset=UTF-8&quot;&#125;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SeckillResult&lt;Exposer&gt; <span class="title">exposer</span><span class="params">(<span class="meta">@PathVariable(&quot;seckillId&quot;)</span> Long seckillId)</span></span>&#123;</span><br><span class="line">        SeckillResult&lt;Exposer&gt; result;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Exposer exposer = seckillService.exportSeckillUrl(seckillId);</span><br><span class="line">            <span class="comment">//成功取到了暴露的地址</span></span><br><span class="line">            result = <span class="keyword">new</span> SeckillResult&lt;Exposer&gt;(<span class="keyword">true</span>, exposer);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="comment">//取地址失败了，封装异常信息</span></span><br><span class="line">            result = <span class="keyword">new</span> SeckillResult&lt;Exposer&gt;(<span class="keyword">false</span>,e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于封装用户是否秒杀成功的信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> secKillId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> md5</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/&#123;seckillId&#125;/&#123;md5&#125;/execution&quot;,</span></span><br><span class="line"><span class="meta">    produces = &#123;&quot;application/json;charset=UTF-8&quot;&#125;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SeckillResult&lt;SeckillExecution&gt; <span class="title">execute</span><span class="params">(<span class="meta">@PathVariable(&quot;seckillId&quot;)</span> Long secKillId,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                   <span class="meta">@PathVariable(&quot;md5&quot;)</span> String md5,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                   <span class="meta">@CookieValue(value = &quot;userPhone&quot;, required = false)</span> Long userPhone)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(userPhone == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SeckillResult&lt;SeckillExecution&gt;(<span class="keyword">false</span>,<span class="string">&quot;未注册&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        SeckillResult&lt;SeckillExecution&gt; result;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SeckillExecution execution = seckillService.executeSeckill(secKillId, userPhone, md5);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SeckillResult&lt;SeckillExecution&gt;(<span class="keyword">true</span>,execution);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (RepeatKillException e1)&#123;</span><br><span class="line">            SeckillExecution execution = <span class="keyword">new</span> SeckillExecution(secKillId, SeckillStatEnum.REPEAT_KILL);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SeckillResult&lt;SeckillExecution&gt;(<span class="keyword">true</span>,execution);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (SeckillCloseException e2)&#123;</span><br><span class="line">            SeckillExecution execution = <span class="keyword">new</span> SeckillExecution(secKillId, SeckillStatEnum.END);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SeckillResult&lt;SeckillExecution&gt;(<span class="keyword">true</span>,execution);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            SeckillExecution execution = <span class="keyword">new</span> SeckillExecution(secKillId, SeckillStatEnum.INNER_ERROR);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SeckillResult&lt;SeckillExecution&gt;(<span class="keyword">true</span>,execution);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回系统当前时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/time/now&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SeckillResult&lt;Long&gt; <span class="title">time</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SeckillResult&lt;Long&gt;(<span class="keyword">true</span>, date.getTime());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><code>@ResponseBody</code>注解表示该方法的返回结果直接写入 HTTP 响应正文中，一般在异步获取数据时使用；</li></ul><ul><li>在使用<code>@RequestMapping</code>后，返回值通常解析为跳转路径，加上<code>@Responsebody</code>后返回结果不会被解析为跳转路径，而是直接写入HTTP 响应正文中。例如，异步获取<code>json</code>数据，加上<code>@Responsebody</code>注解后，就会直接返回<code>json</code>数据。</li><li><code>@RequestBody</code>注解则是将 HTTP 请求正文插入方法中，使用适合的<code>HttpMessageConverter</code>将请求体写入某个对象。</li></ul><h4 id="5-5-测试"><a href="#5-5-测试" class="headerlink" title="5.5 测试"></a>5.5 测试</h4><p>秒杀商品列表：</p><p><img src="https://raw.githubusercontent.com/KolinHuang/seckill/master/Drawings/seckill_list.png" alt="seckill_list"></p><p>秒杀商品详情信息：</p><p><img src="https://raw.githubusercontent.com/KolinHuang/seckill/master/Drawings/seckill_countdown.png" alt="seckill_countdown"></p><p><img src="https://raw.githubusercontent.com/KolinHuang/seckill/master/Drawings/seckill_start.png" alt="seckill_start"></p><p>秒杀成功：</p><p><img src="https://raw.githubusercontent.com/KolinHuang/seckill/master/Drawings/seckill_success.png" alt="seckill_success"></p><p>重复秒杀：</p><p><img src="https://raw.githubusercontent.com/KolinHuang/seckill/master/Drawings/seckill_repeat.png" alt="seckill_repeat"></p><h3 id="6-添加Redis缓存"><a href="#6-添加Redis缓存" class="headerlink" title="6. 添加Redis缓存"></a>6. 添加Redis缓存</h3><h4 id="6-1-整合Dao层"><a href="#6-1-整合Dao层" class="headerlink" title="6.1 整合Dao层"></a>6.1 整合Dao层</h4><p>在dao包中创建一个RedisMapper.java文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisMapper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JedisPool jedisPool;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedisMapper</span><span class="params">(String ip, <span class="keyword">int</span> port)</span></span>&#123;</span><br><span class="line">        jedisPool = <span class="keyword">new</span> JedisPool(ip,port);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这是序列化吗</span></span><br><span class="line">    <span class="keyword">private</span> RuntimeSchema&lt;Seckill&gt; schema = RuntimeSchema.createFrom(Seckill.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Seckill <span class="title">getSeckill</span><span class="params">(<span class="keyword">long</span> seckillId)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getSeckill(seckillId,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从redis里读数据，如果不存在就返回null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> seckillId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jedis</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Seckill <span class="title">getSeckill</span><span class="params">(<span class="keyword">long</span> seckillId, Jedis jedis)</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> hasJedis = jedis != <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(!hasJedis)&#123;</span><br><span class="line">                jedis = jedisPool.getResource();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                String key = getSeckillRedisKey(seckillId);</span><br><span class="line">                <span class="comment">//根据key查询</span></span><br><span class="line">                <span class="keyword">byte</span>[] bytes = jedis.get(key.getBytes());</span><br><span class="line">                <span class="comment">//如果查到了，说明redis里有这个key的缓存，就反序列化，返回seckill对象</span></span><br><span class="line">                <span class="keyword">if</span>(bytes != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    Seckill seckill = schema.newMessage();</span><br><span class="line">                    ProtostuffIOUtil.mergeFrom(bytes, seckill,schema);</span><br><span class="line">                    <span class="keyword">return</span> seckill;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(!hasJedis)&#123;</span><br><span class="line">                    jedis.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getSeckillRedisKey</span><span class="params">(<span class="keyword">long</span> seckillId)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;seckill:&quot;</span> + seckillId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从redis中先读数据，如果没有，就从数据库中读</span></span><br><span class="line"><span class="comment">     * 这个Function挺有意思的，学习一下！</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> seckillId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> getDataFromDb</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Seckill <span class="title">getOrPutSeckill</span><span class="params">(<span class="keyword">long</span> seckillId, Function&lt;Long, Seckill&gt; getDataFromDb)</span></span>&#123;</span><br><span class="line">        String lockKey = <span class="string">&quot;seckill:locks:getSeckill:&quot;</span>+seckillId;</span><br><span class="line">        String lockRequestId = UUID.randomUUID().toString();</span><br><span class="line">        Jedis jedis = jedisPool.getResource();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//循环争用锁，直到拿到了锁</span></span><br><span class="line">            <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">                Seckill seckill = getSeckill(seckillId, jedis);</span><br><span class="line">                <span class="keyword">if</span>(seckill != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> seckill;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//尝试获取锁</span></span><br><span class="line">                <span class="keyword">boolean</span> getLock = JedisUtils.tryGetDistributedLock(jedis,lockKey,lockRequestId,<span class="number">1000</span>);</span><br><span class="line">                <span class="keyword">if</span> (getLock)&#123;</span><br><span class="line">                    <span class="comment">//获取到了锁,从数据库拿数据，存redis</span></span><br><span class="line">                    seckill = getDataFromDb.apply(seckillId);</span><br><span class="line">                    putSeckill(seckill, jedis);</span><br><span class="line">                    <span class="keyword">return</span> seckill;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//无论如何都要把锁释放</span></span><br><span class="line">            JedisUtils.releaseDistributedLock(jedis, lockKey, lockRequestId);</span><br><span class="line">            jedis.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">putSeckill</span><span class="params">(Seckill seckill)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> putSeckill(seckill, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将Seckill对象序列化后，存入redis</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">putSeckill</span><span class="params">(Seckill seckill, Jedis jedis)</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> hasJedis = jedis != <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(!hasJedis)&#123;</span><br><span class="line">                jedis = jedisPool.getResource();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                String key = getSeckillRedisKey(seckill.getSeckill_id());</span><br><span class="line">                <span class="keyword">byte</span>[] bytes = ProtostuffIOUtil.toByteArray(seckill, schema, LinkedBuffer.allocate(LinkedBuffer.DEFAULT_BUFFER_SIZE));</span><br><span class="line">                <span class="comment">//超时缓存1小时</span></span><br><span class="line">                <span class="keyword">int</span> timeout = <span class="number">60</span> * <span class="number">60</span>;</span><br><span class="line">                String result = jedis.setex(key.getBytes(), timeout, bytes);</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(!hasJedis)&#123;</span><br><span class="line">                    jedis.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>需要用到分布式锁，所以创建一个工具类<code>JedisUtils</code>，利用<code>set lock:xx true ex 5 nx</code>原子操作实现锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String LOCK_SUCESS = <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Long RELEASE_SUCESS = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 尝试获取分布式锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jedis</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lockKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> requestId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expireTime</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">tryGetDistributedLock</span><span class="params">(Jedis jedis, String lockKey,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                String requestId, <span class="keyword">int</span> expireTime)</span></span>&#123;</span><br><span class="line">        SetParams setParams = <span class="keyword">new</span> SetParams();</span><br><span class="line">        setParams.nx();</span><br><span class="line">        setParams.ex(expireTime);</span><br><span class="line"></span><br><span class="line">        String result = jedis.set(lockKey,requestId,setParams);</span><br><span class="line">        <span class="keyword">return</span> LOCK_SUCESS.equals(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放分布式锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jedis</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lockKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> requestId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">releaseDistributedLock</span><span class="params">(Jedis jedis, String lockKey, String requestId)</span></span>&#123;</span><br><span class="line">        String script = <span class="string">&quot;if redis.call(&#x27;get&#x27;, KEYS[1]) == ARGV[1] then return redis.call(&#x27;del&#x27;, KEYS[1]) else return 0 end&quot;</span>;</span><br><span class="line">        Object result = jedis.eval(script, Collections.singletonList(lockKey), Collections.singletonList(requestId));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> RELEASE_SUCESS.equals(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在<code>spring-dao.xml</code>中配置bean:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--redis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.yucaihuang.dao.cache.RedisMapper&quot;</span> <span class="attr">id</span>=<span class="string">&quot;redisMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;118.31.103.27&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;6379&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="6-2-整合Service层"><a href="#6-2-整合Service层" class="headerlink" title="6.2 整合Service层"></a>6.2 整合Service层</h4><p>注入<code>redisMapper</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> RedisMapper redisMapper;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRedisMapper</span><span class="params">(RedisMapper redisMapper)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.redisMapper = redisMapper;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改查询逻辑，优先查询Redis：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Seckill <span class="title">getSeckillById</span><span class="params">(<span class="keyword">long</span> seckillId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> redisMapper.getOrPutSeckill(seckillId, <span class="keyword">new</span> Function&lt;Long, Seckill&gt;() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Seckill <span class="title">apply</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> seckillMapper.queryById(id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更新Service层依赖注入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.yucaihuang.service.impl.SeckillServiceImpl&quot;</span> <span class="attr">id</span>=<span class="string">&quot;seckillServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;seckillMapper&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;seckillMapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;successKilledMapper&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;successKilledMapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;redisMapper&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;redisMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>遇到问题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Lookup method resolution failed; nested exception is java.lang.IllegalStateE</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Resolution of declared constructors on bean Class [com.yucaihuang.dao.cache.RedisMapper] from ClassLoader [ParallelWebappClassLoader</span><br></pre></td></tr></table></figure><p>是由于更新了pom.xml之后，没有在lib文件下加入依赖。具体：File -&gt; Project Structure -&gt; Artifacts -&gt; WEB-INF -&gt; lib。</p><p>测试：点击链接后，在redis中查询到了相应的键值。</p>]]></content>
      
      
      <categories>
          
          <category> 项目记录 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>软件工程 第7章 面向对象方法基础</title>
      <link href="2021/04/12/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B-%E7%AC%AC7%E7%AB%A0-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
      <url>2021/04/12/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B-%E7%AC%AC7%E7%AB%A0-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%B3%95%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="面向对象的基本概念"><a href="#面向对象的基本概念" class="headerlink" title="面向对象的基本概念"></a>面向对象的基本概念</h2><p>面向对象 = 对象 + 分类 + 继承 + 通过消息的通信</p><h2 id="面向对象分析和设计过程"><a href="#面向对象分析和设计过程" class="headerlink" title="面向对象分析和设计过程"></a>面向对象分析和设计过程</h2><p><strong>面向对象分析过程</strong></p><p><em>分析步骤</em></p><ol><li>获取客户对系统的需求</li><li>用基本的需求为指南来选择类和对象</li><li>定义类的结构和层次</li><li>建造对象-关系模型</li><li>建造对象-行为模型</li><li>利用用况/场景来复审模型</li></ol><p><em>分析过程</em></p><p><strong>面向对象设计（OOD）过程</strong></p><p>系统设计、对象设计、消息设计、复审</p><p><strong>设计模式</strong></p><h2 id="UML概述"><a href="#UML概述" class="headerlink" title="UML概述"></a>UML概述</h2><p><strong>视图和图</strong></p><p>系统可以从不同角度进行观察，从一个角度观察到的系统，构成系统的一个视图</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210403155657.png" alt="image-20210403155650280"></p>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>软件工程 第6章 面向数据结构的分析与设计</title>
      <link href="2021/04/12/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B-%E7%AC%AC6%E7%AB%A0-%E9%9D%A2%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/"/>
      <url>2021/04/12/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B-%E7%AC%AC6%E7%AB%A0-%E9%9D%A2%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="JSP方法"><a href="#JSP方法" class="headerlink" title="JSP方法"></a>JSP方法</h2><p>使程序结构与问题结构（数据结构）相对应</p><p><strong>数据结构与程序结构的表示</strong></p><p>JSP方法中采用Jackson图来表示数据结构和程序结构</p><p><strong>JSP方法的分析和设计步骤</strong></p><ol><li>分析并确定输入和输出数据结构的逻辑结构，并用Jackson图画出</li><li>找出输入数据结构与输出数据结构中有对应关系的数据元素</li><li>从描述数据结构的Jackson图导出描述程序结构的Jackson图</li><li>列出所有操作和条件，并将它们分配到程序结构图的适当位置</li><li>用伪码表示</li></ol><h2 id="JSD方法简介"><a href="#JSD方法简介" class="headerlink" title="JSD方法简介"></a>JSD方法简介</h2><p>先建立一个现实模型，然后加入功能性处理。</p><ol><li>标识实体与行为</li><li>生成实体结构图</li><li>创建软件系统模型</li><li>扩充功能性过程</li><li>施加时间控制</li><li>实现</li></ol>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>同时多线程结构上操作系统的行为分析</title>
      <link href="2021/04/11/%E9%98%85%E8%AF%BB/%E5%90%8C%E6%97%B6%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BB%93%E6%9E%84%E4%B8%8A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%A1%8C%E4%B8%BA%E5%88%86%E6%9E%90/"/>
      <url>2021/04/11/%E9%98%85%E8%AF%BB/%E5%90%8C%E6%97%B6%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BB%93%E6%9E%84%E4%B8%8A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%A1%8C%E4%B8%BA%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>作者：Joshua A. Redstone, Susan J. Eggers and Henry M. Levy University of Washington</p><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本论文首次分析了操作系统在同步多线程(SMT)处理器上的执行情况。虽然SMT在过去六年得到了广泛的研究，但这些研究大都集中在用户模式执行上。然而，许多最适合多线程技术的应用程序都将很大一部分时间都花在内核代码上。因此，要完全理解这种工作负载的行为，需要执行和测量操作系统以及应用程序本身。</p><p>为了进行这项研究，我们做了以下工作：<br>1.修改Digital Unix 4.0d操作系统以运行在SMT CPU上<br>2.将我们的SMT Alpha指令集模拟器集成到SimOS模拟器种以提供一个执行环境</p><p>对于操作系统密集型工作负载，我们在SMT上运行多线程Apache Web服务器。我们将Apache的用户模式和内核模式行为与标准SPECInt工作负载进行了比较。总的来说，我们的结果展示了SMT处理器上操作系统密集型工作负载的微架构影响，并提供了对Apache Web服务器操作系统需求的深入了解。SMT处理器与Web和OS软件之间的协同作用产生了比以前检查过了任何工作负载（包括商业数据库和显示并行程序）上更大的吞吐量增益。</p><h1 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h1><p>同步多线程（SMT）是一种延迟容忍的CPU体系结构，它在每个周期中从多个线程执行多个指令。SMT的工作原理是将线程级并行转换为指令级并行，有效地将来自不同线程的指令送入大问题、无序超标标量处理器的功能单元。在过去的六年里，SMT得到了广泛的研究。康柏最近宣布Alpha 21464将包括SMT。作为一种通用的吞吐量增强机制。同步多线程特别适合于天生是多线程的应用程序，例如作为数据库和Web服务器，以及多程序和平行的科学工作负载。</p><p>本文首次检查了：<br>1.SMT架构上的操作系统行为<br>2.Web服务器SM应用程序，对于基于服务器的环境，操作系统是工作负载的关键组件。<br>以前的研究表明，数据库系统在内核中花费了30%到40%的执行事件，而我们的测量表明，Apache Web服务器在内核中花费了75%以上的时间。因此，对它们行为的任何分析都应该包括操作系统活动。<br>由于几个原因，操作系统对处理器的要求比典型的用户代码更高。<br>首先，操作系统是巨大的程序，由于代码和数据的大小，它们会淹没缓存和TLB。<br>其次，由于频繁的分支和不频繁的循环，操作系统可能会影响分支预测性能。<br>第三，操作系统的执行通常是短暂的和间歇的，由中断、异常或系统调用调用，并可能导致替换有用的缓存、TLB和分支预测状态，但好处很少或没有。<br>第四，操作系统可能执行自旋等待、显式缓存/TLB失效和其他用户模式代码中不常见的操作。由于这些原因，忽略操作系统（在架构模拟中通常是这样做的）可能会导致对系统级性能的误导性描述。即使对操作系统不密集的应用程序，与操作系统执行的指令数量相比，操作系统的性能影响也可能不成比例地大。<br>对于SMT，功能处理器和操作系统还不存在。相反，我们扩展了SimOS-Alpha基础设施，添加了一个基于alpha的SMT核心作为指令执行引擎。SimOS是一个模拟器，足够详细的引导和执行一个完整的操作系统，在康柏Alpha的情况下，SimOS也执行PAL代码。我们还修改了Digital Unix 4.0d操作系统以支持SMT。这种修改非常简单，因为Digital Unix的目标是在传统的共享内存处理器上运行，因为已经为多线程操作同步了。<br>作为SMT环境中操作系统行为的首次研究，我们的目标是回答几个基本问题<br>1.当操作系统添加到工作负载中时，以前报告的结果会发生什么变化（如果有的话）？特别是，我们希望核实之前研究的IPC结果，看看他们排除OS是否过于乐观。对于这些研究我们使用了一个由多个SPECInt基准组成的多程序工作负载。<br>2.也是更重要的，操作系统密集型工作负载和传统的工作负载都执行SMT在体系结构级别上的主要行为差异是什么？例如，操作系统如何改变微体系结构级别的资源利用率，对于具有细粒度资源共享（如SMT）的处理器，它会导致什么特殊问题（如果有的话）？对于这个问题，我们研究了一个操作系统密集型的应用程序，即广泛使用的Apache Web服务器，它是由SPECWeb基准测试驱动的。我们比较了Apache工作负载和SPECInt工作负载，以研究高操作系统和低操作系统使用的擦会议。<br>3.像Apache这样的Web服务器如何从SMT中获益，从软件的角度看，它将时间花在哪里？这个分析本身就很有趣，因为Web服务器和类似的应用程序越来越重要。因此我们给出了无序超标量和SMT上Apache的结果。<br>总定来说，我们的结果描述了操作系统密集型工作负载的架构行为和关键应用程序（Apache Web服务器）的软件行为（在操作系统内）。<br>本文组织如下。第二节详细介绍了我们的测量方法、模拟环境和我们使用的工作负载。第三节给出了我们在SMT上的两种工作负载（包括操作系统执行）的测量结果。第三节的前半部分介绍了由SPECInt应用程序组成的多编程工作负载，而后半部分主要关注Apache工作负载。第四节描述了以前的工作及其与我们研究的关系。我们在第五节做总结。</p><h1 id="2-方法"><a href="#2-方法" class="headerlink" title="2. 方法"></a>2. 方法</h1><p>本节描述在我们基于模拟的实验中使用的方法。我们首先描述SMT处理器和模拟硬件配置的西结。然后，我们从硬件和软件两个层面描述操作系统仿真环境。最后，我们描述评估的两个工作负载：一个是SPECInt95基准测试的多编程工作负载；另一个是Apache Web服务器。</p><h2 id="2-1-SMT和超标量处理器模型"><a href="#2-1-SMT和超标量处理器模型" class="headerlink" title="2.1 SMT和超标量处理器模型"></a>2.1 SMT和超标量处理器模型</h2><p>SMT是一种延迟容忍的CPU体系结构，它在每个周期中执行来自多个线程的多个指令。通过线程级并行转换为指令级并行，从不同线程发出指令的能力可以更好地利用执行资源。以前的研究已经证实，SMT可以有效地提高各种工作负载上的吞吐量，同时仍然为单线程应用程序提供良好的性能。<br>在硬件层面，SMT是现代无序超标量（如MIPS R10000或Alpha 21264）的直接扩展。SMT复制了一个超标量的寄存器文件、程序计数器、子程序堆栈和内部处理器寄存器，以保存多个线程的转台（我们将包含线程状态的硬件资源集称为上下文）。除了复制线程状态以外，SMT还具有用于管道刷新、指令退出、子例程返回预测和捕获的每上下文机制。康柏估计，对支持SMT所需的无序超标量进行修改，只会使芯片面积增加10%。<br>表一列出了模拟的SMT处理器和存储系统的参数，这些参数使选择作为近期处理器的特性。我们评估的无序超标量提供了与SMT相同的硬件资源，除了它缺少额外的硬件上下文，并且由于它的寄存器文件更小，它有更少的两个流水线阶段。<br><img src="https://img-blog.csdnimg.cn/2020122014505387.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjMzMzQw,size_16,color_FFFFFF,t_70" alt="表一：SMT参数"></p><h2 id="2-2-操作系统执行"><a href="#2-2-操作系统执行" class="headerlink" title="2.2 操作系统执行"></a>2.2 操作系统执行</h2><h3 id="2-2-1-操作系统仿真环境"><a href="#2-2-1-操作系统仿真环境" class="headerlink" title="2.2.1 操作系统仿真环境"></a>2.2.1 操作系统仿真环境</h3><p>在某种程度上，操作系统只是一个大程序；然而，它在访问低级硬件资源时（例如，I/O设备寄存器和内部CPU寄存器）和响应低级硬件事件（例如，异常和中断）方面是独特的。因此，要模拟操作系统，就需要模拟这些资源和事件。在本工作中，我们构建了SimOS-alpha硬件仿真框架。将我们的SMT CPU模拟器集成到SimOS中。这允许我们在模拟器上引导和运行操作系统，并在我们的模拟器中包含将在实际CPU上运行的每条指令，有特权的或无特权的。SimOS环境也执行Alpha PAL代码—存在于操作系统本身之下的一层软件。例如，PAL代码用于响应TLB丢失和处理操作系统内的同步（SETIPL）。我们还对几乎所有影响内存层次结构的操作系统/硬件交互进行建模，比如DMA操作和缓存刷新指令。一个例外是来自网络接口的DMA操作；尽管包含与网络相关的DMA将使Apache工作负载的内存总线事务数加倍（SPECInt工作负载不使用网络），但平均内存总线延迟仍然微不足道，因为它目前每个总线事务只有0.25个周期。<br>我们的研究集中在CPU和内存性能瓶颈上。为了节省模拟时间，我们模拟了一个零延迟磁盘。使用大型、快速磁盘阵列子系统对机器进行建模。但是，将执行所有操作磁盘的操作系统代码，包括磁盘驱动程序和DMA操作。对磁盘绑定及其进行建模可能会改变系统行为，特别是在缓存层次结构中。</p><h3 id="2-2-2-操作系统修改"><a href="#2-2-2-操作系统修改" class="headerlink" title="2.2.2 操作系统修改"></a>2.2.2 操作系统修改</h3><p>我们执行康柏digital Unix 4.0d操作系统，这是一个（共享内存）多处理器感知的操作系统。通过允许SMT在操作系统中显示为共享内存多处理器（SMP），只需在SMT和SMP体系结构不同的地方对操作系统进行更改。在Alpha的情况下，这些差异是SMT的共享TLB和L1缓存，而Alpha SMP的每个处理器的TLB和L1缓存，而Alpha SMP的每个处理器的TLB和L1缓存。在这两种差异中，只有与tlb相关的OS代码需要修改。<br>Alpha TLB在TLB条目上包含一个地址空间号（ASN）标记，它允许多个地址空间共享TLB，并减少上下文切换时的TLB刷新。由于多个线程可以同时访问SMT处理器的共享TLB，操作这些asn需要在上下文切换期间进行适当的互斥。因此，我们对tlb相关的代码做了一些更改。首先，我们修改了ASN分配算法以覆盖多个执行线程。其次，我们在每个上下文基础上复制了用于修改TLB条目的内部处理器寄存器；这样就删除了竞态条件，并允许多个上下文并行处理TLB miss。第三，我们删除了TLB击落代码，这在单处理器SMT中是不必要的。<br>尽管SMT处理器和MP的缓存架构接口不同，但这并不需要对操作系统进行修改。该接口提供了刷新L1指令和数据缓存的命令，在SMT中，这会导致刷新线程共享缓存，而不是线程本地缓存。由于缓存是软状态，因此结果的额外刷新可能是不必要的，但绝对不会是错误的。<br>我们执行的操作系统包含在SMT上运行Digital Unix所需的最小更改集，但没有探索大量的优化机会。例如，操作系统结构（如空闲循环和自旋锁定）是不必要的，会浪费SMT上的资源。（然而，在本文实验中，空闲周期栈稳定状态CPU比例不超过0.7%，旋转锁定在SPECInt工作负载中占不到1.2%，在Apache工作负载中占不到4.5%）。另一个可能的优化是用smt优化的调度器替换MP OS进程调度器。我们计划研究操作系统优化为未来的工作，但令人鼓舞的是，可以直接修改支持smp的操作系统，以便在SMT处理器上工作。</p><h2 id="2-3-模拟工作负载"><a href="#2-3-模拟工作负载" class="headerlink" title="2.3 模拟工作负载"></a>2.3 模拟工作负载</h2><p>在这项研究中，我们检查了两种不同的工作负载。第一个是多程序工作负载，由SPEC95Int的所有8个应用程序组成，我们对该套件模拟了6.5亿条指令。选择SEPCInt95有两个原因，首先，由于它通常用于架构评估，包括SMT的研究，我们希望了解在以前的工作中没有包含OS活动遗漏了什么。其次，由于Apache也是一个interger程序，SPECInt的性能可以作为基线，帮助了解Apache的性能。<br>第二个工作负载是Apache（版本1.3.4），这是一个流行的公共域Web服务器，由大多数Web站点运行。因为它大量使用OS服务（我们的测量显示75%的执行周期是在内核中度过的），所以它是一个用于检查OS性能的丰富环境（本文中介绍的大多数Apache数据都是基于对超过10亿条指令的模拟，从服务器空闲时开始）。然而，第3.2节中的超标量实验是在大约7亿条指令的模拟上进行的，受到模拟时间的限制。<br>我们使用SPECWeb96驱动Apache，这是一个Web服务器性能基准测试。我们配置Apache64个服务器进行，配置了SPECWeb 128个提供请求的客户端。为了支持使Apache饱和的请求速率。为了支持使Apache饱和所需的请求速率，我们将SPECWeb基准作为两个驱动进程执行，每个驱动程序有64个客户端。如果驱动程序运行在一个本地Alpha，然后网络代码将无法正常运行，消息被TCP丢弃。因此，我们构建了一个框架，在这个框架中，我们在单个Alpha上运行三个SimOS副本。结果是SPECWeb96客户端出现了与Apache完全相同的减速。客户端以Apache可以处理的速度生成数据包，并且双方的OS代码可以正确地管理网络接口和协议。在这三个SimOS环境之间，我们模拟了一个直接的网络连接，该连接传输数据包不存在丢失和延迟。模拟的网卡以10毫秒的时间粒度中断CPU，并且网络模拟器每隔10毫秒强制跨所有机器执行屏障同步。这个屏障使模拟器保持同步运行，并保证我们实验的可重复性的模拟的确定性执行。</p><h3 id="2-3-1-只模拟应用程序代码"><a href="#2-3-1-只模拟应用程序代码" class="headerlink" title="2.3.1 只模拟应用程序代码"></a>2.3.1 只模拟应用程序代码</h3><p>为了更精确地描述操作系统对性能的影响，我们将包含操作系统工作负载模拟与之模拟应用程序代码的工作负载模拟进行了比较。仅用于应用的模拟是通过一个单独的模拟器来完成的，该模拟器源自以前SMT研究中使用的SMT模拟器。仅应用程序模拟器将所有系统调用和内核陷阱建模为立即完成，对硬件状态没有影响。</p><h1 id="3-结果"><a href="#3-结果" class="headerlink" title="3. 结果"></a>3. 结果</h1><p>本节介绍基于simos的操作系统行为测量结果及其对SMT处理器的影响，在3.1节中，我们考虑一个特定的多程序工作负载；第3.2节研究了Apache工作负载，并将其与SPECInt的结果进行了比较。</p><h2 id="3-1-对SPECInt工作负载的评估"><a href="#3-1-对SPECInt工作负载的评估" class="headerlink" title="3.1 对SPECInt工作负载的评估"></a>3.1 对SPECInt工作负载的评估</h2><p>传统上，架构师根据科学和程序开发工作负载的分析来决定处理器和内存子系统的设计，SPECInt基准套件就是典型的例子。然而，大多数这样的分析只检查用户模式代码。在本节中，我们将评估这种做法的适当性，同步多线程上下文中的方法学策略。我们希望特别回答两个问题。首先，在SMT上包括（或不包括）操作系统的影响是什么，即使对于SPECInt基准测试的多编程工作负载也是如此？虽然我们预计SPECInt的操作系统使用率较低，但之前的研究表明，忽略内核代码，即使在这样低操作系统环境中，也会导致对内存系统行为的不良估计。第二，操作系统代码对8-上下文SMT的影响与无序超标量的影响相比如何？SMT的独特之处在于它同时执行内核模式和用户模式指令。也就是说，在一个周期中，来自多个内核例程的指令可以与来自多个用户应用程序的指令一起执行，而所有这些指令都共享一个内存层次结构。相反，超标量可以将来自单个应用程序的用户指令长流与来自单个内核服务的内核指令长流交替使用。在两种体系结构中，这种差异可能会对内存系统性能产生不同的银杏果i昂。在3.2节中，我们将根据Apache（一种操作系统更密集的工作负载）研究类似的问题。</p><h3 id="3-1-1-传统的SPEC-interger工作负载在SMT处理器上执行的OS行为"><a href="#3-1-1-传统的SPEC-interger工作负载在SMT处理器上执行的OS行为" class="headerlink" title="3.1.1 传统的SPEC interger工作负载在SMT处理器上执行的OS行为"></a>3.1.1 传统的SPEC interger工作负载在SMT处理器上执行的OS行为</h3><p>图一显示了多程序SPECInt95基准测试的执行周期百分比，这些基准测试占用用户空间、内核空间，或者在SMT处理器上执行时空闲。在程序启动期间（如图虚线左侧所示），操作系统平均占执行周期的18%，一旦达到稳定状态，它就会下降到相当稳定的5%，在执行过程中至少要维持16亿次循环（图中只显示了一部分）。在程序初始化较高的OS活动主要是由于TLB未处理（占所有 执行周期的12%）和系统调用5%，如图二所示。大多数TLB活动集中在处理TLB在用户空间丢失的数据（大约95%）。TLB错过了对内核内存管理的调用，而页面分配占据了这些调用的大部分，如图三所示。大多数由应用程序发起的系统调用是针对文件系统的；特别是，读取输入文件占用3.5%的执行周期，这与读取源和/或配置文件的应用程序一致。进程创建和控制以及内核前导（识别并分派到特定的系统调用）占用了大部分剩余的系统调用时间。注意，内核活动使Alpha PAL代码的执行相形见绌。<br>一旦达到稳定状态，内核活动将下降到执行周期的5%，但是TLB处理和系统调用时间的比例与启动期间大致相同。唯一重要的变化是文件读取调用的减少，因为程序已经从初始化转向。<br>表2显示了内核中各主要指令类别的指令分布情况；这些值是证书应用程序的典型值，包括SPEC整数基准测试。内核指令与用户指令在三个方面不同，首先，大约一半的内存操作在程序启动时，三分之一的负载和三分之二的存储处于稳定状态，不适用TLB，即TLB。它们直接指定物理地址。其次，内核控制传输包括PAL入口/返回分支。第三，与用户代码相比，稳态内核代码的条件分支占有率只有用户代码的一般。但是，由于内核执行时间很少，所以这些差异的总体影响很小。</p><p><img src="https://img-blog.csdnimg.cn/20201223203038244.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjMzMzQw,size_16,color_FFFFFF,t_70#pic_center" alt="图一 SPECInt95在SMT上执行的执行周期分解，在内核中花费的周期占所有执行周期的百分比在顶部黑色部分"><br><img src="https://img-blog.csdnimg.cn/20201223182106203.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjMzMzQw,size_16,color_FFFFFF,t_70#pic_center" alt="图2：SPECInt的内核时间分解"></p><p><img src="https://img-blog.csdnimg.cn/20201223122255824.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjMzMzQw,size_16,color_FFFFFF,t_70#pic_center" alt="图3：内存内核管理代码"><br><img src="https://img-blog.csdnimg.cn/2020122312230790.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjMzMzQw,size_16,color_FFFFFF,t_70#pic_center" alt="图4：系统调用占总执行的百分比"><br><img src="https://img-blog.csdnimg.cn/20201223122319240.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjMzMzQw,size_16,color_FFFFFF,t_70#pic_center" alt="表2：按指令类型分列的动态指令在SPECInt工作负载中的百分比，内存操作的括号中的百分比表示加载和存储的物理地址的比例。还包括分支指令的百分比细分，对于条件分支，括号中的数字表示所采用的条件分支的百分比"></p><h3 id="3-1-2-为什么要在特定的工作负载上模拟操作系统"><a href="#3-1-2-为什么要在特定的工作负载上模拟操作系统" class="headerlink" title="3.1.2 为什么要在特定的工作负载上模拟操作系统"></a>3.1.2 为什么要在特定的工作负载上模拟操作系统</h3><p>表3上半部分显示了在SMT上模拟SPECInt95和操作系统时，几种硬件数据结构中的未命中率。总的结果反映了其他研究人员在单线程处理器研究中发现的情况，即操作系统表现出的性能比特殊应用程序要差。分支目标缓冲器的内核未命中率特别高，因为两个因素：操作系统执行其实很少，无法建立一个持久的分支目标状态；大多数内核未命中（78%）取代其他内核条目错误是由于重复的变化间跳转的目标地址。<br>表3下半部分的分布结果表明，除指令缓存外，应用程序线程内部或应用程序线程之间的冲突是造成绝大多数缺失的原因。内核引起的冲突缺失仅占BTB缺失的10%，数据缓存缺失的18%，L2缓存缺失的9%和数据TLB缺失的18%，相比之下，大多数指令缓存丢失（60%）是由内核引起的。强制缺失对于所有硬件结构都是微不足道的，除了L2缓存，在L2缓存中内核为应用程序预取数据，因此吸收了许多第一次引用缺失的成本。<br>在较高的层次上，多编程SPECInt工作负载的内核执行频率较低可以改善内核特定于硬件组件的性能，表4通过比较在SMT上有操作系统活动和没有操作系统活动时以稳定状态执行的SPECInt工作负载的几个体系结构度量，说明了这种影响。这些数字表明，指令吞吐量仅略有下降，原因是操作系统，除了少数例外，线程共享硬件资源利用率在包含内核时略有下降。我们观察到性能下降百分比较大的那些硬件组件并没有对性能底线造成很大影响，因为它们最初并没有表现出特别糟糕的行为。<br>最严重的变化是模拟内核造成的，依赖于fetch引擎的两个部分，分支预测硬件和指令缓存之间的交互。转移错误预测增加了15%，指令缓存丢失增加了1.9倍，很大程度上是由于内核执行的干扰。指令丢失主要是由指令页重映射引起的缓存刷新引起的，而不是由特定缓存位置的冲突引起的，指令缺失的增加反过来导致可获取上下文的数量减少的8%，例如，那些不为指令丢失或中断服务的上下文，由于模拟器内核减少了可取上下文的平均数量，因此选择了一个预测错误的上下文来更频繁地获取数据，从而获得更多错误路径指令。<br>令人惊讶的是，内核比SPECInt应用程序有更好的转移预测，尽管它缺乏基于循环的代码（当同时执行这两个操作时，用户代码中的错误率是9.3），内核代码中的大多数条件分支都用于菱形控件，在这种控件中，目标代码执行异常条件。虽然内核BTB漏失率很高，但是对一个漏失的默认预测执行直通代码，因此更多的内核预测往往是正确的。<br>综上所述，尽管内核内存子系统的转移预测漏失率很高，但SMT指令吞吐量仅受到轻微影响，因为SPECInt程序中的内核活动很小，SMT很好地隐藏了延迟，因此，对类似特殊科学应用的SMT基本性能感兴趣的研究人员可以放心地依赖于应用及模拟。然而，如果专注于特定硬件组件（比如数据TLB）的设计，或者特定硬件策略（比如推测何时取数据）的设计，那么包括操作系统的执行时间影响是很重要的。<img src="https://img-blog.csdnimg.cn/20201223122337781.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjMzMzQw,size_16,color_FFFFFF,t_70#pic_center" alt="表3：在SMT上模拟SPECInt95和操作系统时，在几种硬件数据结构种总的缺失率和缺失分布，缺失类别是所有用户内核缺失的百分比。粗体条目表示内核诱导干扰。用户内核冲突是指用户线程与某种类型的内核活动冲突"><br><img src="https://img-blog.csdnimg.cn/20201223122347629.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjMzMzQw,size_16,color_FFFFFF,t_70#pic_center" alt="表4：带有SMT和超标量的操作系统和不带操作系统的SPECInt95的体系结构度量"></p><h3 id="3-1-3-在评估大问题超标量模型时是否应该模拟操作系统？"><a href="#3-1-3-在评估大问题超标量模型时是否应该模拟操作系统？" class="headerlink" title="3.1.3 在评估大问题超标量模型时是否应该模拟操作系统？"></a>3.1.3 在评估大问题超标量模型时是否应该模拟操作系统？</h3><p>就总体执行周期而言，在执行SPECInt基准测试时，操作系统在无序超标量和SMT处理器上的行为类似。超标量处理器只花费稍微大一点的执行部分在操作系统中。对于两个处理器，处于稳定状态的操作系统周期的百分比是相同的。<br>同样，在超标量处理器和SMT处理器，在启动和稳定状态下OS周期的分布都类似。一个例外是超标量处理器数据TLB的内核缺失所花费的较大部分时间。而且，DTLB丢失的内核处理会显示出糟糕的指令缓存行为，这增加了花费在这段代码中的时间。内核指令缓存在超标量上的丢失率是13.8%，其中81%的丢失是由于内核DTLB错误处理代码造成的。<br>在微架构级别上，操作系统在无序超标量上扮演不同的角色。超标量上的指令吞吐量大约是SMT的一半，如表4所示。尽管超标量硬件数据结构中的缺失较少发生，因为一次只执行一个线程，但超标量缺乏SMT隐藏延迟的能力。在过去对非os工作负载的SMT的所有研究中，SMT延迟容错超过了内存子系统和分支硬件中额外的线程间的冲突的补偿，最明显的是操作系统缺乏超标量的延迟隐藏能力，在稳定状态下只能达到0.6IPC，相比之下，用户代码的IPC为3.0。此外，超标量按比例压缩的指令数量大约是SMT的两倍，因为超标量只有一个要获取的指令源。<br>总是，包括操作系统在SPECInt超标量体系结构模拟负载扰动底线性能超过SMT，因为超标量体系结构性能更容易受到指令延迟（在其他硬件组件中，性能下降幅度较小，或者反映了先前性能良好的组件的大幅退化）。这一结果表明，研究人员在评估超标量系统结构时，不应该对忽略操作系统的影响抱有信心。</p><h2 id="3-2-对Apache（一个操作系统密集型工作负载）的评估"><a href="#3-2-对Apache（一个操作系统密集型工作负载）的评估" class="headerlink" title="3.2 对Apache（一个操作系统密集型工作负载）的评估"></a>3.2 对Apache（一个操作系统密集型工作负载）的评估</h2><p>Apache是部署最广泛的Web服务器。它的作用很简单：响应客户端HTTP请求包，通常返回请求的HTML或其他对象。对象存储在面向文件的数据库中，如果没有缓存在服务器的内存中，则从磁盘读取。下面我们将检查基于apache的工作负载。</p><h3 id="3-2-1-操作系统在执行Apache时的作用"><a href="#3-2-1-操作系统在执行Apache时的作用" class="headerlink" title="3.2.1 操作系统在执行Apache时的作用"></a>3.2.1 操作系统在执行Apache时的作用</h3><p>图五展示了Apache工作负载在SMT上执行的内核和用户活动，这些数据在几个方面与SPECInt多道程序工作负载有显著的不同，首先，Apache起步时间短；这不奇怪，因为Apache的启动只是简单地接收第一个传入的请求并唤醒服务器线程。其次，一旦请求到达，我们看到Apache花费超过75%的时间在操作系统上，即，Apache的大部分执行是在操作系统中，而不是在应用程序代码中。<br>图六显示了Apache内核周期的分解，与SPECInt启动期和稳定状态期比较。对Apache来说，其内核时间的大部分都花在了执行系统调用上。也就是说，SPECInt工作负载由隐式操作系统使用主导，而Apache则更显式地使用操作系统。Apache还显示了通过网络中断的重要内核活动—SPECInt工作负载中没有响应活动，Apache花费了34%的内核周期在neister线程中处理中断请求或响应网络中断，neister线程是一组相同的线程，负责代表到达的消息管理网络协议栈。Apache中只有少量的内核活动是由于DTLB失误造成的，相比之下，SPECInt工作负载大部分内核时间与TLB丢失处理有关（稳定状态为82%，启动时为58%）<br>图7显示了Apache系统调用更详细的分解。在左边，我们看到由Apache执行的每个系统调用引起的执行周期的百分比。如果所示，大部分时间花在处理对I/O例程的调用上：例如，Apache在star例程（查询文件信息）中花费了10%的周期，在读/写中花费了19%的周期，在I/O控制操作（如打开）中花费10%的周期，图7的右侧显示了相同数据的不同细分。在这里，我们根据资源类型（网络或文件）以及操作类型限定执行时间。从图中我们可以看出，网络读/写是最大的时间消耗者，大约占所有周期的17%，占Apache内核周期的22%。如上所述，文件查询（star例程）是第二大消耗者，其次是文件控制操作，占所有周期6%，占内核周期的8%。总的来说，花费在网络和文件系统的系统调用上的时间几乎与network相同服务占所有内核周期的21%，文件服务占18%。<br><img src="https://img-blog.csdnimg.cn/20201223122411242.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjMzMzQw,size_16,color_FFFFFF,t_70#pic_center" alt="图五：在SMT上执行的Apache中的内核和用户活动"><br><img src="https://img-blog.csdnimg.cn/20201223122421736.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjMzMzQw,size_16,color_FFFFFF,t_70#pic_center" alt="图六：在SMT上Apache内核活动分解，SPECInt工作负载的启动阶段和稳定阶段被包括进来比较"><br><img src="https://img-blog.csdnimg.cn/20201223122432279.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjMzMzQw,size_16,color_FFFFFF,t_70#pic_center" alt="图7：在SMT处理器上处理内核系统调用所花费的执行时间分解"></p><h3 id="3-2-2-结构性能特点"><a href="#3-2-2-结构性能特点" class="headerlink" title="3.2.2 结构性能特点"></a>3.2.2 结构性能特点</h3><p>表5显示了Apache中内核和用户代码的指令类型细分。总体来说，这类似于相应的SPECInt表。Apache的稳定加载/存储百分比更接近SPECInt的启动加载/存储百分比。因为SPECInt的启动包括各种OS服务，而稳定状态SPECInt工作负载主要由tlb处理条例控制。总的来说，Apache中大约一半的内核内存访问操作绕过TLB，即，它们直接指定物理地址。<br>表6展示了Apache的架构性能特征，并将它们与稳定状态下的SPECInt工作负载进行了比较，该图还显示了运行在超标量上的Apache的统计信息。Apache工作负载在SMT上实现了每个周期4.6条指令的吞吐量（最多为6条），比SPECInt工作负载低18%，性能下降的原因分布在大多数主要硬件组件中，Apache的性能比SPECInt差得多。除了数据TLB之外，内存子系统的所有组件都经历了更多的冲突；例如Apache的L2 miss率是SPECInt的1.5倍，D-cache miss率是2.3倍，I-cache miss率是2.5倍。<br>与SPECInt相比，Apache在fetch单元也表现得更差，Apache的可获取上下文平均比SPECInt少20%，被压缩的指令更多。在充分利用6个缺失插槽的情况下，Apache也减少了33%的周期。然而，尽管内存和获取系统行为有这些巨大的差异，SMT仍然能很好地容忍延迟，通过处理更多的缺失，并与要求更高的工作负载并行（最后三行）。<br>SMT在Apache中隐藏延迟的能力导致平均指令吞吐量为4.6IPC—是标准吞吐量的4.2倍，并且是SMT研究的任何工作负载的最高相对增益。超标量处理器实现的IPC仅为1.1—仅为SPECInt的42%（相比之下，在SMT处理器上Apache的IPC是它为SPECInt实现的82%。）最能说明性能差异的是，超标量在超过60%的周期内无法获取或发出指令，并且由于分支错误预测，它将获得的指令的46%删除了。SMT压缩的指令更少，因为多线程减少了错误预测的分支路径在条件解决之前执行的距离。<br><img src="https://img-blog.csdnimg.cn/20201223122454416.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjMzMzQw,size_16,color_FFFFFF,t_70#pic_center" alt="表5：按指令类型执行Apache时动态指令的百分比"><br><img src="https://img-blog.csdnimg.cn/2020122312250543.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjMzMzQw,size_16,color_FFFFFF,t_70#pic_center" alt="表6：比较在SMT上执行的Apache、在SMT上执行的SPECInt95以及在超标量上执行的Apache的体系结构指标"></p><h3 id="3-2-3-线程间的竞争与合作"><a href="#3-2-3-线程间的竞争与合作" class="headerlink" title="3.2.3 线程间的竞争与合作"></a>3.2.3 线程间的竞争与合作</h3><p>如前所述，SMT可以在单个周期中发出来自多个内核线程的指令，这就为线程间冲突创造了新的可能性，表7给出了Apache miss行为了更多细节，重点关注冲突的原因。与SPECInt工作负载相比，最引人注目的是内核/内核和用户/内核冲突，用粗体显示。Apache中缓存丢失的最高原因是内核内部的冲突：65%的L1 Icache丢失，65%的L1 Dcache丢失，以及41%的L2缓存丢失是由于线程内或线程间的内核冲突造成的。除L2缓存之外，这两类缓存中的内核线程缺失几乎是线程内缺失的两倍。用户/内核冲突也是非常重要的：25%的L1 Icache丢失，10%的L1 Dcahce丢失，22%的L2缓存丢失是由于内核和用户代码或数据之间的冲突造成的。<br>在SMT上同时运行多个内核线程的影响还可以通过将其与超标量进行比较来观察，超标量中一次只能活动一个内核线程。在Apache（未显示数据）的超标量执行中，与SMT上的Apache相比，Icache、Dcache和L2缓存中由于内核线程间冲突而导致的丢失百分比分别要低24%、28%和38%<br>在BTB中，内核线程内冲突占主导地位，占所有BTB丢失的68%，而6%的丢失是由用户/引起的内核冲突。相反，用户代码要为两个TLB中的大部分丢失负责（53%的数据TLB丢失和86%的指令TLB丢失是由于用户/用户冲突造成的）。尽管用户代码只占执行周期的22%。<br>虽然上面提到的数据涉及冲突，但同时执行线程也可能导致建设性的线程间行为。具体来说，当一个线程接触到即将被第二个线程访问的数据时，就会发生预取；然后第二个线程将在缓存中找到数据，从而避免丢失数据。比较SMT上这种构造共享的数量和超标量上相同的行为是很有趣的。由于SMT上有更细粒度的并行性，因此这种预取活动有更多机会。表8显示了集中资源由于在Apache中进行建设性共享而避免丢失的百分比。例如，在SMT上，如果不是内核中也在执行的其他线程预加载一个内核线程的指令，L1 Icache的总体缺失率将会更高66%。相比之下，这种共享对运行Apache的超标量的影响只有28%。同样，差异是由于SMT同时执行多个内核线程，或者在比超标量上执行的更短的时间内执行。<br>对于L2缓存来说，内核-内核预取的影响甚至更大，在L2缓存中，避免了额外71%的丢失，12%的内核TLB失误也被避免了。<br><img src="https://img-blog.csdnimg.cn/20201223122518707.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjMzMzQw,size_16,color_FFFFFF,t_70#pic_center" alt="表7：在SMT上模拟Apache和操作系统时，几种硬件数据结构的缺失分布"><br><img src="https://img-blog.csdnimg.cn/20201223122630240.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjMzMzQw,size_16,color_FFFFFF,t_70#pic_center" alt="表8：Apache上由于线程间合作而避免缺失的百分比"></p><h3 id="3-2-4-操作系统对硬件的影响"><a href="#3-2-4-操作系统对硬件的影响" class="headerlink" title="3.2.4 操作系统对硬件的影响"></a>3.2.4 操作系统对硬件的影响</h3><p>与前面对SPECInt工作负载的分析类似，我们现在研究操作系统对缓存和转移预测硬件的影响。操作系统增加了所有硬件结构的冲突，从L1数据丢失率增加35%到L1指令丢失率增加超过5倍不等。这些增长大致对应表7的冲突缺失数据，即，由于内核引用的增加，硬件结构中的用户丢失率降低的程度大致与内核冲突导致的用户丢失比例成正比。<br>除了超标量指令缓存丢失率外，操作系统对硬件结构的影响更大，在SPECInt工作负载上执行Apache比在SPECInt工作负载上执行更少。出现这种差异主要是因为操作系统活动主导Apache的执行，但也因为它们更多样化，因此比SPECInt所需的地方更少（Apache工作负载执行各种OS服务，而SPECInt主要使用内存管理）。<br><img src="https://img-blog.csdnimg.cn/20201223122642688.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjMzMzQw,size_16,color_FFFFFF,t_70#pic_center" alt="表9：操作系统对特定硬件结构的影响"></p><h2 id="3-3-结果总结"><a href="#3-3-结果总结" class="headerlink" title="3.3 结果总结"></a>3.3 结果总结</h2><p>在本节中，我们测量和分析了SMT处理器的性能，包括其操作系统对于Apache Web服务器和多程序SPECInt工作负载的性能。我们的结果表明，对于SMT，操作系统的遗漏不会导致SPECInt的性能严重错误预测，尽管对于执行相同工作负载的超标量的影响更为显著。然而，在Apache工作负载上，操作系统负责执行大部分指令。Apache在响应文件系统和内核网络代码中的系统服务上花费了大量时间，大量执行OS代码的结果是增加了更重底层资源的压力，包括缓存和BTB。内核线程也会在这些资源中引起更多的冲突，包括与其他内核线程和用户线程的冲突；另一方面，也有线程间共享的效果。Apache给处理器带来了挑战性，这可以从它在超标量上的极低吞吐量（1.1IPC）看出。SMT能够隐藏Apache的大部分延迟，使其能够实现相对于超标量处理器的4.2倍速的吞吐量改进。</p><h1 id="4-结论"><a href="#4-结论" class="headerlink" title="4 结论"></a>4 结论</h1><p>在这篇文章中，我们报告了在一个同步多线程处理器上执行操作系统的第一次测量。对于这些测量，我们修改了康柏/DEC Unix 4.0d操作系统以在SMT CPU上执行，并通过将SMT指令级模拟器集成到Alpha SimOS环境中来执行操作系统及其应用程序。结果表明<br>1.对于SEPCInt95工作负载，模拟操作系统不会显著影响SMT的总体性能，尽管操作系统的执行会对超标量产生影响。<br>2.Apache大部分时间都花在操作系统内核上，执行文件系统和网络操作。<br>3.Apache os密集型的工作负载对处理器来说压力很大，与SPECInt相比，这会导致缓存丢失率显著增加。<br>4.从我们对冲突缺失的详细分析来看，SMT上的内核线程之间存在显著的干扰，因为SMT可以同时执行来自多个内核线程的指令。另一方面，存在从合作共享中获益的机会，正如我们在线程间预取分析中所展示的那样。<br>5.总的来说，操作系统代码在超标量上导致较差的指令吞吐量，这对Apache Web服务器有很大的影响，它的IPC仅为1.1。<br>6.SMT的延迟容忍能够补偿操作系统代码的许多要求，在执行Apache时，SMT的吞吐量比超标量高了四倍，这是迄今为止SMT工作负载的最高相对收益。<br>最后，我们展示了将支持SMP的操作系统修改为在同步多线程处理器上执行相对简单。未来，我们打算对操作系统结构进行实验，以优化操作系统以适应SMT的特殊特性。</p>]]></content>
      
      
      <categories>
          
          <category> 阅读 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>大数运算</title>
      <link href="2021/04/11/%E7%AE%97%E6%B3%95%E9%A2%98%E8%A7%A3/%E5%A4%A7%E6%95%B0%E8%BF%90%E7%AE%97/"/>
      <url>2021/04/11/%E7%AE%97%E6%B3%95%E9%A2%98%E8%A7%A3/%E5%A4%A7%E6%95%B0%E8%BF%90%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<p>高精度整数：使用vector/数组存储每一位数字</p><p>高精度加法/乘法：模拟加法和乘法的过程</p><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加法</span></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">add</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; n, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n.size() &lt; m.size()) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp = n;</span><br><span class="line">        n = m;</span><br><span class="line">        m = temp;</span><br><span class="line">        temp.clear();</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::size_type i = <span class="number">0</span>; i != m.size(); i++) &#123;</span><br><span class="line">        n[i] += m[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::size_type i = <span class="number">0</span>; i != n.size(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n[i] &gt; <span class="number">9</span>) &#123;</span><br><span class="line">            n[i] %= <span class="number">10</span>;</span><br><span class="line">            n[i + <span class="number">1</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n[n.size() - <span class="number">1</span>] &gt; <span class="number">9</span>) &#123;</span><br><span class="line">        n[n.size() - <span class="number">1</span>] %= <span class="number">10</span>;</span><br><span class="line">        n.push_back(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    m.clear();</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法题解 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第八章 线性时间排序</title>
      <link href="2021/04/10/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA/%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E7%BA%BF%E6%80%A7%E6%97%B6%E9%97%B4%E6%8E%92%E5%BA%8F/"/>
      <url>2021/04/10/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA/%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E7%BA%BF%E6%80%A7%E6%97%B6%E9%97%B4%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>归并排序、堆排序、快速排序各元素的次序依赖于它们之间的比较，称为比较排序。</p><h2 id="排序算法的下界"><a href="#排序算法的下界" class="headerlink" title="排序算法的下界"></a>排序算法的下界</h2><p><strong>决策树模型</strong></p><p>一个完全二叉树，可以表示在给定输入规模情况下，某一特定排序算法对所有元素的比较操作</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210331154254.png" alt="image-20210331154245815"></p><p><strong>最坏情况的下界</strong></p><p>在决策树中，从根节点到任意一个可达叶结点之间的最长简单路径长度，表示的是对应的排序算法中最坏情况下的比较次数。</p><p>定理：在最坏情况下，任何比较排序算法都需要做$\Omega(n\lg n)$次比较</p><p>排序的稳定性：相等元素排序前后顺序不变</p><p>稳定：插入排序、归并排序</p><p>不稳定：堆排序、快速排序</p><h2 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h2><p>n个0到k的输入元素，k=O(n)时，运行时间$\Theta(n)$</p><p>每输入一个元素x，确定小于x的元素个数，从而找到其在输出数组中的位置</p><p>伪代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">COUNTING-SORT(A,B,k)</span><br><span class="line">let C[0...k] be a new array</span><br><span class="line">for i &#x3D; 0 to k</span><br><span class="line">C[i] &#x3D; 0</span><br><span class="line">    for j &#x3D; 1 to A.length</span><br><span class="line">    C[A[j]] &#x3D; C[A[j]] + 1</span><br><span class="line">    &#x2F;&#x2F; C[i] now contains the number of elements equal to i</span><br><span class="line">    for i &#x3D; 1 to k</span><br><span class="line">    C[i] &#x3D; C[i] + C[i-1]</span><br><span class="line">    &#x2F;&#x2F; C[i] now contains the number of elements less or equal to i</span><br><span class="line">    for j &#x3D; A.lenght downto 1</span><br><span class="line">    &#x2F;&#x2F; 这里不太理解为什么要从后往前，从前往后应该不会影响结果</span><br><span class="line">    B[C[A[j]]] &#x3D; A[j]</span><br><span class="line">    C[A[j]] &#x3D; C[A[j]] - 1</span><br></pre></td></tr></table></figure><p>java程序及运行结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">int</span>[] A = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">30</span>];</span><br><span class="line">    <span class="keyword">int</span>[] B = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">30</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">        A[i] = (<span class="keyword">int</span>)(Math.random()*k);</span><br><span class="line">    &#125;</span><br><span class="line">    countingsort(A, B, k);</span><br><span class="line">    System.out.println(Arrays.toString(A));</span><br><span class="line">    System.out.println(Arrays.toString(B));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">countingsort</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span>[] B, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] C = <span class="keyword">new</span> <span class="keyword">int</span>[k];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; A.length; j++) &#123;</span><br><span class="line">        C[A[j]] = C[A[j]] + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; k; i++) &#123;</span><br><span class="line">        C[i] += C[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = A.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        B[C[A[i]] - <span class="number">1</span>] = A[i];</span><br><span class="line">        C[A[i]] = C[A[i]] - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210410135122.png" alt="image-20210410135115533"></p><h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><p>一种用在卡片排序机上的算法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RADIX-SORT(A,d)</span><br><span class="line">for i &#x3D; 1 to d</span><br><span class="line">use a stable sort to sort array A on digit i</span><br></pre></td></tr></table></figure><h2 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h2><p>将[0,1)区间划分为n个相同大小的子区间，或称为桶，然后将n个输入数分别放到各个桶中，然后，将n个输入数分别放到各个桶中。先对各个桶中的数进行排序，然后遍历每个桶，按照次序把各个桶中的元素列出来即可。（需要元素是均匀分布的，防止一个桶里面的元素太多）</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210410135732.png" alt="image-20210410135732520"></p>]]></content>
      
      
      <categories>
          
          <category> 算法导论 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第9章 中位数和顺序统计量</title>
      <link href="2021/04/10/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA/%E7%AC%AC9%E7%AB%A0-%E4%B8%AD%E4%BD%8D%E6%95%B0%E5%92%8C%E9%A1%BA%E5%BA%8F%E7%BB%9F%E8%AE%A1%E9%87%8F/"/>
      <url>2021/04/10/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA/%E7%AC%AC9%E7%AB%A0-%E4%B8%AD%E4%BD%8D%E6%95%B0%E5%92%8C%E9%A1%BA%E5%BA%8F%E7%BB%9F%E8%AE%A1%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="最小值和最大值"><a href="#最小值和最大值" class="headerlink" title="最小值和最大值"></a>最小值和最大值</h2><p>为了确定最小值/最大值，必须要进行n-1次比较</p><p>同时找到最大值/最小值，总的比较次数为至多是$3\lfloor n/2\rfloor$</p><p>方法：对输入元素成对处理，大的和最大值比，小的和最小值比</p><h2 id="期望为线性时间的选择算法"><a href="#期望为线性时间的选择算法" class="headerlink" title="期望为线性时间的选择算法"></a>期望为线性时间的选择算法</h2><p>返回数组A[p,r]中第i小的元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">RANDOMIZED-SELECT (A,p,r,i)</span><br><span class="line">if p &#x3D;&#x3D; r</span><br><span class="line">return A[p]</span><br><span class="line">q &#x3D; RANDOMIZED-PARTITION (A,p,r)</span><br><span class="line">k &#x3D; q - p + 1</span><br><span class="line">if i &#x3D;&#x3D; k</span><br><span class="line">return A[q]</span><br><span class="line">else if i &lt; k</span><br><span class="line">return RANDOMIZED-SELECT (A,p,q-1,i)</span><br><span class="line">else return RANDOMIZED-SELECT (A,q+1,r,i-k)</span><br></pre></td></tr></table></figure><h2 id="最坏情况为线性时间的选择算法"><a href="#最坏情况为线性时间的选择算法" class="headerlink" title="最坏情况为线性时间的选择算法"></a>最坏情况为线性时间的选择算法</h2><ol><li>将输入数组的n个元素划分为$\lceil n/5\rceil$组，每组5个元素，且至多只有一组由剩下的不足5个元素组成。</li><li>寻找这$\lceil n/5\rceil$组中每一组的中位数，首先对每组元素进行插入排序，然后确定每组有序元素中位数。</li><li>对第2步找出的$\lceil n/5\rceil$个中位数，递归调用SELECT以找出其中位数x（如果有偶数个中位数，为了方便，约定x是较小的数）</li><li>利用修改过的PARTITION版本，递归调用SELECT以找出其中位数x对输入数组进行划分。让k比划分的低区中的元素数目多1，因此x是第k小的元素，并且有n-k个元素在划分的高区。</li><li>如果i=k，则返回x，如果i<k，则在低区递归调用SELECT来找出第i小的元素。如果i>k，则在高区递归查找第i-k小的元素。</li></ol><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210410140135.png" alt="image-20210410140135127"></p>]]></content>
      
      
      <categories>
          
          <category> 算法导论 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第4章 存储器层次结构</title>
      <link href="2021/04/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E4%BD%93%E7%BB%93%E6%9E%84/%E7%AC%AC4%E7%AB%A0-%E5%AD%98%E5%82%A8%E5%99%A8%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84/"/>
      <url>2021/04/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E4%BD%93%E7%BB%93%E6%9E%84/%E7%AC%AC4%E7%AB%A0-%E5%AD%98%E5%82%A8%E5%99%A8%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h2 id="存储系统的基本知识"><a href="#存储系统的基本知识" class="headerlink" title="存储系统的基本知识"></a>存储系统的基本知识</h2><p>存储器的特性：</p><ul><li>速度越快，每位价格就越高</li><li>容量大，价格低</li><li>容量越大，速度越慢</li></ul><p>采用多种存储器技术，构成多级存储器结构层次，依据：局部性原理</p><p>两种层次结构：</p><p>Cache-主存：弥补主存速度的不足</p><p>主存-辅存：弥补主存容量不足</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210409102940.png" alt="image-20210409102940071"></p><p>四个问题：</p><ol><li>当把一个块调入高一层（靠近CPU）存储器时，可以放在哪些位置上？（映像规则）</li><li>当所要访问的块再高一层存储器中时，如何找到该块？（查找方法）</li><li>当发生不命中时，应替换哪一块？（替换算法）</li><li>当进行写访问时，应进行哪些操作？（写策略）</li></ol><h2 id="Cache基本知识"><a href="#Cache基本知识" class="headerlink" title="Cache基本知识"></a>Cache基本知识</h2><p>Cache是按块进行管理的，Cache和主存均被分割成大小相同的块。信息以块为单位调入Cache。</p><p>块地址+块内位移</p><p><em>映像规则</em></p><ul><li>全相联映像：主存中任一块可以被放置到Cache中的任意一个位置</li><li>直接映像：主存中的每一块只能被放置到Cache中唯一的一个位置</li><li>组相联映像：主存中的每一块可以被放置到Cache中唯一一个组的任何一个位置</li></ul><p><em>查找方法</em></p><p>通过查找目录表实现，在Cache中有一个目录表，该表共有M项，每一项对应于cache中的一个块，用于指出当前该块的信息是哪个主存块的。</p><p><em>替换算法</em></p><p>直接映像别无选择，组相联和全相联Cache中，则有多个块可供选择，主要的算法有三种：</p><ol><li>随机发</li><li>先进先出法FIFO</li><li>最近最少使用法LRU</li></ol><p><em>写策略</em></p><ul><li>写直达法：执行“写”操作时，不仅写入Cache，而且也写入下一级存储器。</li><li>写回法：执行“写”操作时，只写入Cache。仅当Cache中相应的块被替换时，才写回主存。</li></ul><h2 id="缓存性能分析"><a href="#缓存性能分析" class="headerlink" title="缓存性能分析"></a>缓存性能分析</h2><p>命中率H和不命中率F（F=1-H）</p><p>平均访问时间TA = HT1 + (1-H) (T1+TM) = T1 + (1-H) TM 或 TA = T1 + FTM</p><p>CPU执行时间=（CPU执行周期数+存储器停顿周期数）* 时钟周期时间</p><h2 id="6种基本的缓存优化方法"><a href="#6种基本的缓存优化方法" class="headerlink" title="6种基本的缓存优化方法"></a>6种基本的缓存优化方法</h2><p>平均访问时间 = 命中时间 + 缺失率 * 缺失代价</p><p>可以从三个方面改进Cache性能：</p><ul><li>降低缺失率</li><li>减少缺失代价</li><li>减少Cache命中时间</li></ul><p>三种类型的缺失（3C）</p><ul><li>强制性缺失：当第一次访问一个块时，该块不在Cache中，需从下一级存储器中调入Cache。</li><li>容量缺失：如果程序执行所需的块不能全部调入Cache中，则当某些块被替换后，若又被重新访问，就会发生缺失。</li><li>冲突缺失：在组相联或直接映像中，若太多的块映像到同一组（块）中，则会出现该组中某个块被别的块替换，然后又被重新访问的情况。</li></ul><p><em>方法</em></p><p>降低缺失率</p><ul><li>增加Cache块的大小</li><li>增加Cache的容量</li><li>提高相联度</li></ul><p>降低缺失代价</p><ul><li>采用多级Cache</li><li>使读取缺失的优先级高于写入缺失</li></ul><p>缩短命中时间</p><ul><li>避免在索引Cache期间进行地址转换</li></ul><h2 id="10种高级的缓存优化方法"><a href="#10种高级的缓存优化方法" class="headerlink" title="10种高级的缓存优化方法"></a>10种高级的缓存优化方法</h2><h2 id="存储器技术"><a href="#存储器技术" class="headerlink" title="存储器技术"></a>存储器技术</h2><h2 id="虚拟存储器和虚拟机"><a href="#虚拟存储器和虚拟机" class="headerlink" title="虚拟存储器和虚拟机"></a>虚拟存储器和虚拟机</h2>]]></content>
      
      
      <categories>
          
          <category> 计算机体系结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>软件工程 第8章 面向对象建模</title>
      <link href="2021/04/03/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B-%E7%AC%AC8%E7%AB%A0-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%BB%BA%E6%A8%A1/"/>
      <url>2021/04/03/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B-%E7%AC%AC8%E7%AB%A0-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%BB%BA%E6%A8%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="用况建模"><a href="#用况建模" class="headerlink" title="用况建模"></a>用况建模</h2><p>用况建模时用于描述一个系统应该做什么的建模技术。</p><p><strong>用况建模步骤</strong></p><ol><li>定义系统</li><li>确定执行者</li><li>确定用况</li><li>描述用况</li><li>确定用况间的关系</li><li>确认模型</li></ol><h2 id="静态建模"><a href="#静态建模" class="headerlink" title="静态建模"></a>静态建模</h2><p>静态建模描述系统中包含的类以及类之间的关系，展示了软件系统的静态结构。</p><p><em>CRC技术</em></p><p>类-责任-协作者技术，一组表示类的索引卡片，每张卡片分成三个部分，分别描述类、类的责任和类的协作者</p><p><em>类之间的关系</em></p><div class="table-container"><table><thead><tr><th>关系</th><th>功能</th><th>符号</th></tr></thead><tbody><tr><td>关联</td><td>类实例间连接的描述</td><td>——</td></tr><tr><td>依赖</td><td>二个模型元素之间的一种关系</td><td>——-&gt;</td></tr><tr><td>泛化</td><td>更特殊描述与更一般描述之间的一种关系，用于继承和多态性类型声明</td><td>——$\vartriangleright$</td></tr><tr><td>实现</td><td>规约（specification）与它的实现之间的关系</td><td>———$\vartriangleright$</td></tr></tbody></table></div><h2 id="动态建模"><a href="#动态建模" class="headerlink" title="动态建模"></a>动态建模</h2><p>动态建模用来描述系统的动态行为，显示对象在运行期间不同时刻的动态交互。UML中用状态机图、活动图、顺序图、通信图和协作图来建立动态模型。</p><p><em>状态机图</em></p><p>画状态机图的步骤：</p><ol><li>列出对象具有的所有状态</li><li>标识导致状态转换的事件</li><li>为状态和迁移定义状态变量和动作</li></ol><p><em>活动图</em></p><p><em>顺序图</em></p><p><em>通信图</em></p><p><em>协作图</em></p><h2 id="物理体系结构建模"><a href="#物理体系结构建模" class="headerlink" title="物理体系结构建模"></a>物理体系结构建模</h2><p>系统的体系结构用来描述系统各部分的结构、接口以及它们用于通信的机制。</p><p>物理体系结构涉及系统的详细描述（根据系统所包含的硬件和软件），显示了硬件的结构，包括不同的结点以及这些结点之间如何连接，还表示了代码模块的物理结构和依赖关系，并展示了对进程、程序、构建等软件在运行时的物理分配。</p><p><em>回答的问题</em></p><ol><li>类和对象物理上位于哪个程序或进程？</li><li>程序和进程在哪台计算机上执行？</li><li>系统中有哪些计算机和其他硬件设备？它们如何相互连接？</li><li>不同的代码文件之间有什么依赖关系？如果一个指定文件被改变，那么那些其他文件需要重新编译？</li></ol><p>UML使用中物理体系结构用构件图、内部结构图和部署图来描述</p><p><em>构件图</em>：显示构件类型定义、内部结构和依赖。</p><p><em>部署图</em>：部署图展示了运行时处理结点和在结点上生存的制品的配置。</p>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>软件工程 第2章 系统工程</title>
      <link href="2021/04/01/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B-%E7%AC%AC2%E7%AB%A0-%E7%B3%BB%E7%BB%9F%E5%B7%A5%E7%A8%8B/"/>
      <url>2021/04/01/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B-%E7%AC%AC2%E7%AB%A0-%E7%B3%BB%E7%BB%9F%E5%B7%A5%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="基于计算机的系统"><a href="#基于计算机的系统" class="headerlink" title="基于计算机的系统"></a>基于计算机的系统</h2><p>软件、硬件、人员、数据库、文档、规程</p><h2 id="系统工程的任务"><a href="#系统工程的任务" class="headerlink" title="系统工程的任务"></a>系统工程的任务</h2><ol><li>识别用户的要求</li><li>系统建模和模拟<ul><li>硬件系统模型</li><li>软件系统模型</li><li>人机接口模型</li><li>数据模型</li></ul></li><li>成本估算及进度安排</li><li>可行性分析</li><li>生成系统规格说明</li></ol><h2 id="可行性分析"><a href="#可行性分析" class="headerlink" title="可行性分析"></a>可行性分析</h2><p><strong>经济可行性</strong></p><p>经济可行性主要进行成本效益分析，从经济角度，确定系统是否值得开发。</p><p><strong>技术可行性</strong></p><p>技术可行性主要根据系统的功能、性能、约束条件等，分析在现有资源和技术条件下系统能否实现。包括风险分析、资源分析和技术分析。</p><p><strong>法律可行性</strong></p>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>软件工程 第4章 设计工程</title>
      <link href="2021/04/01/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B-%E7%AC%AC4%E7%AB%A0-%E8%AE%BE%E8%AE%A1%E5%B7%A5%E7%A8%8B/"/>
      <url>2021/04/01/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B-%E7%AC%AC4%E7%AB%A0-%E8%AE%BE%E8%AE%A1%E5%B7%A5%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="软件设计工程概述"><a href="#软件设计工程概述" class="headerlink" title="软件设计工程概述"></a>软件设计工程概述</h2><p>软件设计时是把软件需求变成软件表示的过程</p><p><strong>任务</strong></p><ol><li>数据/类设计</li><li>体系结构设计</li><li>接口设计</li><li>部件级设计</li></ol><p><strong>目标</strong></p><p><strong>过程</strong></p><ol><li>制定规范</li><li>体系结构和接口设计</li><li>数据/类设计</li><li>部件级（过程）设计</li><li>编写设计文档</li><li>设计评审</li></ol><h2 id="软件设计原则"><a href="#软件设计原则" class="headerlink" title="软件设计原则"></a>软件设计原则</h2><ul><li>抽象与逐步求精</li><li>模块化</li><li>信息隐藏</li><li>功能独立<ul><li>内聚：一个模块内部各个元素彼此结合的紧密程度的度量</li><li>耦合：模块之间的相对独立性的度量</li></ul></li></ul><h2 id="软件体系结构设计"><a href="#软件体系结构设计" class="headerlink" title="软件体系结构设计"></a>软件体系结构设计</h2><p><strong>软件体系结构的风格</strong></p><ol><li>以数据为中心的体系结构</li><li>数据流风格的体系结构</li><li>调用和返回风格的体系结构</li><li>面向对象风格的体系结构</li><li>层次式风格的体系结构</li></ol><h2 id="部件级设计技术"><a href="#部件级设计技术" class="headerlink" title="部件级设计技术"></a>部件级设计技术</h2><p>结构化程序设计</p><p><strong>图形表示法</strong></p><ul><li>程序流程图</li><li>N-S图</li><li>PAD</li></ul><p><strong>判定表</strong></p><p><strong>设计语言PDL</strong></p><p>一种用于描述功能部件的算法设计和处理细节的语言，是一种伪代码</p><h2 id="设计规约与设计评审"><a href="#设计规约与设计评审" class="headerlink" title="设计规约与设计评审"></a>设计规约与设计评审</h2><p>软件设计阶段的主要输出是设计规约，为了确保文档的质量，还必须对设计文档进行评审</p>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>软件工程 第5章 结构化分析与设计</title>
      <link href="2021/04/01/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B-%E7%AC%AC5%E7%AB%A0-%E7%BB%93%E6%9E%84%E5%8C%96%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/"/>
      <url>2021/04/01/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B-%E7%AC%AC5%E7%AB%A0-%E7%BB%93%E6%9E%84%E5%8C%96%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="结构化分析方法的概述"><a href="#结构化分析方法的概述" class="headerlink" title="结构化分析方法的概述"></a>结构化分析方法的概述</h2><ol><li><p>抽象（自底向上）和分解（自顶向下）</p></li><li><p>结构化分析的过程</p><ol><li>理解当前的现实环境，获得当前系统的具体模型</li><li>从当前系统的具体模型抽象出当前系统的逻辑模型</li><li>分析目标系统与当前系统逻辑上的差别，建立目标系统的逻辑模型</li><li>为目标系统的逻辑模型作补充</li></ol></li><li><p>结构化分析模型的描述形式</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210401160457.png" alt="image-20210401160457326"></p></li></ol><h2 id="数据流图（DFD）"><a href="#数据流图（DFD）" class="headerlink" title="数据流图（DFD）"></a>数据流图（DFD）</h2><p>描述输入数据流到输出数据流的变换（即加工），用于对系统的功能建模</p><p><strong>数据流图的图形表示</strong></p><ol><li>基本图形元素</li></ol><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210401161352.png" alt="image-20210401161352705"></p><p>例：图书馆订购系统的DFD</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210401161621.png" alt="image-20210401161621374"></p><ol><li><p>扩充符号</p><ol><li>星号 * ：表示数据流之间存在”与“关系</li><li>加号 + ：表示数据流之间存在”或“关系</li><li>异或 $\bigoplus$：表示数据流之间存在”异或“（互斥）关系</li></ol></li><li><p>层次结构</p><p>每张图的加工数控制在 7$\pm$2</p></li></ol><p><strong>分层数据流的画法</strong></p><ol><li>画出系统的输入和输出</li><li>画出系统内部</li><li>画出加工内部</li><li>重复第三步，直至每个尚未分解的加工都足够简单</li></ol><h2 id="分层数据流图的审查"><a href="#分层数据流图的审查" class="headerlink" title="分层数据流图的审查"></a>分层数据流图的审查</h2><p><strong>一致性和完整性</strong></p><p><em>一致性</em></p><ol><li>父图与子图平衡</li><li>数据守恒</li><li>局部文件</li><li>一个加工的输出数据流不能与该加工的输入数据流同名</li></ol><p><em>完整性</em></p><ol><li>每个加工至少有一个输入数据流和一个输出数据流</li><li>在整套分层数据流图中，每个文件至少有一个加工该读文件，有另一个加工写该文件</li><li><p>分层数据流图中的每个数据流和文件都必须命名（除了流入或流出文件的数据流），并保持与数据字典一致</p></li><li><p>分层DFD中的每个基本加工都应该有一个加工规约</p></li></ol><p><strong>构造分层DFD时需要注意的问题</strong></p><ol><li>适当命名</li><li>画数据流而不是画控制流</li><li>避免一个加工有过多的数据流</li><li>分解尽可能均匀</li><li>先考虑稳定状态，忽略琐碎的枝节</li><li>随时准备重画</li></ol><p><strong>分解程度</strong></p><h2 id="数据字典"><a href="#数据字典" class="headerlink" title="数据字典"></a>数据字典</h2><p>数据流图 + 数据字典 = 软件逻辑模型</p><p><em>字典条目的种类</em></p><p>数据流、文件、数据项、加工、源或宿</p><p><em>字典数据中使用的描述符号</em></p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210401185616.png" alt="image-20210401185616134"></p><p><strong>字典条目</strong></p><p>DFD中的每个元素都对应一个数据字典条目的描述，不同种类的有不同的描述内容。</p><ol><li>数据流条目</li><li>文件条目</li><li>数据项条目</li><li>加工条目</li><li>源或宿条目</li><li>别名条目</li></ol><h2 id="描述基本加工的小说明"><a href="#描述基本加工的小说明" class="headerlink" title="描述基本加工的小说明"></a>描述基本加工的小说明</h2><p>DFD每个基本加工都用一条小说明进行描述，小说明就是基本加工的加工规约。</p><p>加工逻辑的描述方法有结构化语言、判定表和判定树。</p><h2 id="结构化设计概述"><a href="#结构化设计概述" class="headerlink" title="结构化设计概述"></a>结构化设计概述</h2><p>结构化设计（SD）是将结构化分析得到的数据流图映射成软件体系结构的一种设计方法，SD强调模块化、自顶向下逐步求精、信息隐蔽、高内聚低耦合等设计准则。</p><p><strong>结构图</strong></p><p>结构化设计方法中用结构图描述软件系统的体系结构，指出一个软件系统由哪些模块组成，以及模块之间的调用关系</p><p><strong>启发式设计策略</strong></p><ol><li>改造程序结构图，降低耦合度，提高内聚度</li><li>避免高扇出，并随着深度的增加，力求高扇入</li><li>模块的影响范围应限制在该模块的控制范围内</li><li>降低模块结构的复杂程度和冗余程度，提高一致性</li><li>模块的功能应是可预测的，避免对模块施加过多的限制</li><li>尽可能设计单入口和单出口的模块</li></ol><p><strong>结构化设计的步骤</strong></p><ol><li>建立初始结构图</li><li>对结构图的改进</li><li>书写设计文档</li><li>设计评审</li></ol><h2 id="数据流图到软件体系结构的映射"><a href="#数据流图到软件体系结构的映射" class="headerlink" title="数据流图到软件体系结构的映射"></a>数据流图到软件体系结构的映射</h2><p>结构化设计是将结构化分析的结果（数据流图）映射成软件的体系结构（结构图）。根据信息流的特点，可将数据流图分为数据流图和事务型数据流图，其对应的映射分别成为变化分析和事务分析。</p><p><strong>信息流</strong>：变换流和事务流</p><p><strong>数据流图映射到结构图的步骤</strong></p><ol><li>复审和精细数据流图</li><li>确定数据流图类型</li><li>将DFD映射成初始结构图</li><li>改进初始结构图</li></ol><p><strong>变换分析</strong></p><p>将变换型的DFD映射成初始的结构图</p><ol><li>划定输入流和输出流的边界，确定变换中心</li><li>进行第一级分解</li><li>进行第二级分解</li><li>标注输入输出信息</li></ol><p><strong>事务分析</strong>：确定事务中心、将DFD映射成事务性的结构图、分解每条动作路径的结构图</p><p><strong>分层DFD的映射</strong></p><h2 id="初始结构图的改进"><a href="#初始结构图的改进" class="headerlink" title="初始结构图的改进"></a>初始结构图的改进</h2><p>技巧：减少模块间的耦合度、消除重复功能、消除”管道模块“、模块大小适中、避免高扇出、考虑全局</p>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>软件工程 第3章 需求工程</title>
      <link href="2021/04/01/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B-%E7%AC%AC3%E7%AB%A0-%E9%9C%80%E6%B1%82%E5%B7%A5%E7%A8%8B/"/>
      <url>2021/04/01/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B-%E7%AC%AC3%E7%AB%A0-%E9%9C%80%E6%B1%82%E5%B7%A5%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="需求工程概述"><a href="#需求工程概述" class="headerlink" title="需求工程概述"></a>需求工程概述</h2><p>六个阶段：需求获取、需求分析和协商、系统建模、需求规约、需求验证和需求管理。</p><h2 id="需求获取"><a href="#需求获取" class="headerlink" title="需求获取"></a>需求获取</h2><p><strong>软件需求</strong></p><p>功能、性能、用户或人的因素、环境、界面、文档、数据、资源使用、安全保密、可靠性、软件成本消耗与进度开发、其他非功能性需求</p><p><strong>需求获取方法与策略</strong></p><p>建立顺畅的通信路径、访谈与调查、观察用户操作流程、组成联合小组、用例</p><h2 id="需求分析、协商与建模"><a href="#需求分析、协商与建模" class="headerlink" title="需求分析、协商与建模"></a>需求分析、协商与建模</h2><p><strong>需求分析原则</strong></p><ol><li>必须能够表示和理解问题的信息域</li><li>必须能够定义软件将完成的功能</li><li>必须能够表示软件的行为（作为外部事件的结果）</li><li>必规划分描述数据、功能和行为的模型， 从而可以分层次地揭示细节</li><li>分析过程应该从要素信息移向细节信息</li></ol><p><strong>需求协商</strong></p><p><strong>需求建模</strong></p><ul><li>面向数据流的结构化分析方法（SA）</li><li>面向数据结构的分析方法</li><li>面向对象的分析方法（OOA）</li></ul><h2 id="需求规约与验证"><a href="#需求规约与验证" class="headerlink" title="需求规约与验证"></a>需求规约与验证</h2><p><strong>需求规约</strong></p><p>软件需求规约框架</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210401094605.png" alt="image-20210401094558294"></p><p><strong>需求验证</strong></p><p>检验需求是否能反映用户的意愿</p><h2 id="需求管理"><a href="#需求管理" class="headerlink" title="需求管理"></a>需求管理</h2>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库引论 第四章 关系数据库的规范化设计</title>
      <link href="2021/03/30/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%95%E8%AE%BA%20%E7%AC%AC%E5%9B%9B%E7%AB%A0%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%A7%84%E8%8C%83%E5%8C%96%E8%AE%BE%E8%AE%A1/"/>
      <url>2021/03/30/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%95%E8%AE%BA%20%E7%AC%AC%E5%9B%9B%E7%AB%A0%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%A7%84%E8%8C%83%E5%8C%96%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="4-1-关系模式的设计问题"><a href="#4-1-关系模式的设计问题" class="headerlink" title="4.1 关系模式的设计问题"></a>4.1 关系模式的设计问题</h2><p><strong>关系模型的外延和内涵</strong></p><ul><li>外延：关系、表或当前值</li><li>内涵：对数据的定义以及数据完整性约束（静态约束和动态约束）的定义</li></ul><p><strong>模式冗余和异常问题</strong></p><p>数据的冗余可能会引起操作异常</p><p><strong>关系模式的非形式化设计准则</strong></p><ol><li>应尽可能只包含有直接联系的属性</li><li>应尽可能使得相关关系中不出现插入、删除和修改操作异常现象</li><li>应尽可能使得相应关系中避免放置尽可能为空值的属性</li><li>尽可能使得关系的等值连接在主键和外键属性上</li></ol><p><strong>符号规定</strong></p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210330184809.png" alt="image-20210330184801036"></p><h2 id="4-2-函数依赖"><a href="#4-2-函数依赖" class="headerlink" title="4.2 函数依赖"></a>4.2 函数依赖</h2><p><strong>函数依赖（FD）的定义</strong></p><p>关系模式R（U），X和Y是属性集U的子集，函数依赖是形为X-&gt;Y的一个命题，只要r是R的当前关系，对r中任意两个元组t和s，都有t[X] = s[X]蕴含t[Y] = s[Y]，那么称FD X -&gt; Y在关系模式R（U）中成立</p><p><strong>FD的逻辑蕴含</strong></p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210402125442.png" alt="image-20210402125442774"></p><p><strong>FD的推理规则</strong></p><p>U是关系模式R中的属性集，F是R上成立的只涉及U中属性的函数依赖集，FD的推理规则有以下三条：</p><p>A1 自反性 $若Y\subseteq X \subseteq U,则X\rightarrow Y在R上成立$</p><p>A2 增广性 $若X\rightarrow Y,且Z\subseteq U,则XZ\rightarrow YZ在R上成立$</p><p>A3 传递性 $若X \rightarrow Y,Y \rightarrow Z,则 X\rightarrow Z在R上成立$</p><p>其他五条规则</p><p>A4 合并性  $\lbrace X\rightarrow Y,X \rightarrow Z \rbrace \models X \rightarrow YZ $</p><p>A5 分解性 $\lbrace X \rightarrow Y,Z \subseteq Y \rbrace \models X \rightarrow Z$</p><p>A6 伪传递性 $\lbrace X \rightarrow Y, WY \rightarrow Z \rbrace \models WX \rightarrow Z$</p><p>A7 复合性 $\lbrace X \rightarrow Y, W \rightarrow Z \rbrace \models XW \rightarrow YZ$</p><p>A8  $\lbrace X \rightarrow Y, W \rightarrow Z \rbrace \models X\bigcup (W - Y) \rightarrow YZ$</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210402125908.png" alt="image-20210402125908142"></p><p><strong>FD和关键码的联系</strong></p><p><em>超键和候选键</em></p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210402151448.png" alt="image-20210402151448761"></p><p><strong>属性集的闭包</strong></p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210402151645.png" alt="image-20210402151645328"></p><p><strong>FD推理规则的完备性</strong></p><p><em>正确性</em>：从FD集F使用推理规则集推出的FD必定在F+中</p><p><em>完备性</em>：F+中的FD都能从F集使用推理规则导出</p><p>FD推理规则{A1,A2,A3}是完备的</p><p><strong>FD集的最小依赖集</strong></p><p>若F+=G+，则称F和G是等价的函数依赖集</p><p><em>最小依赖集Fmin</em></p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210402151940.png" alt="image-20210402151940110"></p><h2 id="4-3-模式的分解特性"><a href="#4-3-模式的分解特性" class="headerlink" title="4.3 模式的分解特性"></a>4.3 模式的分解特性</h2><p><strong>模式分解问题</strong></p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210402155820.png" alt="image-20210402155820123"></p><p><em>泛关系模式</em></p><p>现实问题的所有属性组成的关系模式（包括属性集和属性集上的数据完整性约束）称为泛关系模式，关系r是关系模式的当前值，是元组的集合，称为泛关系</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210402160117.png" alt="image-20210402160117469"></p><p><strong>无损分解</strong></p><p>r和$\sigma$是否等价</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210402160225.png" alt="image-20210402160224973"></p><p><em>幂等性</em></p><p><strong>无损分解的测试方法</strong></p><p><em>算法如下：</em></p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210404124444.png" alt="image-20210404124437456"></p><script type="math/tex; mode=display">定理:设\rho=\{R1,R2\}是关系模式R的一个分解，F是R上成立的FD集，那么分解\rho相对于F是无损分解的充分条件是\\(R1\bigcap R2)\rightarrow (R1-R2)(或(R2-R1))</script><script type="math/tex; mode=display">定理:如果FD\,X\rightarrow Y在模式R上成立，且X\bigcap Y=\varphi，\\那么R分解成\rho=\{R-Y,XY\}是无损分解</script><p><strong>保持函数依赖的分解</strong></p><p>F和{F1,F2,…,Fn}是否等价</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210404131605.png" alt="image-20210404131605106"></p><p><strong>模式分解与模式等价问题</strong></p><p>两个数据库的等价包括数据等价和依赖等价两个方面</p><ul><li>数据等价指两个数据库实例应标识同样的信息内容，用“无损分解”衡量。如果是无损分解，那么对泛关系反复的投影和连接都不会丢失信息。</li><li>依赖等价是指两个数据库模式有相同的依赖集闭包。在依赖集闭包相等的情况下，数据的语义是不会出差错的。</li></ul><h2 id="4-4-关系模式的范式"><a href="#4-4-关系模式的范式" class="headerlink" title="4.4 关系模式的范式"></a>4.4 关系模式的范式</h2><p><strong>第一范式 1NF</strong></p><p>定义：如果关系模式R的每个关系r的属性值都是不可分的原子值，那么称R是第一范式的模式</p><p>满足1NF的称为规范化关系，否则称为非规范化关系</p><p><strong>第二范式</strong></p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210404132729.png" alt="image-20210404132729028"></p><p>分解成2NF模式集的算法</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210404132814.png" alt="image-20210404132814460"></p><p><strong>第三范式</strong></p><p>定义：如果$X\rightarrow Y,Y\rightarrow A$，且$Y\nrightarrow X$ 和$A\notin Y$，那么称$X\rightarrow A$是传递依赖（A传递依赖于X）</p><p>定义：如果关系模式R是1NF，且每个非主属性都不传递于R的候选键，那么称R是第三范式（3NF）的模式，如果数据库模式种每个关系模式都是3NF，则称其为3NF的数据库模式。</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210404134254.png" alt="image-20210404134254589"></p><p>定理：如果R是3NF模式，那么R也是2NF模式</p><p>定理：设关系模式R，当R上每一个FD X-&gt;A都满足下列三个条件之一时</p><ol><li>A∈X</li><li>X是R的超键</li><li>A是主属性</li></ol><p>则关系模式R就是3NF模式</p><p><strong>BCNF</strong></p><p>定义：如果关系模式R是1NF，且每个属性都不传递依赖于R的候选键，那么称R是BCNF模式。如果数据库模式中每个关系模式都是BCNF，则称为BCNF的数据库模式。</p><p>定理：如果R是BCNF模式，那么R也是3NF模式</p><p>定义：设F是关系模式R的FD集，如果对F中每个非平凡的FD X-&gt;Y，都有X是R的超键，那么称R是BCNF的模式</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210404134912.png" alt="image-20210404134912083"></p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210404134944.png" alt="image-20210404134944537"></p><p><strong>模式设计方法的原则</strong></p><ul><li>数据库设计者在进行关系数据库的设计时，应作权衡，尽可能使数据库保持最好的特性。一般尽可能设计成BCNF模式集。如果设计成BCNF模式集时达不到FD的特点，那么只能降低要求，设计成3NF模式集，以求达到保持FD和无损分解的特点。</li><li>模式分解并不单指把泛关系模式分解成数据库模式，也可以把数据库模式转换成另一个数据库模式，分解和转换的关键是要“等价”地分解。一个好的模式设计方法应符合三条原则：表达性、分离性和最小冗余性。</li></ul><h2 id="4-5-模式的进一步规范化处理"><a href="#4-5-模式的进一步规范化处理" class="headerlink" title="4.5 模式的进一步规范化处理"></a>4.5 模式的进一步规范化处理</h2><p>FD还不足以描绘现实世界中数据之间的全部联系，有些联系就要用其他数据来刻画，例如多值依赖或连接依赖。</p><p><em>第四范式</em></p><p>（是4NF的模式肯定是BCNF模式）</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第七章 快速排序</title>
      <link href="2021/03/24/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA/%E7%AC%AC%E4%B8%83%E7%AB%A0%20%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
      <url>2021/03/24/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA/%E7%AC%AC%E4%B8%83%E7%AB%A0%20%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="快速排序的描述"><a href="#快速排序的描述" class="headerlink" title="快速排序的描述"></a>快速排序的描述</h2><p>使用分治的思想，分成三步</p><ol><li>分解：分成A[p…q-1]和A[q+1…r]，此时A[q]已经被放在了正确的位置，A[q]：pivot</li><li>解决：通过递归调用对子数组排序</li><li>合并：因为子数组已经有序，故不需要合并操作</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">QUICKSORT(A,p,r)</span><br><span class="line">if p &lt; r</span><br><span class="line">q &#x3D; PARTITION(A,p,r)</span><br><span class="line">QUICKSORT(A,p,q-1)</span><br><span class="line">QUICKSORT(A,q+1,r)</span><br><span class="line"></span><br><span class="line">PARTITION(A,p,r)</span><br><span class="line">x &#x3D; A[r]</span><br><span class="line">i &#x3D; p - 1</span><br><span class="line">for j &#x3D; p to r - 1</span><br><span class="line">if A[j] &lt;&#x3D; x</span><br><span class="line">i &#x3D; i + 1</span><br><span class="line">exchange A[i] with A[j]</span><br><span class="line">exchange A[i+1] with A[r]</span><br><span class="line">return i + 1</span><br></pre></td></tr></table></figure><h2 id="快速排序的性能"><a href="#快速排序的性能" class="headerlink" title="快速排序的性能"></a>快速排序的性能</h2><p>依赖于划分是否平衡，如果平衡，性能近似于归并排序；如果不平衡，性能近似于插入排序</p><ul><li><p>最坏情况划分（完全不平衡）</p><script type="math/tex; mode=display">T(n)=T(n-1)+T(0)+\Theta(n)</script><script type="math/tex; mode=display">T(n)=\Theta(n^2)</script></li></ul><ul><li>最好情况划分（完全平衡）<script type="math/tex; mode=display">T(n)=2T(n/2)+\Theta(n)</script></li></ul><script type="math/tex; mode=display">  T(n)=\Theta(n\lg n)</script><ul><li>平均情况的划分：平均情况事实上接近于最好情况（例如数组长度9：1时）</li></ul><h2 id="快速排序的随机化版本"><a href="#快速排序的随机化版本" class="headerlink" title="快速排序的随机化版本"></a>快速排序的随机化版本</h2><p>显示地对输入进行重新排列，使得算法实现随机化</p><p>在划分前进行一次交换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RANDOMIZED-PARTITION(A,p,r)</span><br><span class="line">i &#x3D; RANDOM(p,r)</span><br><span class="line">exchange A[r] with A[i]</span><br><span class="line">return PARTITION(A,p,r)</span><br></pre></td></tr></table></figure><h2 id="快速排序分析"><a href="#快速排序分析" class="headerlink" title="快速排序分析"></a>快速排序分析</h2><p><strong>最坏情况分析</strong></p><p>$O(n^2)$</p><p><strong>期望运行时间</strong></p><p>$O(n\lg n)$</p><p>证明过程略</p>]]></content>
      
      
      <categories>
          
          <category> 算法导论 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第六章 堆排序</title>
      <link href="2021/03/24/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA/%E7%AC%AC%E5%85%AD%E7%AB%A0%20%E5%A0%86%E6%8E%92%E5%BA%8F/"/>
      <url>2021/03/24/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA/%E7%AC%AC%E5%85%AD%E7%AB%A0%20%E5%A0%86%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>堆排序时间复杂度：$O(n\lg n)$，和归并排序一样</p><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><p>一个近似完全的二叉树</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210324140442.png" alt="image-20210324140441665"></p><ul><li>根节点A[1]</li><li>A[i]的父节点A[$\lfloor i/2 \rfloor$]</li><li>A[i]左子节点A[2i]</li><li>A[i]右子节点A[2i+1]</li></ul><p>最大堆：子节点小于等于父节点，根节点最大，用于堆排序</p><p>(一个叶子节点本身是一个最大堆)</p><p>最小堆：子节点大于等于父节点，根节点最小，用于构造优先级队列</p><p>n个节点的堆的高度 $\lfloor \lg n \rfloor$</p><h2 id="维护堆的性质"><a href="#维护堆的性质" class="headerlink" title="维护堆的性质"></a>维护堆的性质</h2><p>（最大堆）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">MAX-HEAPIFY(A,i) &#x2F;&#x2F; Sub-tree rooted at node i</span><br><span class="line">l &#x3D; LEFT(i)</span><br><span class="line">r &#x3D; RIGHT(i)</span><br><span class="line">if l &lt; heap-size[A] and A[l] &gt; A[i]</span><br><span class="line">then largest &#x3D; l</span><br><span class="line">else largest &#x3D; i</span><br><span class="line">    if r &lt;&#x3D; heap-size[A] and A[r] &gt; A[largest]</span><br><span class="line">    then largest &#x3D; r</span><br><span class="line">    if largest !&#x3D; i</span><br><span class="line">    then exchange A[i] and A[largest]</span><br><span class="line">    MAX-HEAPIFY(A,largest)</span><br></pre></td></tr></table></figure><h2 id="建堆"><a href="#建堆" class="headerlink" title="建堆"></a>建堆</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BUILD-MAX-HEAP(A)</span><br><span class="line"> heap-size[A] &#x3D; length[A]</span><br><span class="line"> for i &#x3D; length[A]&#x2F;2 downto 1</span><br><span class="line">  do MAX-HEAPIFY(A,i)</span><br></pre></td></tr></table></figure><p>时间代价 $O(n\lg n)$</p><h2 id="堆排序算法"><a href="#堆排序算法" class="headerlink" title="堆排序算法"></a>堆排序算法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HEAPSORT(A)</span><br><span class="line">BUILD-MAX-HEAP(A)</span><br><span class="line">for i &#x3D; length[A] downto 2</span><br><span class="line">do exchange A[1] and A[i]</span><br><span class="line">heap-size[A] &#x3D; heap-size[A] - 1</span><br><span class="line">MAX-HEAPIFY(A,1)</span><br></pre></td></tr></table></figure><p>时间代价 $O(n\lg n)$</p><h2 id="优先级队列"><a href="#优先级队列" class="headerlink" title="优先级队列"></a>优先级队列</h2><p>一种用来维护一组元素构成的集合S的数据结构，其中每个元素有一个关键字key。</p><p>（最大优先队列）支持的操作：</p><ul><li>INSERT(S, x)，把元素x插入集合S中</li><li>MAXINUM(S)，返回S中具有最大键字的元素</li><li>EXTRACT-MAX(S)，去掉并返回S中具有最大键字的元素</li><li>INCREASE-KEYS(S, x, k)，将元素x的关键字增加到k（比原来大）</li></ul><p>相应的也有最小优先队列</p>]]></content>
      
      
      <categories>
          
          <category> 算法导论 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库引论 第五章 数据库设计和ER模型</title>
      <link href="2021/03/23/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%95%E8%AE%BA%20%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E5%92%8CER%E6%A8%A1%E5%9E%8B/"/>
      <url>2021/03/23/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%95%E8%AE%BA%20%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E5%92%8CER%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="数据库设计概论"><a href="#数据库设计概论" class="headerlink" title="数据库设计概论"></a>数据库设计概论</h2><p>数据库生存期：</p><p>规划、需求分析、概念设计、逻辑设计、物理设计、实现、运行和维护</p><h2 id="数据库设计全过程"><a href="#数据库设计全过程" class="headerlink" title="数据库设计全过程"></a>数据库设计全过程</h2><p><strong>规划</strong></p><p>系统调查、可行性分析、确定数据库系统的总目标和制定项目开发计划</p><p><strong>需求分析</strong></p><ul><li>分析用户活动产生，产生业务流程图（TFD）</li><li>确定系统范围，产生系统范围图</li><li>分析用户活动涉及的数据，产生数据流图（DFD）</li><li>分析系统数据，产生数据字典</li></ul><p><strong>概念设计</strong></p><p>从每个用户的角度出发定义ER图，然后合并</p><p><strong>逻辑设计</strong></p><p>根据概念模式转换成逻辑模式、模式评价、修正</p><p><strong>物理设计</strong></p><ul><li>存储记录结构设计</li><li>确定数据存放位置</li><li>存取方法的设计</li><li>完整性和安全性考虑</li><li>程序设计</li></ul><p><strong>数据库实现</strong></p><ul><li>用DDL定义数据库结构</li><li>组织数据入库</li><li>编制与调试应用程序</li><li>数据库试运行<ul><li>功能测试</li><li>性能测试（时空代价）</li></ul></li></ul><p><strong>数据库的运行与维护工作</strong></p><ul><li>数据库的转储和恢复</li><li>数据库安全性、完整性控制</li><li>数据库性能的监督、分析和改进</li><li>数据库的重组织和重构造</li></ul><h2 id="ER模型"><a href="#ER模型" class="headerlink" title="ER模型"></a>ER模型</h2><p><strong>基本元素</strong>：实体、联系、属性、例子</p><h2 id="ER模型到关系模型的转换"><a href="#ER模型到关系模型的转换" class="headerlink" title="ER模型到关系模型的转换"></a>ER模型到关系模型的转换</h2><p>将每个实体类型转换成一个关系模式，实体的属性即为关系模式的属性，实体标识符即为关系模式的键。</p><p>二元联系关系的转换：</p><ul><li>实体联系1：1 …</li><li>实体联系1：N …</li><li>实体联系M：N …</li></ul><h2 id="ER模型实例分析"><a href="#ER模型实例分析" class="headerlink" title="ER模型实例分析"></a>ER模型实例分析</h2><p>略</p><h2 id="ER模型的扩充"><a href="#ER模型的扩充" class="headerlink" title="ER模型的扩充"></a>ER模型的扩充</h2><p><strong>弱实体</strong></p><p>例如：职工的亲属的关系依附于职工，是弱实体</p><p><strong>子类实体与超类实体</strong></p><p>继承性、子类本身比超类具有更多属性、子类和超类有相同的标识符</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>32位ALU设计</title>
      <link href="2021/03/18/%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C/32%E4%BD%8DALU%E8%AE%BE%E8%AE%A1/"/>
      <url>2021/03/18/%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C/32%E4%BD%8DALU%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="设计思路及代码"><a href="#设计思路及代码" class="headerlink" title="设计思路及代码"></a>设计思路及代码</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> ALU32(</span><br><span class="line">ALUcont,A,B,</span><br><span class="line">zero,result</span><br><span class="line">);</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] A,B;</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">2</span>:<span class="number">0</span>] ALUcont;</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span>[<span class="number">31</span>:<span class="number">0</span>] result;</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> zero;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">always</span>@(*)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">case</span>(ALUcont)</span><br><span class="line">        <span class="comment">//AND</span></span><br><span class="line">        <span class="number">3&#x27;b000</span>:</span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">            result=A&amp;B;</span><br><span class="line">            zero=(result==<span class="number">0</span>)?<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="comment">//OR</span></span><br><span class="line">        <span class="number">3&#x27;b001</span>:</span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">            result=A|B;</span><br><span class="line">            zero=(result==<span class="number">0</span>)?<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="comment">//+</span></span><br><span class="line">        <span class="number">3&#x27;b010</span>:</span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">            result=A+B;</span><br><span class="line">            zero=(result==<span class="number">0</span>)?<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="comment">//not used</span></span><br><span class="line">        <span class="comment">//3&#x27;b011:</span></span><br><span class="line">        <span class="comment">//AND !</span></span><br><span class="line">        <span class="number">3&#x27;b100</span>:</span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">         result=A&amp;(~B);</span><br><span class="line">            zero=(result==<span class="number">0</span>)?<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="comment">//OR !</span></span><br><span class="line">        <span class="number">3&#x27;b101</span>:</span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">            result=A|(~B);</span><br><span class="line">            zero=(result==<span class="number">0</span>)?<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="comment">//-</span></span><br><span class="line">        <span class="number">3&#x27;b110</span>:</span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">            result=A-B;</span><br><span class="line">            zero=(A==B)?<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="comment">//SLT</span></span><br><span class="line">        <span class="number">3&#x27;b111</span>:</span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">                <span class="keyword">if</span>(A[<span class="number">31</span>]==<span class="number">1</span>&amp;&amp;B[<span class="number">31</span>]==<span class="number">0</span>)</span><br><span class="line">                    result=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(A[<span class="number">31</span>]==<span class="number">0</span>&amp;&amp;B[<span class="number">31</span>]==<span class="number">0</span>)</span><br><span class="line">                    result=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span> </span><br><span class="line">                    result=(A&lt;B)?<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">                zero=(result==<span class="number">0</span>)?<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">endcase</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span>        </span><br><span class="line">    </span><br></pre></td></tr></table></figure><h2 id="测试代码及表格补全"><a href="#测试代码及表格补全" class="headerlink" title="测试代码及表格补全"></a>测试代码及表格补全</h2><div class="table-container"><table><thead><tr><th>Test</th><th>ALUcont</th><th>A</th><th>B</th><th>result</th><th>zero</th></tr></thead><tbody><tr><td>ADD 0+0</td><td>2</td><td>00000000</td><td>00000000</td><td>00000000</td><td>1</td></tr><tr><td>ADD 0+(-1)</td><td>2</td><td>00000000</td><td>FFFFFFFF</td><td>FFFFFFFF</td><td>0</td></tr><tr><td>ADD 1+(-1)</td><td>2</td><td>00000001</td><td>FFFFFFFF</td><td>00000000</td><td>1</td></tr><tr><td>ADD FF+1</td><td>2</td><td>000000FF</td><td>00000001</td><td><u>00000100</u></td><td><u>0</u></td></tr><tr><td>SUB 0-0</td><td>6</td><td>00000000</td><td>00000000</td><td>00000000</td><td>1</td></tr><tr><td>SUB 0-(-1)</td><td>6</td><td>00000000</td><td>FFFFFFFF</td><td>00000001</td><td>0</td></tr><tr><td>SUB 1-1</td><td>6</td><td>00000001</td><td><u>00000001</u></td><td><u>00000000</u></td><td><u>1</u></td></tr><tr><td>SUB 100-1</td><td>6</td><td>00000100</td><td><u>00000001</u></td><td><u>000000ff</u></td><td><u>0</u></td></tr><tr><td>SLT 0,0</td><td>7</td><td>00000000</td><td>00000000</td><td>00000000</td><td>1</td></tr><tr><td>SLT 0,1</td><td>7</td><td>00000000</td><td><u>00000001</u></td><td>00000001</td><td>0</td></tr><tr><td>SLT 0,-1</td><td>7</td><td>00000000</td><td><u>FFFFFFFF</u></td><td><u>00000000</u></td><td><u>1</u></td></tr><tr><td>SLT 1,0</td><td>7</td><td>00000001</td><td><u>00000000</u></td><td><u>00000000</u></td><td><u>1</u></td></tr><tr><td>SLT -1,0</td><td>7</td><td>FFFFFFFF</td><td><u>00000000</u></td><td><u>00000001</u></td><td><u>0</u></td></tr><tr><td>AND FFFFFFFF,FFFFFFFF</td><td><u>0</u></td><td>FFFFFFFF</td><td>FFFFFFFF</td><td><u>FFFFFFFF</u></td><td><u>0</u></td></tr><tr><td>AND FFFFFFFF,12345678</td><td><u>0</u></td><td>FFFFFFFF</td><td>12345678</td><td>12345678</td><td>0</td></tr><tr><td>AND 12345678,87654321</td><td><u>0</u></td><td>12345678</td><td>87654321</td><td><u>02244220</u></td><td><u>0</u></td></tr><tr><td>AND 00000000,FFFFFFFF</td><td><u>0</u></td><td>00000000</td><td>FFFFFFFF</td><td><u>00000000</u></td><td><u>1</u></td></tr><tr><td>OR FFFFFFFF,FFFFFFFF</td><td><u>1</u></td><td>FFFFFFFF</td><td>FFFFFFFF</td><td><u>FFFFFFFF</u></td><td><u>0</u></td></tr><tr><td>OR 12345678,87654321</td><td><u>1</u></td><td>12345678</td><td>87654321</td><td><u>97755779</u></td><td><u>0</u></td></tr><tr><td>OR 00000000,FFFFFFFF</td><td><u>1</u></td><td>00000000</td><td>FFFFFFFF</td><td><u>FFFFFFFF</u></td><td><u>0</u></td></tr><tr><td>OR 00000000,00000000</td><td><u>1</u></td><td>00000000</td><td>00000000</td><td><u>00000000</u></td><td><u>1</u></td></tr></tbody></table></div><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> ALU32_test(</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">2</span>:<span class="number">0</span>] ALUcont;</span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">31</span>:<span class="number">0</span>] A,B;</span><br><span class="line">    <span class="keyword">wire</span> [<span class="number">31</span>:<span class="number">0</span>] result;</span><br><span class="line">    <span class="keyword">wire</span> zero;</span><br><span class="line">    ALU32 alu(ALUcont,A,B,zero,result); </span><br><span class="line">    <span class="keyword">initial</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">    <span class="comment">//add</span></span><br><span class="line">        ALUcont=<span class="number">3&#x27;b010</span>;</span><br><span class="line">        A=<span class="number">32&#x27;h00000000</span>;</span><br><span class="line">        B=<span class="number">32&#x27;h00000000</span>;</span><br><span class="line">    #<span class="number">20</span> A=<span class="number">32&#x27;h00000000</span>;</span><br><span class="line">        B=<span class="number">32&#x27;hffffffff</span>;</span><br><span class="line">    #<span class="number">20</span> A=<span class="number">32&#x27;h00000001</span>;</span><br><span class="line">        B=<span class="number">32&#x27;hffffffff</span>;</span><br><span class="line">    #<span class="number">20</span> A=<span class="number">32&#x27;h000000ff</span>;</span><br><span class="line">        B=<span class="number">32&#x27;h00000001</span>;</span><br><span class="line">    <span class="comment">//sub</span></span><br><span class="line">    #<span class="number">20</span> ALUcont=<span class="number">3&#x27;b110</span>;</span><br><span class="line">        A=<span class="number">32&#x27;h00000000</span>;</span><br><span class="line">        B=<span class="number">32&#x27;h00000000</span>;</span><br><span class="line">    #<span class="number">20</span> A=<span class="number">32&#x27;h00000000</span>;</span><br><span class="line">        B=<span class="number">32&#x27;hffffffff</span>;</span><br><span class="line">    #<span class="number">20</span> A=<span class="number">32&#x27;h00000001</span>;</span><br><span class="line">        B=<span class="number">32&#x27;h00000001</span>;</span><br><span class="line">    #<span class="number">20</span> A=<span class="number">32&#x27;h00000100</span>;</span><br><span class="line">        B=<span class="number">32&#x27;h00000001</span>;</span><br><span class="line">    <span class="comment">//slt</span></span><br><span class="line">    #<span class="number">20</span> ALUcont=<span class="number">3&#x27;b111</span>;</span><br><span class="line">        A=<span class="number">32&#x27;h00000000</span>;</span><br><span class="line">        B=<span class="number">32&#x27;h00000000</span>;</span><br><span class="line">    #<span class="number">20</span> A=<span class="number">32&#x27;h00000000</span>;</span><br><span class="line">        B=<span class="number">32&#x27;h00000001</span>;</span><br><span class="line">    #<span class="number">20</span> A=<span class="number">32&#x27;h00000000</span>;</span><br><span class="line">        B=<span class="number">32&#x27;hffffffff</span>;</span><br><span class="line">    #<span class="number">20</span> A=<span class="number">32&#x27;h00000001</span>;</span><br><span class="line">        B=<span class="number">32&#x27;h00000000</span>;</span><br><span class="line">    #<span class="number">20</span> A=<span class="number">32&#x27;hffffffff</span>;</span><br><span class="line">        B=<span class="number">32&#x27;h00000000</span>;</span><br><span class="line">    <span class="comment">//and</span></span><br><span class="line">    #<span class="number">20</span> ALUcont=<span class="number">3&#x27;b000</span>;</span><br><span class="line">        A=<span class="number">32&#x27;hffffffff</span>;</span><br><span class="line">        B=<span class="number">32&#x27;hffffffff</span>;</span><br><span class="line">    #<span class="number">20</span> A=<span class="number">32&#x27;hffffffff</span>;</span><br><span class="line">        B=<span class="number">32&#x27;h12345678</span>;</span><br><span class="line">    #<span class="number">20</span> A=<span class="number">32&#x27;h12345678</span>;</span><br><span class="line">        B=<span class="number">32&#x27;h87654321</span>;</span><br><span class="line">    #<span class="number">20</span> A=<span class="number">32&#x27;h00000000</span>;</span><br><span class="line">        B=<span class="number">32&#x27;hffffffff</span>;</span><br><span class="line">    <span class="comment">//or</span></span><br><span class="line">    #<span class="number">20</span> ALUcont=<span class="number">3&#x27;b001</span>;</span><br><span class="line">        A=<span class="number">32&#x27;hffffffff</span>;</span><br><span class="line">        B=<span class="number">32&#x27;hffffffff</span>;</span><br><span class="line">    #<span class="number">20</span> A=<span class="number">32&#x27;h12345678</span>;</span><br><span class="line">        B=<span class="number">32&#x27;h87654321</span>;</span><br><span class="line">    #<span class="number">20</span> A=<span class="number">32&#x27;h00000000</span>;</span><br><span class="line">        B=<span class="number">32&#x27;hffffffff</span>;</span><br><span class="line">    #<span class="number">20</span> A=<span class="number">32&#x27;h00000000</span>;</span><br><span class="line">        B=<span class="number">32&#x27;h00000000</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure><h2 id="仿真波形图"><a href="#仿真波形图" class="headerlink" title="仿真波形图"></a>仿真波形图</h2><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210318081405.png" alt="image-20210318081357819"></p>]]></content>
      
      
      <categories>
          
          <category> 体系结构实验 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第2章 指令集基本原理</title>
      <link href="2021/03/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E4%BD%93%E7%BB%93%E6%9E%84/%E7%AC%AC2%E7%AB%A0%20%E6%8C%87%E4%BB%A4%E9%9B%86%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/"/>
      <url>2021/03/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E4%BD%93%E7%BB%93%E6%9E%84/%E7%AC%AC2%E7%AB%A0%20%E6%8C%87%E4%BB%A4%E9%9B%86%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="指令集体系结构的分类"><a href="#指令集体系结构的分类" class="headerlink" title="指令集体系结构的分类"></a>指令集体系结构的分类</h2><p>最主要的区别：CPU用来存储操作数的存储单元类型</p><ul><li><p>堆栈：堆栈结构</p></li><li><p>累加器：累加器结构</p></li><li><p>通用寄存器：通用寄存器结构（主流结构）</p><ul><li>寄存器-寄存器型（RR） / load-store结构</li><li>寄存器-存储器型（RM）</li><li>存储器存储器型（MM）</li></ul></li></ul><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210312101636.png" alt="image-20210312101629435"></p><p>根据操作数特征细分：<br>| ALU指令中存储器操作数的个数 | ALU指令中操作数的最多个数 | 结构类型 | 实例 |<br>| —————————————- | ————————————- | ———— | —— |<br>| 0                           | 3                         | RR       | MIPS |<br>| 1                           | 2                         | RM       | x86  |<br>| 2                           | 2                         | MM       | VAX  |<br>| 3                           | 3                         | MM       | VAX  |</p><h2 id="存储器寻址"><a href="#存储器寻址" class="headerlink" title="存储器寻址"></a>存储器寻址</h2><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210312103527.png" alt="image-20210312103527682"></p><ul><li>最常用的是较小立即数（有时候也会用到较大立即数，如地址计算）</li><li>指令集结构设计中，至少要将立即数大小设置为8~16位</li></ul><h2 id="操作数的类型与大小"><a href="#操作数的类型与大小" class="headerlink" title="操作数的类型与大小"></a>操作数的类型与大小</h2><p>由指令中的操作码指定操作数的类型</p><p><strong>大小</strong>：操作数的位数/字节数（字节8位，半字16位，字32位，双字64位）</p><p><strong>类型</strong>：字符（ASCII码表示，一个字节大小）、整数（用二进制补码表示，大小可以是字节、半字或单字）、浮点操作数（单精度1个字，双精度双字，IEEE 754标准）</p><p>十进制操作数类型：</p><ul><li>压缩十进制或二进制编码十进制</li><li>非压缩十进制：字符串表示</li></ul><h2 id="指令集中的操作"><a href="#指令集中的操作" class="headerlink" title="指令集中的操作"></a>指令集中的操作</h2><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210319084147.png" alt="image-20210319084140600"></p><h2 id="控制流指令"><a href="#控制流指令" class="headerlink" title="控制流指令"></a>控制流指令</h2><ul><li>跳转</li><li>分支（占控制流的大部分）</li><li>过程调用</li><li>过程返回</li></ul><h2 id="指令集编码"><a href="#指令集编码" class="headerlink" title="指令集编码"></a>指令集编码</h2><p>变长编码格式（适合寻址方式和操作种类很多时）、定长编码格式（适用于寻址方式和操作类型非常少时）、混合型编码格式</p><h2 id="指令设计风格"><a href="#指令设计风格" class="headerlink" title="指令设计风格"></a>指令设计风格</h2><ul><li>复杂指令集计算机CISC</li><li>精简指令集计算机RISC</li></ul><h2 id="MIPS体系结构"><a href="#MIPS体系结构" class="headerlink" title="MIPS体系结构"></a>MIPS体系结构</h2><p><strong>寄存器</strong></p><ul><li>32个64位通用寄存器（GPRS） R0…R31</li><li><p>32个64位浮点数寄存器（FPRS)   F0…F31</p></li><li><p>一些特殊寄存器，如浮点状态寄存器</p></li></ul><p>功能定义</p><p><strong>数据类型</strong></p><ul><li>整数</li><li>浮点数</li></ul><p><strong>寻址方式</strong></p><p>立即数寻址和偏移量寻址，字段都是16位</p><p><strong>指令格式</strong></p><p>寻址方式编码到操作码中，所有指令都是32位，操作码占6位，3种指令格式</p><ul><li>I类：load、store</li><li>R类：ALU指令、专用寄存器读/写指令、move指令</li><li>J类：跳转、跳转并链接、自陷指令、异常返回指令</li></ul><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210319102420.png" alt="image-20210319102420235"></p><p><strong>MIPS操作</strong></p><ul><li>load和store</li><li>ALU操作</li><li>分支与跳转</li><li>浮点操作</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机体系结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>单周期CPU设计</title>
      <link href="2021/03/17/%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C/%E5%8D%95%E5%91%A8%E6%9C%9FCPU%E8%AE%BE%E8%AE%A1/"/>
      <url>2021/03/17/%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C/%E5%8D%95%E5%91%A8%E6%9C%9FCPU%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="项目代码"><a href="#项目代码" class="headerlink" title="项目代码"></a>项目代码</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单周期mips处理器</span></span><br><span class="line"><span class="keyword">module</span> mips(<span class="keyword">input</span> <span class="keyword">logic</span> clk,reset,</span><br><span class="line">            <span class="keyword">output</span> <span class="keyword">logic</span>[<span class="number">31</span>:<span class="number">0</span>] pc,</span><br><span class="line">            <span class="keyword">input</span> <span class="keyword">logic</span>[<span class="number">31</span>:<span class="number">0</span>] instr,</span><br><span class="line">            <span class="keyword">output</span> <span class="keyword">logic</span> memwrite,</span><br><span class="line">            <span class="keyword">output</span> <span class="keyword">logic</span>[<span class="number">31</span>:<span class="number">0</span>] aluout,writedata,</span><br><span class="line">            <span class="keyword">input</span> <span class="keyword">logic</span>[<span class="number">31</span>:<span class="number">0</span>] readdata);</span><br><span class="line">    <span class="keyword">logic</span>memtoreg,alusrc,regdst,</span><br><span class="line">    regwrite,jump,pcsrc,zero;</span><br><span class="line">    <span class="keyword">logic</span>[<span class="number">2</span>:<span class="number">0</span>] alucontrol;</span><br><span class="line">    </span><br><span class="line">    controller c(instr[<span class="number">31</span>:<span class="number">26</span>],instr[<span class="number">5</span>:<span class="number">0</span>],zero,</span><br><span class="line">                memtoreg,memwrite,pcsrc,</span><br><span class="line">                alusrc,regdst,regwrite,jump,</span><br><span class="line">                 alucontrol);</span><br><span class="line">    datapath dp(clk,reset,memtoreg,pcsrc,</span><br><span class="line">               alusrc,regdst,regwrite,jump,</span><br><span class="line">               alucontrol,</span><br><span class="line">               zero,pc,instr,</span><br><span class="line">                aluout,writedata,readdata);</span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//控制器</span></span><br><span class="line"><span class="keyword">module</span> controller(<span class="keyword">input</span> <span class="keyword">logic</span>[<span class="number">5</span>:<span class="number">0</span>] op,funct,</span><br><span class="line">                  <span class="keyword">input</span> <span class="keyword">logic</span> zero,</span><br><span class="line">                  <span class="keyword">output</span> <span class="keyword">logic</span> memtoreg,memtowrite,</span><br><span class="line">                  <span class="keyword">output</span> <span class="keyword">logic</span> pcsrc,alusrc,</span><br><span class="line">                  <span class="keyword">output</span> <span class="keyword">logic</span> regdst,regwrite,</span><br><span class="line">                  <span class="keyword">output</span> <span class="keyword">logic</span> jump,</span><br><span class="line">                  <span class="keyword">output</span> <span class="keyword">logic</span>[<span class="number">2</span>:<span class="number">0</span>] alucontrol);</span><br><span class="line">    <span class="keyword">logic</span>[<span class="number">1</span>:<span class="number">0</span>] aluop;</span><br><span class="line">    <span class="keyword">logic</span> branch;</span><br><span class="line">    </span><br><span class="line">    maindec md(op, memtoreg,memwrite,brach,</span><br><span class="line">               alusrc,regdst,regwrite,jump,aluop);</span><br><span class="line">    </span><br><span class="line">    aludec ad(funct,aluop,alucontrol);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">assign</span> pcsrc=branch&amp;zero;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//主译码器</span></span><br><span class="line"><span class="keyword">module</span> maindec(<span class="keyword">input</span> <span class="keyword">logic</span>[<span class="number">5</span>:<span class="number">0</span>] op,</span><br><span class="line">               <span class="keyword">output</span> <span class="keyword">logic</span> memtoreg,memwrite,</span><br><span class="line">               <span class="keyword">output</span> <span class="keyword">logic</span> branch,alusrc,</span><br><span class="line">               <span class="keyword">output</span> <span class="keyword">logic</span> regdst,regwrite,</span><br><span class="line">               <span class="keyword">output</span> <span class="keyword">logic</span> jump,</span><br><span class="line">               <span class="keyword">output</span> <span class="keyword">logic</span>[<span class="number">1</span>:<span class="number">0</span>] aluop);</span><br><span class="line">    <span class="keyword">logic</span>[<span class="number">8</span>:<span class="number">0</span>] controls;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">assign</span> &#123;regwrite,regdst,alusrc,branch,memwrite,</span><br><span class="line">            memtoreg,jump,aluop&#125;=controls;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">always_comb</span></span><br><span class="line">        <span class="keyword">case</span>(op)</span><br><span class="line">            <span class="number">6&#x27;b000000</span>:controls&lt;=<span class="number">9&#x27;b110000010</span>;<span class="comment">//RTYPE</span></span><br><span class="line">            <span class="number">6&#x27;b100011</span>:controls&lt;=<span class="number">9&#x27;b101001000</span>;<span class="comment">//LW</span></span><br><span class="line">            <span class="number">6&#x27;b101011</span>:controls&lt;=<span class="number">9&#x27;b001010000</span>;<span class="comment">//SW</span></span><br><span class="line">            <span class="number">6&#x27;b000100</span>:controls&lt;=<span class="number">9&#x27;b000100001</span>;<span class="comment">//BEQ</span></span><br><span class="line">            <span class="number">6&#x27;b001000</span>:controls&lt;=<span class="number">9&#x27;b101000000</span>;<span class="comment">//ADDI</span></span><br><span class="line">            <span class="number">6&#x27;b000010</span>:controls&lt;=<span class="number">9&#x27;b000000100</span>;<span class="comment">//J</span></span><br><span class="line">            <span class="keyword">default</span>:controls&lt;=<span class="number">9&#x27;bxxxxxxxxx</span>;<span class="comment">//illegle op</span></span><br><span class="line">        <span class="keyword">endcase</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line">                </span><br><span class="line"><span class="comment">//ALU译码器</span></span><br><span class="line"><span class="keyword">module</span> aludec(<span class="keyword">input</span> <span class="keyword">logic</span>[<span class="number">5</span>:<span class="number">0</span>] funct,</span><br><span class="line">              <span class="keyword">input</span> <span class="keyword">logic</span>[<span class="number">1</span>:<span class="number">0</span>] aluop,</span><br><span class="line">              <span class="keyword">output</span> <span class="keyword">logic</span>[<span class="number">2</span>:<span class="number">0</span>] alucontrol);</span><br><span class="line">    <span class="keyword">always_comb</span></span><br><span class="line">        <span class="keyword">case</span>(aluop)</span><br><span class="line">            <span class="number">2&#x27;b00</span>:alucontrol &lt;= <span class="number">3&#x27;b010</span>;</span><br><span class="line">            <span class="number">2&#x27;b01</span>:alucontrol &lt;= <span class="number">3&#x27;b110</span>;</span><br><span class="line">            <span class="keyword">default</span>:<span class="keyword">case</span>(funct)</span><br><span class="line">                <span class="number">6&#x27;b100000</span>:alucontrol &lt;= <span class="number">3&#x27;b010</span>;</span><br><span class="line">                <span class="number">6&#x27;b100010</span>:alucontrol &lt;= <span class="number">3&#x27;b110</span>;</span><br><span class="line">                <span class="number">6&#x27;b100100</span>:alucontrol &lt;= <span class="number">3&#x27;b000</span>;</span><br><span class="line">                <span class="number">6&#x27;b100101</span>:alucontrol &lt;= <span class="number">3&#x27;b001</span>;</span><br><span class="line">                <span class="number">6&#x27;b101010</span>:alucontrol &lt;= <span class="number">3&#x27;b111</span>;</span><br><span class="line">                <span class="keyword">default</span>: alucontrol &lt;= <span class="number">3&#x27;bxxx</span>;</span><br><span class="line">                <span class="keyword">endcase</span></span><br><span class="line">            <span class="keyword">endcase</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数据路径</span></span><br><span class="line"><span class="keyword">module</span> datapath(<span class="keyword">input</span> <span class="keyword">logic</span> clk,reset,</span><br><span class="line">                <span class="keyword">input</span> <span class="keyword">logic</span> memtoreg,pcsrc,</span><br><span class="line">                <span class="keyword">input</span> <span class="keyword">logic</span> alusrc,regdst,</span><br><span class="line">                <span class="keyword">input</span> <span class="keyword">logic</span> regwrite,jump,</span><br><span class="line">                <span class="keyword">input</span> <span class="keyword">logic</span> [<span class="number">2</span>:<span class="number">0</span>] alucontrol,</span><br><span class="line">                <span class="keyword">output</span> <span class="keyword">logic</span> zero,</span><br><span class="line">                <span class="keyword">output</span> <span class="keyword">logic</span> [<span class="number">31</span>:<span class="number">0</span>] pc,</span><br><span class="line">                <span class="keyword">input</span> <span class="keyword">logic</span> [<span class="number">31</span>:<span class="number">0</span>] instr,</span><br><span class="line">                <span class="keyword">output</span> <span class="keyword">logic</span> [<span class="number">31</span>:<span class="number">0</span>] aluout,writedata,</span><br><span class="line">                <span class="keyword">input</span> <span class="keyword">logic</span> [<span class="number">31</span>:<span class="number">0</span>] readdata);</span><br><span class="line">    <span class="keyword">logic</span>[<span class="number">4</span>:<span class="number">0</span>] writereg;</span><br><span class="line">    <span class="keyword">logic</span>[<span class="number">31</span>:<span class="number">0</span>] pcnext,pcnextbr,pcplus4,pcbranch;</span><br><span class="line">    <span class="keyword">logic</span>[<span class="number">31</span>:<span class="number">0</span>] signimm,signimmsh;</span><br><span class="line">    <span class="keyword">logic</span>[<span class="number">31</span>:<span class="number">0</span>] srca,srcb;</span><br><span class="line">    <span class="keyword">logic</span>[<span class="number">31</span>:<span class="number">0</span>] result;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//next PC logic</span></span><br><span class="line">    flopr <span class="variable">#(32) pcreg(cllk,reset,pcnext,pc)</span>;</span><br><span class="line">    adderpcaddl(pc,<span class="number">32&#x27;b100</span>,pcplus4);</span><br><span class="line">    s12immsh(signimm,signimmsh);</span><br><span class="line">    adderpcadd2(pcplus4,pcbranch,pcsrc,pcnextbr);</span><br><span class="line">    mux2<span class="variable">#(32)pcbrmux(pcplus4,pcbranch,pcsrc,pcnextbr)</span>;</span><br><span class="line">    mux2<span class="variable">#(32)</span>pcmux(pcnextbr,pcplus4[<span class="number">31</span>:<span class="number">28</span>],</span><br><span class="line">                      instr[<span class="number">25</span>:<span class="number">0</span>],<span class="number">2&#x27;b001</span>,jump,pcnext);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//register file logic</span></span><br><span class="line">    regfilerf(clk,regwrite,instr[<span class="number">25</span>:<span class="number">21</span>],instr[<span class="number">20</span>:<span class="number">16</span>],</span><br><span class="line">                   writereg,result,srca,writedata);</span><br><span class="line">    mux2<span class="variable">#(5)</span>wrmux(instr[<span class="number">20</span>:<span class="number">16</span>],instr[<span class="number">15</span>:<span class="number">11</span>],</span><br><span class="line">                      regdst,writereg);</span><br><span class="line">    mux2<span class="variable">#(32)resmux(aluout,readdata,memtoreg,result)</span>;</span><br><span class="line">    signextse(instr[<span class="number">15</span>:<span class="number">0</span>],signimm);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//ALU logic</span></span><br><span class="line">    mux2<span class="variable">#(32)srcbmux(wirtedata,signimm,alusrc,srcb)</span>;</span><br><span class="line">    alualu(srca,srcb,alucontrol,aluout,zero);</span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//寄存器文件</span></span><br><span class="line"><span class="keyword">module</span> regfile(<span class="keyword">input</span> <span class="keyword">logic</span>clk,</span><br><span class="line">               <span class="keyword">input</span> <span class="keyword">logic</span>we3,</span><br><span class="line">               <span class="keyword">input</span> <span class="keyword">logic</span>[<span class="number">4</span>:<span class="number">0</span>] ra1,ra2,wa3,</span><br><span class="line">               <span class="keyword">input</span> <span class="keyword">logic</span>[<span class="number">31</span>:<span class="number">0</span>] wd3,</span><br><span class="line">               <span class="keyword">output</span> <span class="keyword">logic</span>[<span class="number">31</span>:<span class="number">0</span>] rd1,rd2);</span><br><span class="line">    <span class="keyword">logic</span>[<span class="number">31</span>:<span class="number">0</span>]rf[<span class="number">31</span>:<span class="number">0</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//three ported register file</span></span><br><span class="line">    <span class="comment">//read two ports combinationally</span></span><br><span class="line">    <span class="comment">//write third port combiantionally</span></span><br><span class="line">    <span class="comment">//register 0 hardwired to 0</span></span><br><span class="line">    <span class="comment">//note: for piedlined processer, write third port</span></span><br><span class="line">    <span class="comment">//on falling edge of clk</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">always_ff</span>@(<span class="keyword">posedge</span> clk)</span><br><span class="line">        <span class="keyword">if</span>(we3) rf[wa3]&lt;=wd3;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">assign</span> rd1=(ra1 !=<span class="number">0</span>)?rf[ra1]:<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">assign</span> rd2=(ra2 !=<span class="number">0</span>)?rf[ra2]:<span class="number">0</span>;</span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//加法器</span></span><br><span class="line"><span class="keyword">module</span> adder(<span class="keyword">input</span> <span class="keyword">logic</span>[<span class="number">31</span>:<span class="number">0</span>]a,b,</span><br><span class="line">             <span class="keyword">output</span> <span class="keyword">logic</span>[<span class="number">31</span>:<span class="number">0</span>]y);</span><br><span class="line">    <span class="keyword">assign</span> y=a+b;</span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//左移二位（乘以4）</span></span><br><span class="line"><span class="keyword">module</span> s12(<span class="keyword">input</span> <span class="keyword">logic</span>[<span class="number">31</span>:<span class="number">0</span>] a,</span><br><span class="line">           <span class="keyword">output</span> <span class="keyword">logic</span>[<span class="number">31</span>:<span class="number">0</span>] y);</span><br><span class="line">    <span class="comment">//shift left by 2</span></span><br><span class="line">    <span class="keyword">assign</span> y=&#123;a[<span class="number">29</span>:<span class="number">0</span>],<span class="number">2&#x27;b00</span>&#125;;</span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//符号扩展</span></span><br><span class="line"><span class="keyword">module</span> signext(<span class="keyword">input</span> <span class="keyword">logic</span>[<span class="number">15</span>:<span class="number">0</span>] a,</span><br><span class="line">               <span class="keyword">output</span> <span class="keyword">logic</span>[<span class="number">31</span>:<span class="number">0</span>] y);</span><br><span class="line">    <span class="keyword">assign</span> y=&#123;&#123;<span class="number">16</span>&#123;a[<span class="number">15</span>]&#125;&#125;,a&#125;;</span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//可复位触发器</span></span><br><span class="line"><span class="keyword">module</span> flopr #(<span class="keyword">parameter</span> WIDTH=<span class="number">8</span>)</span><br><span class="line">        (<span class="keyword">input</span> <span class="keyword">logic</span> clk,reset,</span><br><span class="line">         <span class="keyword">input</span> <span class="keyword">logic</span>[WIDTH-<span class="number">1</span>:<span class="number">0</span>]d,</span><br><span class="line">         <span class="keyword">output</span> <span class="keyword">logic</span>[WIDTH-<span class="number">1</span>:<span class="number">0</span>]q);</span><br><span class="line">    <span class="keyword">always_ff</span>!(<span class="keyword">posedge</span> clk, <span class="keyword">posedge</span> reset)</span><br><span class="line">        <span class="keyword">if</span>(reset) q&lt;=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span>q&lt;=d;</span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//复用器</span></span><br><span class="line"><span class="keyword">module</span> mux2 #(<span class="keyword">parameter</span> WIDTH=<span class="number">8</span>)</span><br><span class="line">            (<span class="keyword">input</span> <span class="keyword">logic</span>[WIDTH-<span class="number">1</span>:<span class="number">0</span>]d0,d1,</span><br><span class="line">             <span class="keyword">input</span> <span class="keyword">logic</span> s,</span><br><span class="line">             <span class="keyword">output</span> <span class="keyword">logic</span>[WIDTH-<span class="number">1</span>:<span class="number">0</span>]Y);</span><br><span class="line">    <span class="keyword">assign</span> y=s?d1:d0;</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h2 id="测试程序"><a href="#测试程序" class="headerlink" title="测试程序"></a>测试程序</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MIPS基准测试程序</span></span><br><span class="line"><span class="keyword">module</span> testbench();</span><br><span class="line">    <span class="keyword">logic</span> clk;</span><br><span class="line">    <span class="keyword">logic</span> reset;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">logic</span>[<span class="number">31</span>:<span class="number">0</span>] writedata,datadr;</span><br><span class="line">    <span class="keyword">logic</span>memewrite;</span><br><span class="line">    </span><br><span class="line">    top dut(clk,reset,writedata,datadr,memwrite);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">initial</span></span><br><span class="line">        <span class="keyword">begin</span></span><br><span class="line">            reset &lt;= <span class="number">1</span>; #<span class="number">22</span>; reset &lt;= <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">always</span></span><br><span class="line">        <span class="keyword">begin</span></span><br><span class="line">            clk &lt;= <span class="number">1</span>; #<span class="number">5</span>; clk &lt;= <span class="number">0</span>; #<span class="number">5</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">always</span>@(<span class="keyword">negedge</span> clk)</span><br><span class="line">        <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span>(memwrite) <span class="keyword">begin</span></span><br><span class="line">                <span class="keyword">if</span>(datadr===<span class="number">84</span> &amp; writedata===<span class="number">7</span>) <span class="keyword">begin</span></span><br><span class="line">                    <span class="built_in">$display</span>(<span class="string">&quot;Simulation succeeded&quot;</span>);</span><br><span class="line">                    <span class="built_in">$stop</span>;</span><br><span class="line">                <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span>(datadr !== <span class="number">80</span>) <span class="keyword">begin</span></span><br><span class="line">                    <span class="built_in">$display</span>(<span class="string">&quot;Simulation failed&quot;</span>);</span><br><span class="line">                    <span class="built_in">$stop</span>;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//MIPS顶层模块</span></span><br><span class="line"><span class="keyword">module</span> top(<span class="keyword">input</span> <span class="keyword">logic</span> clk,reset,</span><br><span class="line">           <span class="keyword">output</span> <span class="keyword">logic</span>[<span class="number">31</span>:<span class="number">0</span>] writedata,datadr,</span><br><span class="line">           <span class="keyword">output</span> <span class="keyword">logic</span> memwrite);</span><br><span class="line">    <span class="keyword">logic</span>[<span class="number">31</span>:<span class="number">0</span>] pc,instr,readdata;</span><br><span class="line">    </span><br><span class="line">    mips mips(clk,reset,pc,instr,memwrite,dataadr,</span><br><span class="line">              writedata,readdata);</span><br><span class="line">    imem imem(pc[<span class="number">7</span>:<span class="number">2</span>], instr);</span><br><span class="line">    dmem dmem(clk,memwrite,dataadr,writedata,readdata);</span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//MIPS数据存储器</span></span><br><span class="line"><span class="keyword">module</span> dmem(<span class="keyword">input</span> <span class="keyword">logic</span> clk,we,</span><br><span class="line">            <span class="keyword">input</span> <span class="keyword">logic</span>[<span class="number">31</span>:<span class="number">0</span>] a,wd,</span><br><span class="line">            <span class="keyword">output</span> <span class="keyword">logic</span>[<span class="number">31</span>:<span class="number">0</span>] rd);</span><br><span class="line">    <span class="keyword">logic</span>[<span class="number">31</span>:<span class="number">0</span>] RAM[<span class="number">63</span>:<span class="number">0</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">assign</span> rd=RAM[a[<span class="number">31</span>:<span class="number">2</span>]];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">always_ff</span>@(<span class="keyword">posedge</span> clk)</span><br><span class="line">        <span class="keyword">if</span>(we) RAM[a[<span class="number">31</span>:<span class="number">2</span>]] &lt;= wd;</span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//MIPS指令存储器</span></span><br><span class="line"><span class="keyword">module</span> imem(<span class="keyword">input</span> <span class="keyword">logic</span>[<span class="number">5</span>:<span class="number">0</span>] a,</span><br><span class="line">            <span class="keyword">output</span> <span class="keyword">logic</span>[<span class="number">31</span>:<span class="number">0</span>] rd);</span><br><span class="line">    <span class="keyword">logic</span>[<span class="number">31</span>:<span class="number">0</span>] RAM[<span class="number">63</span>:<span class="number">0</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">initial</span></span><br><span class="line">        <span class="built_in">$readmemh</span>(<span class="string">&quot;memfile,dat&quot;</span>,RAM);</span><br><span class="line">    <span class="keyword">assign</span> rd=RAM[a];</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><p><em>测试数据(memfile.dat)</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">20020005</span><br><span class="line">2003000c</span><br><span class="line">2067fff7</span><br><span class="line">00e22025</span><br><span class="line">00642824</span><br><span class="line">00a42820</span><br><span class="line">10a7000a</span><br><span class="line">0064202a</span><br><span class="line">10800001</span><br><span class="line">20050000</span><br><span class="line">00e2202a</span><br><span class="line">00853820</span><br><span class="line">00e23822</span><br><span class="line">ac670044</span><br><span class="line">8c020050</span><br><span class="line">08000011</span><br><span class="line">20020001</span><br><span class="line">ac020054</span><br></pre></td></tr></table></figure><h2 id="IO接口的设计"><a href="#IO接口的设计" class="headerlink" title="IO接口的设计"></a>IO接口的设计</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> IO(<span class="keyword">input</span> <span class="keyword">logic</span>clk,</span><br><span class="line">  <span class="keyword">input</span> <span class="keyword">logic</span>reset,</span><br><span class="line">  <span class="keyword">input</span> <span class="keyword">logic</span>pRead,</span><br><span class="line">  <span class="keyword">input</span> <span class="keyword">logic</span>pWrite,</span><br><span class="line">  <span class="keyword">input</span> <span class="keyword">logic</span>[<span class="number">1</span>:<span class="number">0</span>]adder,</span><br><span class="line">  <span class="keyword">input</span> <span class="keyword">logic</span>[<span class="number">31</span>:<span class="number">0</span>] pWriteData,</span><br><span class="line">  <span class="keyword">input</span> <span class="keyword">logic</span>[<span class="number">31</span>:<span class="number">0</span>] pReadData,</span><br><span class="line">  <span class="keyword">input</span> <span class="keyword">logic</span>buttenL,</span><br><span class="line">  <span class="keyword">input</span> <span class="keyword">logic</span>buttenR,</span><br><span class="line">  <span class="keyword">input</span> <span class="keyword">logic</span>[<span class="number">15</span>:<span class="number">0</span>] switch,</span><br><span class="line">  <span class="keyword">output</span> <span class="keyword">logic</span>[<span class="number">11</span>:<span class="number">0</span>] led);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">logic</span> [<span class="number">1</span>:<span class="number">0</span>] status;</span><br><span class="line">    <span class="keyword">logic</span> [<span class="number">15</span>:<span class="number">0</span>] switch1;</span><br><span class="line">    <span class="keyword">logic</span> [<span class="number">11</span>:<span class="number">0</span>] led1;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">always_ff</span> @(<span class="keyword">posedge</span> clk) <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span> (reset) <span class="keyword">begin</span></span><br><span class="line">            status&lt;=<span class="number">2&#x27;b00</span>;</span><br><span class="line">            led1&lt;=<span class="number">12&#x27;h00</span>;</span><br><span class="line">            switch1&lt;=<span class="number">16&#x27;h00</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">            <span class="comment">// 开关位置已经换好，可以输入新数据</span></span><br><span class="line">            <span class="keyword">if</span> (buttonR) <span class="keyword">begin</span></span><br><span class="line">                status[<span class="number">1</span>] &lt;= <span class="number">1</span>;</span><br><span class="line">                switch1&lt;= switch;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// LEDs已经准备好，可以输出新数据</span></span><br><span class="line">            <span class="keyword">if</span> (buttonL) <span class="keyword">begin</span></span><br><span class="line">                status[<span class="number">0</span>] &lt;= <span class="number">1</span>;</span><br><span class="line">                led&lt;= led1;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 向数据输入端口输出(LED)</span></span><br><span class="line">            <span class="keyword">if</span> (pWrite &amp; (addr == <span class="number">2&#x27;b01</span>)) <span class="keyword">begin</span></span><br><span class="line">                led1&lt;= pWriteData[<span class="number">11</span>:<span class="number">0</span>];</span><br><span class="line">                status[<span class="number">0</span>]&lt;= <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 读数据</span></span><br><span class="line">            <span class="keyword">if</span> (pRead) <span class="keyword">begin</span></span><br><span class="line">                <span class="keyword">case</span>(addr)</span><br><span class="line">                    <span class="number">2&#x27;b11</span>:pReadData &lt;= &#123;<span class="number">24&#x27;b0</span>, switch1[<span class="number">15</span>:<span class="number">8</span>]&#125;;</span><br><span class="line">                    <span class="number">2&#x27;b10</span>:pReadData &lt;= &#123;<span class="number">24&#x27;b0</span>, swtich1[<span class="number">7</span>:<span class="number">0</span>]&#125;;</span><br><span class="line">                    <span class="number">2&#x27;b00</span>:pReadData &lt;= &#123;<span class="number">24&#x27;b0</span>, <span class="number">6&#x27;b000000</span>, status&#125;;</span><br><span class="line">                    <span class="keyword">default</span>: pReadData &lt;= <span class="number">32&#x27;b0</span>;</span><br><span class="line">                <span class="keyword">endcase</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line">                </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 体系结构实验 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第3章 流水线</title>
      <link href="2021/03/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E4%BD%93%E7%BB%93%E6%9E%84/%E7%AC%AC3%E7%AB%A0%20%E6%B5%81%E6%B0%B4%E7%BA%BF/"/>
      <url>2021/03/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E4%BD%93%E7%BB%93%E6%9E%84/%E7%AC%AC3%E7%AB%A0%20%E6%B5%81%E6%B0%B4%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="流水线基础知识"><a href="#流水线基础知识" class="headerlink" title="流水线基础知识"></a>流水线基础知识</h2><ul><li>把一个重复的过程分解为若干个子过程， 每个子过程由专门的功能部件来实现。</li><li>把多个处理过程在时间上错开，依次通过各功能段，这样，每个子过程就可以与其他的子过程并行进行。</li><li>每个子过程及其功能部件：流水级/段；段数：流水线的深度</li></ul><p>例：</p><p>指令流水线（分解成四个子过程，每个子过程用独立的分析部件和执行部件来实现）</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210326083341.png" alt="image-20210326083341631"></p><p>浮点加法流水线</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210326083424.png" alt="image-20210326083424707"></p><p><strong>时空图</strong></p><p>横轴时间、纵轴各个段</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210326083526.png" alt="image-20210326083525954"></p><p><strong>特点</strong></p><ul><li>各段时间应该尽量相等，时间长的段将成为流水线的瓶颈</li><li>每个功能部件后面要有一个缓冲寄存器（流水寄存器），用于在相邻两段之间传送数据</li><li>通过时间：第一个任务从进入流水线到流出结果所需的时间</li><li>排空时间：最后一个任务从进入流水线到流出结果所需的时间</li></ul><h3 id="流水线的分类"><a href="#流水线的分类" class="headerlink" title="流水线的分类"></a>流水线的分类</h3><ol><li>单功能与多功能流水线：前者只能完成一种功能，后者各段能进行不同的连接，实现不同的功能</li><li>静态与动态流水线：按同一时间能否执行多种功能对多功能流水线的分类</li><li>线性与非线性流水线：前者没有反馈回路、串行连接，后者有反馈回路</li><li>顺序流水线和乱序流水线：前者流入流出顺序相同，后者可以后进的先完成</li></ol><h3 id="流水线的性能指标"><a href="#流水线的性能指标" class="headerlink" title="流水线的性能指标"></a>流水线的性能指标</h3><p><strong>吞吐率</strong></p><p>单位时间内流水线所完成的任务/输出结果数量</p><p>$TP=\frac{n}{T_k}$</p><p>n表示任务数，$T_k$表示处理n个任务所用的时间</p><p>各段时间相等：</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210326090245.png" alt="image-20210326090245212"></p><script type="math/tex; mode=display">TP=\frac{n}{(k+n-1)\Delta{t}}</script><p>最大吞吐率</p><script type="math/tex; mode=display">TP_{max}=\lim_{n\rightarrow+\infty}\frac{n}{(k+n-1)\Delta{t}}=\frac{1}{\Delta{t}}</script><p>各段时间不完全相等：</p><p>最长的叫瓶颈段</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210326091005.png" alt="image-20210326091005492"></p><script type="math/tex; mode=display">TP=\frac{n}{\sum_{i=1}^{k}\Delta{t_i}+(n-1)max(\Delta{t_1},\Delta{t_2},\cdots,\Delta{t_k})}</script><p>最大吞吐率</p><script type="math/tex; mode=display">TP_{max}=\frac{1}{max(\Delta{t_1},\Delta{t_2},\cdots,\Delta{t_k})}</script><p>解决瓶颈问题：细分瓶颈段、重新设置瓶颈段</p><p><strong>加速比</strong></p><p>同一批任务，使用和不使用流水线时间比</p><script type="math/tex; mode=display">S=\frac{T_s}{T_k}</script><p>各段时间相等：</p><script type="math/tex; mode=display">S=\frac{nk}{k+n-1}</script><p>不完全相等：</p><script type="math/tex; mode=display">S=\frac{n\sum_{i=1}^{k}\Delta{t_i}}{\sum_{i=1}^{k}\Delta{t_i}+(n-1)max(\Delta{t_1},\Delta{t_2},\cdots,\Delta{t_k})}</script><p><strong>效率</strong></p><p>设备利用率</p><p>各段时间相等</p><script type="math/tex; mode=display">E=\frac{n}{k+n-1}</script><script type="math/tex; mode=display">E_{max}=1</script><p>各段不相等</p><script type="math/tex; mode=display">E=\frac{n\sum_{i=1}^{k}\Delta{t_i}}{k[\sum_{i=1}^{k}\Delta{t_i}+(n-1)max(\Delta{t_1},\Delta{t_2},\cdots,\Delta{t_k})]}</script><h3 id="一个经典的5段流水线"><a href="#一个经典的5段流水线" class="headerlink" title="一个经典的5段流水线"></a>一个经典的5段流水线</h3><p>非流水情况下，一条指令的执行过程分为以下5个周期</p><ol><li>取指令周期（IF）</li><li>指令译码/读寄存器周期（ID）</li><li>执行/有效地址计算周期（EX）</li><li>存储器访问/分支完成周期（MEM）</li><li>写回周期（WB）</li></ol><p>改为流水线实现：</p><ul><li>每个周期作为一个流水段</li><li>各段之间加上锁存器</li></ul><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210326102646.png" alt="image-20210326102646310"></p><h2 id="流水线冒险"><a href="#流水线冒险" class="headerlink" title="流水线冒险"></a>流水线冒险</h2><p>流水线冒险会阻止指令流中下一条指令不能在指定的时钟周期执行</p><ul><li>结构冒险：因硬件资源满足不了指令重叠执行的要求而出现资源冲突，导致结构冒险</li><li>数据冒险：当指令在流水线中重叠执行时，因需要用到前面指令的执行结果，导致数据冒险</li><li>控制冒险：流水线遇到分支指令和其他会改变PC值的指令，导致控制冒险</li></ul><h3 id="带有停顿的流水线性能"><a href="#带有停顿的流水线性能" class="headerlink" title="带有停顿的流水线性能"></a>带有停顿的流水线性能</h3><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210402083346.png" alt="image-20210402083338983"></p><h3 id="结构冒险"><a href="#结构冒险" class="headerlink" title="结构冒险"></a>结构冒险</h3><p>常见原因：功能部件不是完全流水、资源份数不够</p><p>解决办法：插入暂停周期（“气泡”）、设置相互独立的指令存储器和数据存储器或设置相互独立的指令Cache和数据Cache</p><h3 id="数据冒险"><a href="#数据冒险" class="headerlink" title="数据冒险"></a>数据冒险</h3><p>当相关的指令靠得足够近时，它们在流水线中的重叠执行或者重新排序会改变指令读写操作数的顺序，使之不同于它们非流水实现时的顺序，则发生了数据冒险。</p><ul><li><p>通过转发技术（旁路/短路）减少数据冒险引起的停顿</p></li><li><p>增加流水线互锁硬件、插入“停顿”（或气泡）</p></li></ul><h3 id="分支冒险"><a href="#分支冒险" class="headerlink" title="分支冒险"></a>分支冒险</h3><ul><li><em>降低流水线分支代价</em></li></ul><p>处理分支指令最简单的方法：“冻结”流水线，保留或删除分支之后的所有指令，直到直到分支目标地址。</p><ul><li><p><em>预测未选中（预测分支失败）</em></p></li><li><p><em>预测选中（预测分支成功）</em></p></li></ul><p><em>分支延迟指令的调度</em></p><p>在延迟槽中放入有用的指令，由编译器完成，能否带来好处取决于编译器能否把有用的指令调度到延迟槽中。</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210402102005.png" alt="image-20210402102005229"></p><h3 id="分支预测"><a href="#分支预测" class="headerlink" title="分支预测"></a>分支预测</h3><p>通过预测降低分支成本</p><ul><li>静态分支预测：利用编译时可用信息的低成本静态机制</li><li>动态分支预测：根据程序特性对分支进行动态预测的策略</li></ul><h2 id="实现流水化"><a href="#实现流水化" class="headerlink" title="实现流水化"></a>实现流水化</h2><h3 id="MIPS的简单实现"><a href="#MIPS的简单实现" class="headerlink" title="MIPS的简单实现"></a>MIPS的简单实现</h3><p>一条MIPS指令最多需要以下5个时钟周期</p><p><em>取指令周期（IF）</em></p><p><em>指令译码/读寄存器周期（ID）</em></p><p><em>执行/有效地址计算周期（EX）</em></p><p><em>存储器访问/分支完成周期（MEM）</em></p><p><em>写回周期（WB）</em></p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210402102601.png" alt="image-20210402102601455"></p><h3 id="MIPS基本流水线"><a href="#MIPS基本流水线" class="headerlink" title="MIPS基本流水线"></a>MIPS基本流水线</h3><p>每一个时钟周期完成的工作看作是流水线的一段，每个时钟周期启动一条新的指令。</p><p>段和段之间设置流水寄存器，命名：用其相邻的两个段的名称拼合而成</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210402103054.png" alt="image-20210402103053923"></p><h3 id="MIPS流水线的控制"><a href="#MIPS流水线的控制" class="headerlink" title="MIPS流水线的控制"></a>MIPS流水线的控制</h3><p><em>控制四个多路选择器</em></p><p><em>解决数据冒险的问题</em></p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210402103316.png" alt="image-20210402103316278"></p><h3 id="处理流水线中的分支"><a href="#处理流水线中的分支" class="headerlink" title="处理流水线中的分支"></a>处理流水线中的分支</h3><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210402103408.png" alt="image-20210402103408763"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机体系结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第五章 概率分析和随机算法</title>
      <link href="2021/03/17/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA/%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E6%A6%82%E7%8E%87%E5%88%86%E6%9E%90%E5%92%8C%E9%9A%8F%E6%9C%BA%E7%AE%97%E6%B3%95/"/>
      <url>2021/03/17/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA/%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E6%A6%82%E7%8E%87%E5%88%86%E6%9E%90%E5%92%8C%E9%9A%8F%E6%9C%BA%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="5-1-雇佣问题"><a href="#5-1-雇佣问题" class="headerlink" title="5.1 雇佣问题"></a>5.1 雇佣问题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HIRE-ASSISTANT(n)</span><br><span class="line">best &#x3D; 0</span><br><span class="line">for i &#x3D; 0 to n</span><br><span class="line">interview candidate i</span><br><span class="line">if candidate is better than candidate best</span><br><span class="line">best &#x3D; i</span><br><span class="line">hire candidate i</span><br></pre></td></tr></table></figure><p><strong>最坏情形分析</strong></p><p>应聘者质量按出现的次序严格递增</p><p><strong>概率分析</strong></p><p>对所有可能输入产生的运行时间取平均，每当报告此种类型的运行时间时，我们称其为平均情况运行时间</p><p><strong>随机算法</strong></p><p>如果一个算法的形为不仅由输入决定，而且也由随机数生成器产生的数值决定，则称这个算法是随机的。</p><h2 id="5-2-指示器随机变量"><a href="#5-2-指示器随机变量" class="headerlink" title="5.2 指示器随机变量"></a>5.2 指示器随机变量</h2><p>定义：</p><script type="math/tex; mode=display">I\lbrace A\rbrace=\begin{cases} 1\quad如果A发生\\0\quad如果A不发生\end{cases}</script><p>A发生的概率$Pr\lbrace A\rbrace$，期望 $E[X_A]$</p><p>引理：给定一个样本空间S和S中的一个事件A，设$X_A=I\lbrace A\rbrace$，那么$E[X_A]=Pr\lbrace A\rbrace$</p><p><strong>用指示器随机变量分析雇佣问题</strong></p><script type="math/tex; mode=display">X_i=I\lbrace 应聘者i被雇佣\rbrace = \begin{cases} 1\quad如果应聘者i被雇佣 \\ 0\quad如果应聘者i不被雇佣  \end{cases}</script><p>以及</p><script type="math/tex; mode=display">X=X_1+X_2+\cdots+X_n</script><p>根据引理</p><script type="math/tex; mode=display">E[X_i]=Pr\lbrace 应聘者i被雇佣\rbrace</script><p>应聘者比应聘者1到i-1更有资格的概率是1/i，因此</p><script type="math/tex; mode=display">E[X_i]=1/i</script><p>计算得</p><script type="math/tex; mode=display">E[X]=\ln n+O(1)</script><p>因此尽管面试了n个人，实际上大约只雇佣他们之中的$\ln n$个人</p><h2 id="5-3-随机算法"><a href="#5-3-随机算法" class="headerlink" title="5.3 随机算法"></a>5.3 随机算法</h2><p>先对应聘者进行排列，然后确定最佳应聘者的随机算法。此时建立的算法的性能和假设应聘者以随即次序出现所得的结果是匹配的。</p><p>随机排列数组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PERMUTE-BY-SORTING(A)</span><br><span class="line">n&#x3D;A.length</span><br><span class="line">let P[1...n] be a new array</span><br><span class="line">for i &#x3D; 1 to n</span><br><span class="line">P[i] &#x3D; RANDOM(1, n^3)</span><br><span class="line">sort A, using P as sort keys</span><br></pre></td></tr></table></figure><p>假设所有优先级都不同，则过程PERMUTE-BY-SORTING产生输入的均匀随机排列</p><p>另一个方法：原址排列给定数组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RANDOMIZE-IN-PLACE(A)</span><br><span class="line">n &#x3D; A.length</span><br><span class="line">for i &#x3D; 1 to n</span><br><span class="line">swap A[i] with A[RANDOM(i, n)]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法导论 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>概论</title>
      <link href="2021/03/17/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E6%A6%82%E8%AE%BA/"/>
      <url>2021/03/17/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E6%A6%82%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="1-1-计算机软件"><a href="#1-1-计算机软件" class="headerlink" title="1.1 计算机软件"></a>1.1 计算机软件</h2><ol><li>软件的发展</li></ol><ul><li><p>1946~1956 第一个程序的出现到高级语言出现</p></li><li><p>1956~1986 高级语言出现到软件工程出现</p></li><li><p>1968至今</p></li></ul><ol><li>软件的特点</li></ol><p>一种逻辑实体、被开发或设计、不会老化，但需要修复。</p><ol><li>软件的分类</li></ol><ul><li><p>系统软件：编译程序、操作系统等</p></li><li><p>支撑软件：数据库管理系统等</p></li><li><p>应用软件：Web应用软件等</p></li></ul><ol><li>软件语言</li></ol><ul><li><p>需求定义语言：PSL/PSA</p></li><li><p>功能性语言：Z语言</p></li><li><p>设计性语言：PDL</p></li><li><p>实现性语言：</p><ul><li><p>低级语言和高级语言</p></li><li><p>过程语言和非过程语言</p></li><li><p>…</p></li></ul></li><li><p>文档语言</p></li></ul><h2 id="1-2-软件工程"><a href="#1-2-软件工程" class="headerlink" title="1.2 软件工程"></a>1.2 软件工程</h2><ul><li>定义：软件工程是应用计算机科学、数学及管理科学等原理，开发软件的工程。</li><li>软件工程框架：目标、过程和原则。</li><li>软件的生存周期：计算机系统工程-&gt;需求分析-&gt;设计-&gt;编码-&gt;测试-&gt;运行和维护</li></ul><h2 id="1-3-软件过程"><a href="#1-3-软件过程" class="headerlink" title="1.3 软件过程"></a>1.3 软件过程</h2><p>能力成熟度模型CMM和能力成熟度模型集成CMMI</p><h2 id="1-4-软件过程模型"><a href="#1-4-软件过程模型" class="headerlink" title="1.4 软件过程模型"></a>1.4 软件过程模型</h2><ul><li>瀑布模型</li><li>演化模型</li><li>增量模型</li><li>原型模型螺旋模型</li><li>喷泉模型</li><li>基于构件的开发模型</li><li>形式化方法模型</li></ul><h2 id="1-5-敏捷软件开发"><a href="#1-5-敏捷软件开发" class="headerlink" title="1.5 敏捷软件开发"></a>1.5 敏捷软件开发</h2><ol><li>敏捷软件开发的价值观及开发原则<ul><li>个人和交互高于过程和工具</li><li>可运行软件高于详尽的文档</li><li>与客户协作高于合同谈判</li><li>对变更及时作出反应高于遵循计划</li></ul></li><li>XP方法</li><li>Agile和CMM</li></ol><h2 id="1-6-CASE工具和环境"><a href="#1-6-CASE工具和环境" class="headerlink" title="1.6 CASE工具和环境"></a>1.6 CASE工具和环境</h2>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo报错</title>
      <link href="2021/03/17/%E5%B7%A5%E5%85%B7/Hexo%E6%8A%A5%E9%94%99/"/>
      <url>2021/03/17/%E5%B7%A5%E5%85%B7/Hexo%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<p>今天在使用hexo博客运行 hexo d 出现报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OpenSSL SSL_connect: Connection was reset in connection to github.com:443</span><br></pre></td></tr></table></figure><p> 查询了很多方案后，发现是代理的问题，如果你使用了VPN，需要设置一下http.proxy，先查看端口号</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210317125202.png" alt="image-20210317125154852"></p><p>我的端口号是2802，设置http.proxy</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy 127.0.0.1:2802</span><br><span class="line">git config --global https.proxy 127.0.0.1:2802</span><br></pre></td></tr></table></figure><p>如果之前已经有过设置，先取消</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure><p>设置好之后再hexo d，部署成功</p><p>附上我的报错和解决截图</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210317125426.png" alt="image-20210317125426084"></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第四章 分治策略</title>
      <link href="2021/03/17/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA/%E7%AC%AC%E5%9B%9B%E7%AB%A0%20%E5%88%86%E6%B2%BB%E7%AD%96%E7%95%A5/"/>
      <url>2021/03/17/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA/%E7%AC%AC%E5%9B%9B%E7%AB%A0%20%E5%88%86%E6%B2%BB%E7%AD%96%E7%95%A5/</url>
      
        <content type="html"><![CDATA[<p>Divide-Conquer-Combine</p><h2 id="4-1-最大子数组问题"><a href="#4-1-最大子数组问题" class="headerlink" title="4.1 最大子数组问题"></a>4.1 最大子数组问题</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">FIND-MAX-CROSSING-SUBARRAY(A,low,mid,high) </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    接受数组A和下表low,mid,high为输入，</span></span><br><span class="line"><span class="comment">    返回一个下标元组划定跨越种点的最大子数组的边界，并返回最大子数组中值的和</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">left-sum = -∞</span><br><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i = mid downto low</span><br><span class="line">    sum = sum + A[i]</span><br><span class="line">    <span class="keyword">if</span> sum &gt; left - sum</span><br><span class="line">        left-sum = sum</span><br><span class="line">        max-left = i</span><br><span class="line">right-sum = -∞</span><br><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> j = mid + <span class="number">1</span> to high</span><br><span class="line">    sum = sum + A[j]</span><br><span class="line">    <span class="keyword">if</span> sum &gt; right-sum</span><br><span class="line">        right-sum = sum</span><br><span class="line">        max-right = j</span><br><span class="line"><span class="keyword">return</span>(max-left, max-right, left-sum + right-sum)</span><br><span class="line"></span><br><span class="line">FIND-MAXIMUM-SUBARRAY(A,low,high) <span class="comment">//求出A[1...n]的最大子数组</span></span><br><span class="line"><span class="keyword">if</span> high == low</span><br><span class="line">    <span class="keyword">return</span> (low,high,A[low])</span><br><span class="line"><span class="keyword">else</span> mid = (low + high)/<span class="number">2</span></span><br><span class="line">    (left-low, left-high, left-sum) = </span><br><span class="line">    FIND-MAXIMUM-SUBARRAY(A,low,mid)</span><br><span class="line">    (right-low, right-high, right-sum) = </span><br><span class="line">    FIND-MAXIMUM-SUBARRAY(A,mid+<span class="number">1</span>,high)</span><br><span class="line">    (cross-low, cross-high, cross-sum) = </span><br><span class="line">    FIND-MAX-CROSSING-SUBARRAY(A,low,mid,high)</span><br><span class="line">    <span class="keyword">if</span> left-sum &gt;= cross-sum and right-sum &gt;= cross-sum</span><br><span class="line">        <span class="keyword">return</span>(left-low, left-high, left-sum)</span><br><span class="line">    <span class="keyword">else</span> right-sum &gt;= cross-sum and right-sum &gt;= cross-sum</span><br><span class="line">        <span class="keyword">return</span>(right-low, right-high, right-sum)</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span>(cross-low, cross-high, cross-sum)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-2-矩阵乘法的Strassen算法"><a href="#4-2-矩阵乘法的Strassen算法" class="headerlink" title="4.2 矩阵乘法的Strassen算法"></a>4.2 矩阵乘法的Strassen算法</h2><p>常规算法花费Θ(n^3)，Strassen算法花费Θ(n^lg7)≈Θ(n^2.81)</p><p>基本思想：减少多余的乘法，把乘法变成乘法+加法</p><h2 id="4-3-代入法求解递归式"><a href="#4-3-代入法求解递归式" class="headerlink" title="4.3 代入法求解递归式"></a>4.3 代入法求解递归式</h2><p><strong>步骤</strong></p><ol><li>猜测解的形式</li><li>用数学归纳法求出解中的常数，并证明解是正确的</li></ol><h2 id="4-4-递归树方法求解递归式"><a href="#4-4-递归树方法求解递归式" class="headerlink" title="4.4 递归树方法求解递归式"></a>4.4 递归树方法求解递归式</h2><p>将递归式转换成一棵树，其节点表示不同层次的递归调用产生的代价。然后采用边界和技巧来求解递归式。</p><p>例：$T(n)=3T(\lfloor n/4\rfloor)+\Theta(n^2)$</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210423082640.png" alt="image-20210423082632784"></p><h2 id="4-5-主方法求解递归式"><a href="#4-5-主方法求解递归式" class="headerlink" title="4.5 主方法求解递归式"></a>4.5 主方法求解递归式</h2><p>求解形式如 $T(n)=aT(n/b)+f(n)$递归式的界</p><script type="math/tex; mode=display">\begin{align}&主定理：令a\geq 1和b>1是常数，f(n)是一个函数，T(n)是定义在非负整数上的递归式：\\&T(n)=aT(n/b)+f(n)\\&其中n/b解释为\lfloor n/b\rfloor或\lceil n/b\rceil，那么T(n)有如下渐进界：\\&1.若对某个常数\varepsilon >0，有f(n)=O(n^{log_b{a-\varepsilon}})，则T(n)=\Theta(n^{log_ba}).\\&2.若f(n)=\Theta(n^{log_ba})，则T(n)=\Theta(n^{log_ba}lgn).\\&3.若对某个常数\varepsilon>0有f(n)=\Omega(n^{log_b{a+\varepsilon}})，且对某个常数c<1和所有足够大的n有af(n/b)\leq cf(n)，则T(n)=\Theta(f(n))\end{align}</script><p>基本思想，把f(n)和$\Theta(n^{log_ba})$比较，两函数较大者决定了递归式的解。</p>]]></content>
      
      
      <categories>
          
          <category> 算法导论 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库引论 第三章 关系数据库语言-SQL</title>
      <link href="2021/03/16/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%95%E8%AE%BA%20%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%AD%E8%A8%80-SQL/"/>
      <url>2021/03/16/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%95%E8%AE%BA%20%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%AD%E8%A8%80-SQL/</url>
      
        <content type="html"><![CDATA[<h2 id="SQL体系结构："><a href="#SQL体系结构：" class="headerlink" title="SQL体系结构："></a>SQL体系结构：</h2><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210309194458.png" alt=""></p><h2 id="SQL的数据定义"><a href="#SQL的数据定义" class="headerlink" title="SQL的数据定义"></a>SQL的数据定义</h2><p><strong>SQL模式的创建和撤销</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> SCHEMA <span class="operator">&lt;</span>模式名<span class="operator">&gt;</span> <span class="keyword">AUTHORIZATION</span> <span class="operator">&lt;</span>用户名<span class="operator">&gt;</span> <span class="operator">/</span><span class="operator">/</span>创建</span><br><span class="line"><span class="keyword">DROP</span> SCHEMA <span class="operator">&lt;</span>模式名<span class="operator">&gt;</span> [CASCADE<span class="operator">|</span>RESTRICT] <span class="operator">/</span><span class="operator">/</span>删除</span><br></pre></td></tr></table></figure><p>CASCADE级联式，直接删除；RESTRICT约束式，若模式下面有其他模式，则提示</p><p>SQL基本数据类型：数值型、字符串型、位串型、时间型</p><p><strong>基本表的创建</strong>、<strong>修改和撤销</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>创建</span><br><span class="line"><span class="keyword">CREATE</span>  <span class="keyword">TABLE</span>  S</span><br><span class="line">(S#    <span class="type">CHAR</span>(<span class="number">4</span>)  <span class="keyword">NOT</span>  <span class="keyword">NULL</span>,</span><br><span class="line"> SNAME  <span class="type">CHAR</span>(<span class="number">8</span>)  <span class="keyword">NOT</span>  <span class="keyword">NULL</span>,</span><br><span class="line"> AGE<span class="type">CHAR</span>(<span class="number">1</span>),</span><br><span class="line"> SEX    <span class="type">CHAR</span>(<span class="number">1</span>),</span><br><span class="line">   <span class="keyword">PRIMARY</span>  KEY(S#));</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>修改</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>基本表名<span class="operator">&gt;</span> <span class="keyword">ADD</span> <span class="operator">&lt;</span>列名<span class="operator">&gt;</span> <span class="operator">&lt;</span>类型<span class="operator">&gt;</span> </span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>删除</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>基本表名<span class="operator">&gt;</span> <span class="keyword">DROP</span> <span class="operator">&lt;</span>列名<span class="operator">&gt;</span>［CASCADE│RESTRICT］</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>修改某个列</span><br><span class="line"><span class="keyword">ALTER</span>  <span class="keyword">TABLE</span>  S  MODIFY  S#  <span class="type">CHAR</span>(<span class="number">6</span>)</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>删除表</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>基本表名<span class="operator">&gt;</span>［CASCADE│RESTRICT］</span><br></pre></td></tr></table></figure><ul><li>CASCADE表示删除时自动删除该列的视图和约束，RESTRICT则拒绝删除</li><li>CAHR提前给一个固定的地址大小，VARCHAR根据实际情况调整大小（在范围内）</li></ul><p><strong>索引的创建和撤销</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>创建</span><br><span class="line"><span class="keyword">CREATE</span> ［<span class="keyword">UNIQUE</span>］ INDEX  <span class="operator">&lt;</span>索引名<span class="operator">&gt;</span> <span class="keyword">ON</span>  <span class="operator">&lt;</span>基本表名<span class="operator">&gt;</span>(列名表) </span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>撤销</span><br><span class="line"><span class="keyword">DROP</span>  INDEX  <span class="operator">&lt;</span>索引名<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><h2 id="SQL的数据查询"><a href="#SQL的数据查询" class="headerlink" title="SQL的数据查询"></a>SQL的数据查询</h2><p><strong>SELECT查询语句</strong></p><ul><li>SELECT-FROM-WHERE句型</li><li>WHERE子句的条件表达式可用的运算符<ul><li>算数比较 &lt;…</li><li>逻辑 AND…</li><li>集合成员资格 IN…</li><li>谓词 EXISTS…</li><li>聚合函数 AVG…</li><li>另一个SELECT语句嵌套</li><li>集合 UNION…</li></ul></li></ul><p><strong>SLECT语句的图示化</strong></p><p>（C2是常量，P是要打印的数据）</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210316183159.png" alt="image-20210316183152291"></p><p><strong>聚合函数</strong></p><ul><li>COUNT(*) 计算元组个数  </li><li>COUNT(列名) 对一列中的值计算个数</li><li>SUM(列名) 对某一列的值的总和</li><li>AVG</li><li>MAX</li><li>MIN</li><li>…</li></ul><p><strong>其他</strong></p><ul><li>*表示所有的列</li><li>DISTINCT取出不同的</li></ul><p><strong>SELECT完整语句</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 目标表的列名或列表达式序列</span><br><span class="line"><span class="keyword">FROM</span> 基本表名和（或）视图序列</span><br><span class="line">[<span class="keyword">WHERE</span> 行条件表达式]</span><br><span class="line"> [<span class="keyword">GROUP</span> <span class="keyword">BY</span> 列名序列 ]</span><br><span class="line">   [<span class="keyword">HAVING</span> 组条件表达式 ]</span><br><span class="line"> [<span class="keyword">ORDER</span> <span class="keyword">BY</span> 列名[<span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>]，…]</span><br></pre></td></tr></table></figure><p><strong>基本表的连接</strong></p><div class="table-container"><table><thead><tr><th>连接类型</th><th>连接条件</th></tr></thead><tbody><tr><td>INNER JOIN 内连接</td><td>NATURAL</td></tr><tr><td>LEFT OUTER JOIN 左外连接</td><td>ON 等值连接条件</td></tr><tr><td>RIGHT OUTER JOIN 右外连接</td><td>USING(A1,A2,…,An)</td></tr><tr><td>FULL OUTER JOIN 完全外连接</td></tr></tbody></table></div><p><strong>递归查询</strong></p><p>假设课程有先修与后继的联系</p><p>COURSE(C#,CNAME,PC#)</p><p>设临时关系W（C#，PC#）的属性表示课程号、直接或间接先修课的课程号。求W，可以利用这样两个规则：</p><p><strong>① W(x,y)← COURSE(x,u,y)</strong></p><p><strong>② W(x,y)← COURSE(x,u,z)∧ W(z,y)</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> <span class="keyword">RECURSIVE</span> W(C#, PC#) <span class="keyword">AS</span></span><br><span class="line">(<span class="keyword">SELECT</span> C#, PC# <span class="keyword">FROM</span> COURSE)</span><br><span class="line">    <span class="keyword">UNION</span></span><br><span class="line">        (<span class="keyword">SELECT</span> W1.C#, W2.PC#</span><br><span class="line">        <span class="keyword">FROM</span> COURSE <span class="keyword">AS</span> W1, W <span class="keyword">AS</span> W2</span><br><span class="line">        <span class="keyword">WHERE</span> W1.PC#<span class="operator">=</span>W2.C#)</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> W;</span><br></pre></td></tr></table></figure><h2 id="数据更新"><a href="#数据更新" class="headerlink" title="数据更新"></a>数据更新</h2><p><strong>数据插入</strong></p><ul><li><p>单元组插入</p><p> INSERT INTO基本表名[(列名表)] VALUES(元组值)</p></li><li><p>多元组插入</p><p>INSERT INTO 基本表名 [(列名表)]</p><p>VALUES (元组值),(元组值)，……，(元组值)</p></li><li><p>查询结果插入</p><p>INSERT INTO 基本表名 [(列名表)]<SELECT查询语句></p></li><li><p>表的插入</p><p>INSERT INTO 基本表名1[(列名表)]TABLE 基本表名2</p></li></ul><p><strong>数据删除</strong></p><p>DELETE FROM 基本表名</p><p>[WHERE 条件表达式]</p><p><strong>数据修改</strong></p><p>UPDATE</p><h2 id="视图的定义和对视图的操作"><a href="#视图的定义和对视图的操作" class="headerlink" title="视图的定义和对视图的操作"></a>视图的定义和对视图的操作</h2><p><strong>视图的创建和撤销</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> <span class="operator">&lt;</span>视图名<span class="operator">&gt;</span>（列表名）</span><br><span class="line"></span><br><span class="line"><span class="keyword">AS</span> <span class="operator">&lt;</span><span class="keyword">SELECT</span> 查询语句<span class="operator">&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>视图实际上对应一个查询语句</p><p>DROP VIEW</p><p><strong>对视图的更新操作</strong></p><p>如果视图是从单个基本表只使用选择、投影操作导出的，并且包含了基本表的主键，那么这样的视图称为<em>行列子集视图</em>，并且可以被执行更新操作。</p><p><strong>视图的优点</strong></p><ol><li>视图提供了逻辑数据独立性</li><li>简化了用户观点</li><li>数据的安全保护功能</li></ol><h2 id="嵌入式SQL"><a href="#嵌入式SQL" class="headerlink" title="嵌入式SQL"></a>嵌入式SQL</h2><p>SQL的两种使用方式：</p><ol><li>终端交互方式下使用：交互式SQL</li><li>嵌入高级语言的程序中使用：嵌入式SQL</li></ol><p><strong>SQL的运行环境</strong></p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210316202532.png" alt="image-20210316202531831"></p><p><strong>嵌入式SQL的使用规定</strong></p><p>允许嵌入的SQL语句引用宿主语言的程序变量（称为共享变量）</p><ul><li>游标定义语句 DECLARE</li><li>游标打开语句 OPEN</li><li>游标推进语句 FETCH</li><li>游标关闭语句 CLOSE</li></ul><p><strong>嵌入式SQL的使用技术</strong></p><ol><li>不涉及游标的SQL DML语句</li><li>设计游标的SQL DML语句</li><li>卷游标的定义和推进</li></ol><p><strong>动态SQL语句</strong></p><p>EXEC SQL PREPARE &lt;动态SQL语句名&gt;</p><p>FROM &lt;共享变量或字符串&gt;</p><p>这个语句可以在程序运行时由用户输入才组合起来</p><p><strong>ODBC</strong></p><p>公共接口API</p><p>ODBC程序的基本流程</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210316205638.png" alt="image-20210316205638625"></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库引论  第二章 关系运算模型和关系运算理论</title>
      <link href="2021/03/15/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%95%E8%AE%BA%20%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E5%85%B3%E7%B3%BB%E8%BF%90%E7%AE%97%E6%A8%A1%E5%9E%8B%E5%92%8C%E5%85%B3%E7%B3%BB%E8%BF%90%E7%AE%97%E7%90%86%E8%AE%BA/"/>
      <url>2021/03/15/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%95%E8%AE%BA%20%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E5%85%B3%E7%B3%BB%E8%BF%90%E7%AE%97%E6%A8%A1%E5%9E%8B%E5%92%8C%E5%85%B3%E7%B3%BB%E8%BF%90%E7%AE%97%E7%90%86%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="2-1-关系模型的基本概念"><a href="#2-1-关系模型的基本概念" class="headerlink" title="2.1 关系模型的基本概念"></a>2.1 关系模型的基本概念</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li><p>用二维表格表示实体集，用关键码进行数据导航</p></li><li><p>属性、属性值、关系模式、元组、关系、行、列</p></li><li><p>关系元数、基数</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210309183459.png" alt="image-20210309183459413"></p></li><li><p>关键码</p><ul><li>超键</li><li>候选键</li><li>主键</li><li>外键</li></ul></li></ul><h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><p>关系：属性数目和类型相同的元组的集合</p><ul><li>每个属性值都不可分解</li><li>不允许出现重复元组（重复元组关系码会相同）</li><li>不考虑顺序（即行序）</li><li>属性理论上也无序，但使用时按习惯排列</li></ul><h3 id="完整性规则"><a href="#完整性规则" class="headerlink" title="完整性规则"></a>完整性规则</h3><ol><li>实体完整性规则：主键不能是空值</li><li>参照完整性规则：“不允许引用不存在的实体”</li><li>用户定义的完整性规则：针对具体的数据进行的约束</li></ol><h3 id="ER模型向关系模型的转换规则"><a href="#ER模型向关系模型的转换规则" class="headerlink" title="ER模型向关系模型的转换规则"></a>ER模型向关系模型的转换规则</h3><ol><li>每个实体类型转换成一个关系模式</li><li>二元联系类型的转换<ul><li>1 对 1</li><li>1 对 N</li><li>M 对 N</li></ul></li></ol><h3 id="三级体系结构"><a href="#三级体系结构" class="headerlink" title="三级体系结构"></a>三级体系结构</h3><ul><li>关系模式</li><li>子模式/外模式：给特定用户使用</li><li>存储模式：文件内部的存储方式</li></ul><h3 id="关系模型的形式定义"><a href="#关系模型的形式定义" class="headerlink" title="关系模型的形式定义"></a>关系模型的形式定义</h3><ol><li><p>数据结构：全部数据和相互联系</p></li><li><p>数据操纵：一组完备的高级关系运算，关系代数、关系演算、关系逻辑</p></li><li><p>数据完整性规则</p></li></ol><h2 id="2-2-关系代数"><a href="#2-2-关系代数" class="headerlink" title="2.2 关系代数"></a>2.2 关系代数</h2><p>SQL -&gt; 查询优化 -&gt;关系代数表达式 </p><h3 id="五个基本操作"><a href="#五个基本操作" class="headerlink" title="五个基本操作"></a>五个基本操作</h3><p>并、差、笛卡尔积、投影（选择特定的列/属性）、选择（选择特定的行/元组）</p><h3 id="四个组合操作"><a href="#四个组合操作" class="headerlink" title="四个组合操作"></a>四个组合操作</h3><ul><li>交</li><li>连接 join<ul><li>θ连接</li><li>F连接</li></ul></li><li>自然连接：公共属性上值相等的进行连接</li><li>除法</li></ul><h3 id="关系代数的七个扩充操作"><a href="#关系代数的七个扩充操作" class="headerlink" title="关系代数的七个扩充操作"></a>关系代数的七个扩充操作</h3><ul><li>改名</li><li>广义投影</li><li>赋值</li><li>外连接</li><li>外部并</li><li>半连接</li><li>聚焦操作</li></ul><h2 id="2-3-关系演算"><a href="#2-3-关系演算" class="headerlink" title="2.3 关系演算"></a>2.3 关系演算</h2><h3 id="元组关系演算"><a href="#元组关系演算" class="headerlink" title="元组关系演算"></a>元组关系演算</h3><p>元组关系演算表达式（元组表达式），一般形式：$\{ t|P(t)\}$</p><p>t是元组变量，表示一个元数固定的元组；P是公式，该式表示满足公式P的所有元组t的集合</p><p>公式由原子公式组成，有三种形式<br>$1.R(s)$<br>$2.s[i]\theta u[j]$<br>$3.s[i]\theta a或a\theta u[j]$</p><p>如果元组没有用存在量词或全称量词则是自由元组变量，否则是约束元组变量</p><p>公式（Formulas） 递归定义</p><h3 id="域关系演算"><a href="#域关系演算" class="headerlink" title="域关系演算"></a>域关系演算</h3><p>形为$\{t_1…t_k|P(t_1,…,t_k) \}$</p><p>元组关系表达式到域关系表达式的转换</p><h3 id="关系运算的安全约束和等价性"><a href="#关系运算的安全约束和等价性" class="headerlink" title="关系运算的安全约束和等价性"></a>关系运算的安全约束和等价性</h3><p>定义：在数据库技术中，不产生无限关系和无穷验证的运算称为安全运算，相应的表达式称为安全表达式，所采取的措施称为安全约束。</p><h2 id="2-4-关系代数表达式的优化"><a href="#2-4-关系代数表达式的优化" class="headerlink" title="2.4 关系代数表达式的优化"></a>2.4 关系代数表达式的优化</h2><h3 id="等价变换规则"><a href="#等价变换规则" class="headerlink" title="等价变换规则"></a>等价变换规则</h3><p>连接和笛卡尔积的交换律</p><p>连接和笛卡尔积的结合律</p><p>投影的级联</p><p>选择的级联</p><p>选择和投影操作的交换</p><p>选择对笛卡尔积的分配律</p><p>选择对并的分配律</p><p>选择对集合差的分配律</p><p>选择对自然连接的分配律</p><p>选择对笛卡尔积的分配律</p><p>投影对并的分配律</p><p>选择与连接操作的结合</p><p>并和交的交换律</p><p>并和交的结合律</p><h3 id="优化算法"><a href="#优化算法" class="headerlink" title="优化算法"></a>优化算法</h3><p>最花费时间和空间的运算是笛卡尔积和连接操作，因此有三条启发性规则</p><ul><li><p>尽可能早地执行选择操作</p></li><li><p>尽可能早地执行投影操作</p></li><li><p>避免直接做笛卡尔积，把笛卡尔积操作之前和之后的一连串选择和投影合并起来一起做</p></li></ul><h2 id="2-5-关系逻辑"><a href="#2-5-关系逻辑" class="headerlink" title="2.5 关系逻辑"></a>2.5 关系逻辑</h2>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库引论 第一章 数据库概论</title>
      <link href="2021/03/15/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%95%E8%AE%BA%20%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E5%BF%B5/"/>
      <url>2021/03/15/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%95%E8%AE%BA%20%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="1-1-数据库的由来和发展"><a href="#1-1-数据库的由来和发展" class="headerlink" title="1.1 数据库的由来和发展"></a>1.1 数据库的由来和发展</h2><p>文件系统-&gt;数据库-&gt;数据仓库</p><p>数据库系统：</p><ul><li>层次数据库：IMS</li><li>网状数据库：IDS</li><li>关系数据库：Oracle、DB2 …</li><li>新一代数据库产品：MySQL、MongoDB、Redis、Neoj4、Kafka、Elastic Search …</li></ul><p>大数据时代：大数据思维 — 关联</p><h2 id="1-2-数据描述"><a href="#1-2-数据描述" class="headerlink" title="1.2 数据描述"></a>1.2 数据描述</h2><p>现实世界（概念设计）-&gt;数据库管理系统（逻辑设计）-&gt;数据库（物理设计）</p><p>数据模型：概念数据模型和逻辑数据模型（包括数据结构、数据操作和数据完整性约束）</p><h3 id="概念设计的数据描述"><a href="#概念设计的数据描述" class="headerlink" title="概念设计的数据描述"></a>概念设计的数据描述</h3><p>实体关系模型：实体、属性、联系。</p><p>数据联系的描述：</p><ul><li>二元联系：一对一、一对多、多对多</li><li>三元联系：乘客、飞机、航班</li><li>一元联系：零件和组成</li></ul><p>实体联系图（ER图）</p><h3 id="逻辑设计的数据描述"><a href="#逻辑设计的数据描述" class="headerlink" title="逻辑设计的数据描述"></a>逻辑设计的数据描述</h3><p>主要的数据模型：</p><ul><li>层次模型：树形</li><li>网状模型：有向图（和ER模型直接的映射）</li><li>关系模型：二维表格</li><li>对象模型：实体的模型化（类），对关系模型的补充（对象关系模型）</li></ul><p>数据描述：</p><ul><li>字段 field</li><li>记录 record</li><li>文件 file</li><li>关键码 key</li></ul><h3 id="物理设计的数据描述"><a href="#物理设计的数据描述" class="headerlink" title="物理设计的数据描述"></a>物理设计的数据描述</h3><p>bit、byte、word、block（内存和外存交换信息的最小单位）、bucket、volume</p><h2 id="1-3-数据库体系结构"><a href="#1-3-数据库体系结构" class="headerlink" title="1.3 数据库体系结构"></a>1.3 数据库体系结构</h2><p>三个层次：外部级（用户视图）、概念级（全局视图）、内部级（存储视图）</p><h2 id="1-4-数据库管理系统（DBMS）"><a href="#1-4-数据库管理系统（DBMS）" class="headerlink" title="1.4 数据库管理系统（DBMS）"></a>1.4 数据库管理系统（DBMS）</h2><h3 id="工作模式"><a href="#工作模式" class="headerlink" title="工作模式"></a>工作模式</h3><p>在应用程序和DB之间发挥作用</p><h3 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h3><ol><li>数据库定义</li><li>数据库操纵</li><li>数据库保护</li><li>数据库维护</li><li>数据字典</li></ol><h3 id="模块组成"><a href="#模块组成" class="headerlink" title="模块组成"></a>模块组成</h3><ul><li><p>数据库用户</p></li><li><p>查询处理器</p></li><li>存储管理器</li><li>磁盘存储器</li></ul><h2 id="1-5-数据库系统-（DBS）"><a href="#1-5-数据库系统-（DBS）" class="headerlink" title="1.5 数据库系统 （DBS）"></a>1.5 数据库系统 （DBS）</h2>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis</title>
      <link href="2021/03/14/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/"/>
      <url>2021/03/14/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/</url>
      
        <content type="html"><![CDATA[<p>Redis 是速度非常快的非关系型（NoSQL）内存键值数据库，可以存储键和五种不同类型的值之间的映射。</p><p>数据类型</p><ul><li>STRING：字符串、整数或者浮点数</li><li>LIST：列表</li><li>SET：无序集合</li><li>HASH：包含键值对的无序散列表</li><li>ZEST：有序集合</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL</title>
      <link href="2021/03/14/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/"/>
      <url>2021/03/14/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/</url>
      
        <content type="html"><![CDATA[<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>B Tree 平衡树：一颗查找树，且所有叶子节点位于同一层</p><p>B+ Tree：基于B Tree和叶子节点顺序访问指针实现，一个节点中的 key 从左到右非递减排列</p><p>MySQL索引</p><ul><li>B+Tree索引</li><li>哈希索引</li><li>全文索引</li><li>空间数据索引</li></ul><p>索引对中到大型的表十分有效，非常小的表适合直接全表扫描，特大型的表需要使用别的技术，比如分区技术。</p><h2 id="查询性能优化"><a href="#查询性能优化" class="headerlink" title="查询性能优化"></a>查询性能优化</h2><ul><li><p>优化数据访问</p><ul><li>减少请求的数据量</li><li>减少服务器扫描的次数</li></ul></li><li><p>重构查询方式</p><ul><li>切分大查询</li><li>分解大连接查询</li></ul></li></ul><h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><ul><li><p>InnoDB：MySQL默认的事务存储引擎</p></li><li><p>MyISAM</p></li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul><li>整型：TINYINT, SMALLINT, MEDIUMINT, INT, BIGINT </li><li>浮点数：FLOAT，DOUBLE，DECIMAL</li><li>字符串：CHAR，VARCHAR（变长）</li><li>时间：DATETIME 和 TIMESTAMP</li></ul><h2 id="切分"><a href="#切分" class="headerlink" title="切分"></a>切分</h2><ul><li>水平切分：将同一个表中的记录拆分到多个结构相同的表中。</li><li>垂直切分：将一张表按列切分成多个表，通常是按照列的关系密集程度进行切分。</li></ul><h2 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h2><ul><li><p>主从复制</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210314170503.png" alt="image-20210314170503058"></p></li><li><p>读写分离：主服务器处理写操作以及实时性要求比较高的读操作，而从服务器处理读操作</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SQL语法</title>
      <link href="2021/03/14/%E6%95%B0%E6%8D%AE%E5%BA%93/SQL%E8%AF%AD%E6%B3%95/"/>
      <url>2021/03/14/%E6%95%B0%E6%8D%AE%E5%BA%93/SQL%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line">## 注释</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> mytable; <span class="comment">-- 注释</span></span><br><span class="line"><span class="comment">/* 注释1</span></span><br><span class="line"><span class="comment">   注释2 */</span></span><br><span class="line">   </span><br><span class="line">## 创建</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE test;</span><br><span class="line">USE test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> mytable (</span><br><span class="line">...</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">## 修改表</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> mytable</span><br><span class="line"><span class="keyword">ADD</span> col <span class="type">CHAR</span>(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> mytable</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">COLUMN</span> col;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> mytable;</span><br><span class="line"></span><br><span class="line">## 插入数据</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> mytable(col1, col2)</span><br><span class="line"><span class="keyword">VALUES</span>(val1, val2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> mytable1(col1, col2)</span><br><span class="line"><span class="keyword">SELECT</span> col1, col2</span><br><span class="line"><span class="keyword">FROM</span> mytable2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> newtable <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> mytable;</span><br><span class="line"></span><br><span class="line">## 更新</span><br><span class="line">UPDATE mytable</span><br><span class="line"><span class="keyword">SET</span> col <span class="operator">=</span> val</span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">## 删除</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">## 查询语法</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> col1, col2</span><br><span class="line"><span class="keyword">FROM</span> mytable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line">LIMIT <span class="number">2</span>, <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">## 排序</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> col1 <span class="keyword">DESC</span>, col2 <span class="keyword">ASC</span>;</span><br><span class="line"></span><br><span class="line">## 过滤</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">WHERE</span> col <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line">## 通配符</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">WHERE</span> col <span class="keyword">LIKE</span> <span class="string">&#x27;[^AB]%&#x27;</span>; </span><br><span class="line"></span><br><span class="line">## 计算</span><br><span class="line"><span class="keyword">SELECT</span> col1 <span class="operator">*</span> col2 <span class="keyword">AS</span> alias</span><br><span class="line"><span class="keyword">FROM</span> mytable;</span><br><span class="line"></span><br><span class="line">## 函数</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(<span class="keyword">DISTINCT</span> col1) <span class="keyword">AS</span> avg_col</span><br><span class="line"><span class="keyword">FROM</span> mytable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">WHERE</span> SOUNDEX(col1) <span class="operator">=</span> SOUNDEX(<span class="string">&#x27;apple&#x27;</span>)</span><br><span class="line"></span><br><span class="line">## 分组</span><br><span class="line"><span class="keyword">SELECT</span> col, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> num</span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> col;</span><br><span class="line"></span><br><span class="line">## 子查询</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> mytable1</span><br><span class="line"><span class="keyword">WHERE</span> col1 <span class="keyword">IN</span> (<span class="keyword">SELECT</span> col2</span><br><span class="line">               <span class="keyword">FROM</span> mytable2);</span><br><span class="line">               </span><br><span class="line">## 连接</span><br><span class="line"><span class="keyword">SELECT</span> A.value, B.value</span><br><span class="line"><span class="keyword">FROM</span> tablea <span class="keyword">AS</span> A <span class="keyword">INNER</span> <span class="keyword">JOIN</span> tableb <span class="keyword">AS</span> B</span><br><span class="line"><span class="keyword">ON</span> A.key <span class="operator">=</span> B.key;<span class="comment">--内连接</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> e1.name</span><br><span class="line"><span class="keyword">FROM</span> employee <span class="keyword">AS</span> e1 <span class="keyword">INNER</span> <span class="keyword">JOIN</span> employee <span class="keyword">AS</span> e2</span><br><span class="line"><span class="keyword">ON</span> e1.department <span class="operator">=</span> e2.department</span><br><span class="line">      <span class="keyword">AND</span> e2.name <span class="operator">=</span> &quot;Jim&quot;;<span class="comment">--自连接</span></span><br><span class="line">      </span><br><span class="line"><span class="keyword">SELECT</span> A.value, B.value</span><br><span class="line"><span class="keyword">FROM</span> tablea <span class="keyword">AS</span> A <span class="keyword">NATURAL</span> <span class="keyword">JOIN</span> tableb <span class="keyword">AS</span> B;<span class="comment">--自然连接</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> Customers.cust_id, Customer.cust_name, Orders.order_id</span><br><span class="line"><span class="keyword">FROM</span> Customers <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> Orders</span><br><span class="line"><span class="keyword">ON</span> Customers.cust_id <span class="operator">=</span> Orders.cust_id;<span class="comment">--外连接</span></span><br><span class="line"></span><br><span class="line">## 组合查询</span><br><span class="line"><span class="keyword">SELECT</span> col</span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">WHERE</span> col <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> col</span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">WHERE</span> col <span class="operator">=</span><span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">## 视图</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> myview <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> Concat(col1, col2) <span class="keyword">AS</span> concat_col, col3<span class="operator">*</span>col4 <span class="keyword">AS</span> compute_col</span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">WHERE</span> col5 <span class="operator">=</span> val;</span><br></pre></td></tr></table></figure><p>其他语法：</p><ul><li>存储</li><li>游标</li><li>触发器</li><li>事务管理</li><li>字符集</li><li>权限管理</li><li>…</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库系统原理</title>
      <link href="2021/03/14/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/"/>
      <url>2021/03/14/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>概念：满足ACID特性的一组操作，Commit提交，Rollback回滚</p><p>ACID：</p><ol><li><p>原子性</p></li><li><p>一致性</p></li><li><p>隔离性</p></li><li><p>持久性</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210311221928.png" alt="image-20210311221928533"></p></li></ol><p>MySQL默认采用自动提交模式，每个查询操作都会被当做一个事务并自动提交</p><h2 id="并发一致性问题"><a href="#并发一致性问题" class="headerlink" title="并发一致性问题"></a>并发一致性问题</h2><p>产生原因：并发环境下，事务的隔离性很难保证</p><ul><li>丢失修改</li><li>读脏数据</li><li>不可重复读</li><li>幻影读</li></ul><h2 id="封锁"><a href="#封锁" class="headerlink" title="封锁"></a>封锁</h2><p>锁开销和并发程度的平衡</p><p>行级锁和表级锁</p><p>类型</p><ol><li>读写锁：互斥锁（X）/共享锁（S） （行级锁）</li><li>意向锁：增加IX/IS（表级锁）</li></ol><p>封锁协议</p><ol><li>三级封锁协议</li><li>两段锁协议</li></ol><h2 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h2><ul><li>未提交读</li><li>提交读</li><li>可重复读</li><li>可串行化</li></ul><p>隔离级别能解决的并发一致性问题</p><div class="table-container"><table><thead><tr><th></th><th>脏读</th><th>不可重复读</th><th>幻影读</th></tr></thead><tbody><tr><td>未提交读</td><td>×</td><td>×</td><td>×</td></tr><tr><td>提交读</td><td>√</td><td>×</td><td>×</td></tr><tr><td>可重复读</td><td>√</td><td>√</td><td>×</td></tr><tr><td>可串行化</td><td>√</td><td>√</td><td>√</td></tr></tbody></table></div><h2 id="多版本并发控制"><a href="#多版本并发控制" class="headerlink" title="多版本并发控制"></a>多版本并发控制</h2><p>MySQL的InnoDB存储引擎实现隔离级别的一种具体方式，用于实现提交读和可重复读这两种隔离级别。</p><h2 id="Next-Key-Locks"><a href="#Next-Key-Locks" class="headerlink" title="Next-Key Locks"></a>Next-Key Locks</h2><p>MySQL的InnoDB存储引擎的一种锁实现。</p><ul><li>Record Locks</li><li>Gap Locks</li><li>Next-Key Locks</li></ul><h2 id="关系数据库设计理论"><a href="#关系数据库设计理论" class="headerlink" title="关系数据库设计理论"></a>关系数据库设计理论</h2><ul><li>函数依赖：B函数依赖于A A-&gt;B</li><li>异常<ul><li>冗余数据</li><li>修改异常</li><li>删除异常</li><li>插入异常</li></ul></li><li>范式：用于解决异常<ul><li>第一范式：属性不可分</li><li>第二范式：每个非主属性完全依赖与键码</li><li>第三范式：非主属性不传递函数依赖于键码</li></ul></li></ul><h2 id="ER图"><a href="#ER图" class="headerlink" title="ER图"></a>ER图</h2><p>Entity-Relationship</p><p>实体、属性、联系</p><p>实体联系</p><ul><li><p>一对一</p></li><li><p>一对多</p></li><li><p>多对多</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210314160721.png" alt="image-20210314160714021"></p></li></ul><p>多次出现的关系</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210314160757.png" alt="image-20210314160757908"></p><p>多向的联系</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210314160905.png" alt="image-20210314160905040"></p><p>子类</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210314160840.png" alt="image-20210314160840089"></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第1章 量化设计与分析基础</title>
      <link href="2021/03/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E4%BD%93%E7%BB%93%E6%9E%84/%E7%AC%AC1%E7%AB%A0%20%E9%87%8F%E5%8C%96%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90%E5%9F%BA%E7%A1%80/"/>
      <url>2021/03/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E4%BD%93%E7%BB%93%E6%9E%84/%E7%AC%AC1%E7%AB%A0%20%E9%87%8F%E5%8C%96%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>体系结构：涵盖了计算机设计的所有三个方面：指令集体系结构、组成、硬件</p><h2 id="可信任度"><a href="#可信任度" class="headerlink" title="可信任度"></a>可信任度</h2><ul><li><p>模块可靠性：从一个参考初始时刻开始持续提供服务的度量。</p></li><li><p>模块可用性：系统正常工作的时间在连续两次正常服务间隔时间中所占的比率 </p><script type="math/tex; mode=display">可用性=\frac{MTTF}{MTTF+MTTR}</script></li></ul><h2 id="性能的测量、报告和汇总"><a href="#性能的测量、报告和汇总" class="headerlink" title="性能的测量、报告和汇总"></a>性能的测量、报告和汇总</h2><p>计算机用户关心缩短响应时间（执行时间），数据处理中心的操作人员关心吞吐量</p><p>X比Y快：X的执行时间比Y少</p><p>响应时间和CPU时间</p><p>基准测试程序：对使用同一种语言编写的程序采用同一种编译器和相同的一组编译标志</p><p>基准测试程序套件：由各种不同的真实应用程序构成，SPEC系列</p><p>SPECRatio：将基准计算机上的执行时间除以待评价计算机上的执行时间，得到一个与性能成正比的比值。用几何平均来计算均值。</p><script type="math/tex; mode=display">几何平均=\sqrt[n]{\prod_{i=1}^{n}{样本_i}}</script><h2 id="计算机设计的量化原理"><a href="#计算机设计的量化原理" class="headerlink" title="计算机设计的量化原理"></a>计算机设计的量化原理</h2><p>充分利用并行性、程序局部性原理（时间和空间）、重点关注经常性事件</p><p>Amdahl定律：加快某部件执行速度所能获得的系统性能加速比，受限于该部件的执行时间占系统中总执行时间的百分比。</p><script type="math/tex; mode=display">加速比=\frac{1}{(1-可改进比例)+\frac{可改进比例}{部件加速比}}</script><p>如果只针对整个任务的一部分进行改进和优化，那么所获得的加速比不超过<strong>1/（1-可改进比例）</strong></p><p>处理器性能公式：</p><script type="math/tex; mode=display">CPU时钟周期数=\sum_{n=1}^{n}{(CPI_i*IC_i)}</script><script type="math/tex; mode=display">总CPI=\frac{时钟周期数}{IC}=\sum_{n=1}^{n}{(CPI_i*\frac{IC_i}{IC})}</script><p>其中$\frac{IC_i}{IC}$表示第i种指令在程序中所占比例</p>]]></content>
      
      
      <categories>
          
          <category> 计算机体系结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Home Page</title>
      <link href="2021/03/13/this-is-home-page/"/>
      <url>2021/03/13/this-is-home-page/</url>
      
        <content type="html"><![CDATA[<p>Welcome to my Blog !</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第二章 算法基础</title>
      <link href="2021/03/13/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
      <url>2021/03/13/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="2-1-插入排序"><a href="#2-1-插入排序" class="headerlink" title="2.1 插入排序"></a>2.1 插入排序</h2><p>不断把元素插入左侧已排序数组的正确位置中</p><p>伪代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> j &lt;- <span class="number">2</span> to length[A]</span><br><span class="line"><span class="keyword">do</span> key &lt;- A[j]</span><br><span class="line">    <span class="comment">//将A[j]插入A[1...j-1]</span></span><br><span class="line">    i = j - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i &gt; <span class="number">0</span> and A[i] &gt; key</span><br><span class="line">         A[i + <span class="number">1</span>] &lt;- A[i]</span><br><span class="line">         i &lt;- i - <span class="number">1</span></span><br><span class="line">    A[i + <span class="number">1</span>] &lt;- key</span><br></pre></td></tr></table></figure><p>正确性证明：循环不变式A[1…j-1]</p><ol><li>初始化：循环第一次迭代前为真</li><li>保持：若循环的某次迭代前为真，那么下次迭代前它仍然为真</li><li>终止：在循环终止时，不变式提供一个性质，该性质有助于证明算法正确性</li></ol><h2 id="2-2-分析算法"><a href="#2-2-分析算法" class="headerlink" title="2.2 分析算法"></a>2.2 分析算法</h2><ul><li><p>描述算法所用资源及其代价的模型：随机访问机RAM模型</p></li><li><p>最坏情况与平均情况分析：往往考虑最坏情况（例如输入数组是反向排好序的）</p></li><li><p>增长量级：只考虑运行时间公式中最重要的项，如Θ(n^2)</p></li></ul><h2 id="2-3-算法设计"><a href="#2-3-算法设计" class="headerlink" title="2.3 算法设计"></a>2.3 算法设计</h2><ul><li><p>分治法（Divide Conquer Combine）</p><p>归并排序</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210308152734.png" alt="image-20210308152734063"></p></li><li><p>归并排序的分析：递归树</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210308153637.png" alt="image-20210308153637122"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法导论 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第三章 函数的增长</title>
      <link href="2021/03/13/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%87%BD%E6%95%B0%E7%9A%84%E5%A2%9E%E9%95%BF/"/>
      <url>2021/03/13/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%87%BD%E6%95%B0%E7%9A%84%E5%A2%9E%E9%95%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="渐进记号"><a href="#渐进记号" class="headerlink" title="渐进记号"></a>渐进记号</h2><ul><li>Θ记号：等于（即T(n) = Θ(g(n))，T(n) = g(n)，这里表示T(n)在一个常量银子内等于g(n)，称g(n)是f(n)的一个渐进紧确界，下同）</li><li>O记号：小于等于、最坏情况，时间复杂度上界</li><li>Ω记号：大于等于</li><li>o记号：小于</li><li>ω记号：大于</li></ul><h2 id="标准记号与常用函数"><a href="#标准记号与常用函数" class="headerlink" title="标准记号与常用函数"></a>标准记号与常用函数</h2><ul><li>多项式</li><li>指数</li><li>对数</li><li>阶乘</li><li>多重函数（多重对数函数lg*n）</li><li>斐波那契数</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法导论 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络 知识点整理</title>
      <link href="2021/03/13/%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%20%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/"/>
      <url>2021/03/13/%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%20%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li><p>ISP：互联网服务提供商，多层次结构</p></li><li><p>通信方式：客户-服务器（C/S），对等（P2P）</p></li><li><p>电路交换和分组交换（时延=排队时延+处理时延+传输时延+传播时延）</p></li><li><p>OSI（七层协议）、五层协议、TCP/IP（四层）</p></li></ul><h2 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h2><ul><li><p>单工通信、半双工通信和全双工通信</p></li><li><p>带通调制：数字信号（离散）-&gt; 模拟信号（连续）</p></li></ul><h2 id="链路层"><a href="#链路层" class="headerlink" title="链路层"></a>链路层</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul><li>封装成帧：给网络层的分组（IP数据报）添加首部和尾部</li><li>透明传输：给数据中和首部尾部相同的内容加转义字符（透明）</li><li>差错检测：主要使用循环冗余码CRC</li></ul><h3 id="信道"><a href="#信道" class="headerlink" title="信道"></a>信道</h3><ul><li>分类：广播信道（用信道复用技术和CSMA/CD协议控制）和点对点信道（用PPP协议控制）</li><li>信道复用技术：频分复用、时分复用、统计时分复用、波分复用、码分复用（码片正交）</li><li>CSMA/CD协议：每个主机都不停监听信道，如果在发送过程中其他主机正在发送，说明发生了碰撞（因为有传播时延），等待一段时间在发送（用截断二进制指数退避法确定时间）</li><li>争用期：传播时延的两倍</li><li>PPP协议：用户计算机和ISP之间的链路层协议</li></ul><h3 id="其他概念"><a href="#其他概念" class="headerlink" title="其他概念"></a>其他概念</h3><ul><li>MAC地址：6字节，用于唯一标识网络适配器（网卡）</li><li>局域网：一种典型的广播信道，主要以太网（星型）等</li><li>交换机：存储MAC地址到接口的映射</li><li>虚拟局域网：用于建立和物理位置无关的逻辑组</li></ul><h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h2><h3 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h3><ul><li><p>数据报格式</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210307211309.jpg" alt="IP former"></p></li><li><p>编址方式：网络号+子网号+主机号、CIDR记法（无分类，网络前缀号+主机号）</p></li></ul><h3 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h3><ul><li>地址解析协议ARP：<br>实现由IP地址得到MAC地址，每个主机上有一个ARP高速缓存，保存本地局域网上的各主机和路由器的IP地址到MAC地址到映射表。若没有映射会发送广播请求。</li><li>网际控制报文协议ICMP<br>更有效地转发IP数据报和提高交付成功的机会。<br>Ping：用来测试两台主机之间的联通性。<br>Traceroute：用来跟踪一个分组从源点到终点的路径。</li></ul><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><ul><li>路由器<br>功能：路由转发和分组转发<br>组成：交换结构、一组输入端口和一组输出端口</li><li>分组转发流程</li><li>路由选择协议<ol><li>内部网关协议RIP</li><li>内部网关协议OSPF</li><li>外部网关协议BGP</li></ol></li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li>虚拟专用网VPN（机构内使用仅在本机有效的专用地址块，有三个）</li><li>网络地址转换NAT：将专用网内部的主机使用的本地IP转换成全球IP</li></ul><h2 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h2><h3 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h3><ul><li><p>格式</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210307213854.png" alt="image-20210307213853892"></p></li><li><p>三次握手</p></li><li><p>四次挥手</p></li><li><p>可靠传输：采用超时重传机制</p></li><li><p>滑动窗口和流量控制</p></li><li><p>拥塞控制</p><ol><li>慢开始和拥塞避免</li><li>快重传与快恢复</li></ol></li></ul><h3 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h3><p>格式</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210307214238.png" alt="image-20210307214238091" style="zoom:50%;" /></p><h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><p>提供主机名和IP地址之间的相互转换</p><h3 id="Web页面请求过程"><a href="#Web页面请求过程" class="headerlink" title="Web页面请求过程"></a>Web页面请求过程</h3><ol><li>DHCP配置主机信息</li><li>ARP解析MAC地址</li><li>DNS解析域名</li><li>HTTP请求页面</li><li>浏览器渲染</li></ol><h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><ul><li>方法、状态码、首部字段</li><li>HTTPS、HTTP1.1特性</li></ul><h3 id="其他协议"><a href="#其他协议" class="headerlink" title="其他协议"></a>其他协议</h3><ul><li>FTP文件传输协议</li><li>DHCP动态主机配置协议</li><li>TELNET远程登录协议</li><li>电子邮件协议SMTP和POP3/IMAP</li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>操作系统 知识点总结</title>
      <link href="2021/03/13/OS/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%20%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
      <url>2021/03/13/OS/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%20%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><h3 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h3><ul><li>进程是资源分配的单位。</li><li>线程是独立调度的基本单位，是进程内部的一个执行序列。是进程划分的更小的运行单位。</li><li>线程共享进程的堆和方法区（元空间），每个线程有自己的程序计数器、虚拟机栈和本地方法栈。</li></ul><h3 id="进程状态"><a href="#进程状态" class="headerlink" title="进程状态"></a>进程状态</h3><p>5种状态：new, ready, running, waiting, terminated.</p><h3 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h3><p>7种常见方式：管道/匿名管道（父子进程或兄弟进程间）、有名管道（实现本机任意两个进程通信）、信号、消息队列（消息的列表，存放在内核，克服了信号承载信息量少，管道只能承载无格式字节流以及缓冲区大小受限等缺陷）、信号量、共享内存、套接字（客户端和服务器之间）。</p><h3 id="进程调度算法"><a href="#进程调度算法" class="headerlink" title="进程调度算法"></a>进程调度算法</h3><ul><li>先到先服务</li><li>短作业优先</li><li>时间片轮转</li><li>多级反馈队列调度</li><li>优先级调度</li></ul><h3 id="进程同步"><a href="#进程同步" class="headerlink" title="进程同步"></a>进程同步</h3><ul><li>概念：临界区、同步与互斥</li><li>信号量解决同步问题</li><li>管程：把同步互斥问题的代码独立出来</li><li>经典问题：哲学家进餐、读者写者</li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ol><li>孤儿进程（父进程退出，子进程还在，没有危害），僵尸进程（子进程退出，父进程没有释放子进程信息，可能因为没有可用进程号导致不能产生新进程）</li><li>线程同步：互斥量、信号量、事件</li><li>实时系统（硬实时和软实时）</li></ol><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><ul><li><p>必要条件：互斥、占有等待、不可抢占、环路等待</p></li><li><p>处理方法</p></li></ul><ol><li>鸵鸟策略：Unix,Linux,Windows都采用</li><li>死锁检测和恢复</li><li>死多预防（破坏必要条件）</li><li>死锁避免：安全状态、银行家算法</li></ol><h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><p>内存管理主要负责内存的分配和回收以及地址转换。</p><h3 id="内存管理机制"><a href="#内存管理机制" class="headerlink" title="内存管理机制"></a>内存管理机制</h3><ul><li><p>虚拟内存：让物理内存扩充成更大的逻辑内存，MMU管理地址空间和物理内存的转换</p></li><li><p>连续：块式</p></li><li><p>非连续</p></li></ul><ol><li>页式：页表（页和页框段映射表），页面号+偏移量。</li><li>段式：一个段构成一个独立地址空间，共享和保护。</li><li>段页式：先分成若干段，每段再分成若干页。</li></ol><ul><li><p>快表TLB（加速虚拟地址到物理地址的转换）和多级页表（避免把全部页表一直放在内存中占用过多空间）。</p></li><li><p>分页大小固定，分段大小不固定，段是逻辑信息的基本单位。分页是一维的，分段是二维的。</p></li><li><p>内部碎片和外部碎片</p></li><li><p>局部性原理：时间局部性和空间局部性</p></li><li><p>页面置换算法</p></li></ul><ol><li>OPT最佳</li><li>FIFO先进先出</li><li>LRU最近最久未使用</li><li>LFU最少使用</li><li>NRU最近未使用</li><li>第二次机会算法</li><li>时钟算法</li></ol><h2 id="存储管理"><a href="#存储管理" class="headerlink" title="存储管理"></a>存储管理</h2><ul><li><p>磁盘结构：盘面、磁道、扇区、磁头、制动手臂、主轴。</p></li><li><p>磁盘调度算法：</p></li></ul><ol><li>先来先服务</li><li>最短寻道时间优先（可能饥饿）</li><li>电梯算法</li></ol>]]></content>
      
      
      <categories>
          
          <category> OS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>操作系统 概论</title>
      <link href="2021/03/13/OS/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%20%E6%A6%82%E8%AE%BA/"/>
      <url>2021/03/13/OS/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%20%E6%A6%82%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="OS"><a href="#OS" class="headerlink" title="OS:"></a>OS:</h2><ol><li>管理计算机硬件和软件资源的程序</li><li>屏蔽了硬件层的复杂性</li><li>操作系统内核是核心，负责内存、硬件、文件系统和应用程序的管理。</li><li>操作系统的位数：根据CPU位数设计的</li><li>特征</li></ol><ul><li><p>并发：宏观</p></li><li><p>共享：互斥和同时</p></li><li><p>虚拟：时分复用/空分复用</p></li><li><p>异步</p></li></ul><h2 id="系统调用："><a href="#系统调用：" class="headerlink" title="系统调用："></a>系统调用：</h2><ol><li>用户态和系统态</li><li>程序需要使用系统级的功能 -&gt; 系统调用</li></ol><ul><li><p>设备管理</p></li><li><p>文件管理</p></li><li><p>进程控制</p></li><li><p>进程通信</p></li><li><p>内存管理</p></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol><li>宏内核（一个紧密结合整体）和微内核（只有微内核模块运行在内核态，其他在用户态）</li><li>中断分类</li></ol><ul><li><p>外中断：CPU执行以外的事件（I/O中断等）</p></li><li><p>异常：CPU执行的内部事件（地址溢出等）</p></li><li><p>陷入：系统调用</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> OS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JVM</title>
      <link href="2021/03/13/Java/JVM/"/>
      <url>2021/03/13/Java/JVM/</url>
      
        <content type="html"><![CDATA[<h2 id="运行时数据区域"><a href="#运行时数据区域" class="headerlink" title="运行时数据区域"></a>运行时数据区域</h2><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210310190456.png" alt="image-20210310190455920"></p><ul><li>程序计数器：记录正在执行的虚拟机字节码指令的地址</li><li>Java虚拟机栈：局部变量表、操作数栈、常量池引用</li><li>本地方法栈：为本地方法服务</li></ul><ul><li>堆：对象分配的内存</li><li>方法区：用于存放已被加载的类信息、常量、静态变量、即使编译器编译后的代码</li><li>运行常量池：方法区的一部分</li><li>直接内存</li></ul><h2 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h2><ul><li><p>判断一个对象是否可回收</p><ol><li>引用计数法</li><li>可达性分析法</li><li>方法区的回收</li><li>finalize()</li></ol></li><li><p>引用类型</p><ol><li>强引用：不会被回收</li><li>软引用：内存不够会回收</li><li>弱引用：一定会回收</li><li>虚引用：唯一目的是能在这个对象被回收时收到一个系统通知</li></ol></li><li><p>垃圾收集算法</p><ol><li><p>标记-清除</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210311201234.png" alt="image-20210311201234494"></p></li><li><p>标记-整理</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210311201254.png" alt="image-20210311201254800"></p></li><li><p>复制</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210311201310.png" alt="image-20210311201310907"></p></li><li><p>分代收集：将堆分为新生代和老年代，新生代用复制算法，老年代用标记-清除/标记-整理算法</p></li></ol></li><li><p>垃圾收集器</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210311201436.png" alt="image-20210311201436702"></p><ol><li>Serial收集器</li><li>ParNew收集器</li><li>Parallel Scavenge收集器</li></ol></li></ul><ol><li><p>Serial Old收集器</p><ol><li><p>Parallel Old收集器</p></li><li><p>CMS收集器</p></li><li>G1收集器</li></ol></li></ol><h2 id="内存分配和回收策略"><a href="#内存分配和回收策略" class="headerlink" title="内存分配和回收策略"></a>内存分配和回收策略</h2><p>Minor GC：回收新生代，执行频繁，速度快</p><p>Full GC：回收老年代和新生代，很少执行，速度慢</p><ul><li><p>内存分配策略</p><ol><li><p>对象优先在Eden分配</p></li><li><p>大对象直接进入老年代</p></li><li><p>长期存活的对象进入老年代</p></li><li><p>动态对象年龄判定</p></li><li>空间分配担保</li></ol></li><li><p>Full GC的触发条件</p><ol><li>调用System.gc()</li><li>老年代空间不足</li><li>空间分配担保失败</li><li>JDK1.7及以前的永久代空间不足</li><li>Concurrent Mode Failure</li></ol></li></ul><h2 id="类加载机制"><a href="#类加载机制" class="headerlink" title="类加载机制"></a>类加载机制</h2><ul><li>类的生命周期</li></ul><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210310192647.png" alt="image-20210310192647844"></p><ul><li>类加载过程<ol><li>加载：<ul><li>通过类的完全限定名称获取定义该类的二进制字节流。</li><li>将该字节流表示的静态存储结构转换为方法区的运行时存储结构。</li><li>在内存中生成一个代表该类的 Class 对象，作为方法区中该类各种数据的访问入口。</li></ul></li><li>验证：确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身安全</li><li>准备：为类变量分配内存并设置初始值，使用的是方法区的内存</li><li>解析：将常量池的符号引用替换为直接引用的过程</li><li>初始化：真正执行类中定义的Java程序的代码</li></ol></li><li>类初始化时机<ol><li>主动引用：五个场景，必须对类初始化<ol><li>遇到new、getstatic、putstatic、invokestatic</li><li>使用java.lang.reflect进行反射调用</li><li>要初始化类，但父类还没初始化</li><li>执行主类（包含main()）</li><li>当使用 JDK 1.7 的动态语言支持时，如果一个 java.lang.invoke.MethodHandle 实例最后的解析结果为 REF_getStatic, REF_putStatic, REF_invokeStatic 的方法句柄</li></ol></li><li>被动引用：不会触发初始化的引用</li></ol></li></ul><p>类和类加载器</p><ul><li>分类：启动类加载器/其他类加载器</li><li>双亲委派模型</li><li>自定义类加载器实现</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java容器</title>
      <link href="2021/03/13/Java/Java%E5%AE%B9%E5%99%A8/"/>
      <url>2021/03/13/Java/Java%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><p>Collection</p><ol><li>Set：TreeSet HashSet LinkedHashSet</li><li>List：ArrayList Vector(线程安全) LinkedList</li><li>Queue：LinkedList PriorityQueue(基于堆结构实现，可以实现优先级队列，构造大顶堆/小顶堆)</li></ol><p>Map：TreeMap HashMap HashTable(线程安全，但应该使用ConcurrentHashMap，其引入了分段锁，效率更高) LinkedHashMap</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>ArrayList</p><ul><li>支持快速随机访问、默认大小为10</li><li>基于动态数组实现，具有动态扩容性</li></ul><p>Vector</p><ul><li>和ArrayList类似，但用了synchronized进行同步，是线程安全的</li><li>可以用Collections.synchronizedList()得到线程安全的ArrayList代替</li></ul><p>CopyOnWriteArrayList</p><ul><li>读写分离，适用读多写少的情况</li></ul><p>LinkedList</p><ul><li>基于双向链表实现</li><li><p>不支持随机访问但插入删除效率高</p></li><li><p>HashSet基于HashMap实现（都是哈希表），LinkedHashSet是HashSet的子类，内部通过LinkedHashMap实现。</p></li><li><p>TreeSet/TreeMap有序且唯一，基于红黑树实现</p></li><li><p>Map（需要键值存储时）：需要排序使用TreeMap，不需要排序使用HashMap，需要保证线程安全时用ConcurrentHashMap</p></li><li>Collection（只需要存放元素）：需要唯一用Set，否则用List</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java基础</title>
      <link href="2021/03/13/Java/Java%E5%9F%BA%E7%A1%80/"/>
      <url>2021/03/13/Java/Java%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>数据类型：</p><ul><li>八大基本数据类型：byte char short int float long double boolean</li><li>包装类型：和基本类型对应，自动装箱和自动拆箱</li><li>缓存池：valueOf方法，如果数值在缓冲池范围内，直接调用缓冲池的对象</li></ul><p>String字符串</p><ul><li>Java8中内部用char数组存储，Java9之后，改用byte数组，并用coder标识编码方式</li><li>String内部定义为final，不可变（可用于缓存hash值）</li><li>StringBuilder（不是线程安全的）和StringBuffer（线程安全）可变</li><li>String Pool：保存所有字符串的字面量，如果还没有则编译时添加，也可用intern()添加</li></ul><p>运算</p><ul><li>Java参数使用值传递</li><li>类型转换：不能隐式向下转型，但++运算符会进行隐式类型转换</li></ul><p>关键字</p><ol><li>final：声明数据常量、声明不可重写方法、声明不可继承类</li><li>static：静态变量、静态方法等</li></ol><p>Object类的通用方法：</p><ul><li>equals()</li><li>hashcode()</li><li>toString()</li><li>clone()：浅拷贝引用同一对象，深拷贝引用不同对象</li><li>…</li></ul><p>继承</p><ul><li>访问权限修饰符：private protected public 不加表示package内可见</li><li>抽象类abstract class、接口interface</li><li>用super访问父类构造函数和成员</li><li>重写Override：重写一个和父类在方法声明上完全一样的方法</li><li>重载Overload：同一个类中指定参数不同的方法</li></ul><p>I/O</p><ul><li>磁盘操作：File</li><li>字节操作：InputStream和OutputStream，适用于媒体文件</li><li>字符操作：Reader和Writer，涉及到字符的时候使用</li><li>对象操作：<br>Serializable<br>序列化：将一个对象转换成字节序列，方便存储传输</li><li>网络操作：Socket</li><li>NIO<br>NIO以块的方式处理数据，I/O用流方式处理<br>NIO非阻塞<br>BIO同步阻塞式、NIO同步非阻塞、AIO异步非阻塞</li></ul><p>其他</p><ul><li><p>运行步骤：源代码经过JDK中的Javac编译成字节码，JVM再转换成可执行的二进制机器码</p></li><li><p>面向对象三大特性：封装、继承和多态</p></li><li><p>反射：运行时提供类的信息 java.lang.reflect</p></li><li><p>异常</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210309120121.png" alt="image-20210309120114463"></p></li><li><p>泛型、注解…</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java并发</title>
      <link href="2021/03/13/Java/Java%E5%B9%B6%E5%8F%91/"/>
      <url>2021/03/13/Java/Java%E5%B9%B6%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h2 id="使用线程"><a href="#使用线程" class="headerlink" title="使用线程"></a>使用线程</h2><ul><li>实现Runnable接口</li><li>实现Callable接口</li><li>继承Thread类</li><li>优先使用实现接口的方法，实现接口的方法只是一个可以在线程中运行的任务，任务是通过线程驱动执行的。</li></ul><h2 id="基础线程机制"><a href="#基础线程机制" class="headerlink" title="基础线程机制"></a>基础线程机制</h2><ul><li>Executor：用于管理多个异步任务<ul><li>CachedThreadPool：一个任务创建一个线程</li><li>FixedThreadPool：所有任务只能使用固定大小的线程</li><li>SingleThreadExecutor：相当于大小为1的FixedThreadPool</li></ul></li><li>Daemon：守护线程</li><li>sleep()：休眠当前正在执行的线程</li><li>yield()：声明当前线程已经完成主要任务，建议切换</li></ul><h2 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h2><ul><li>InterruptedException：中断时如果该线程处于阻塞、限期等待或无限期等待状态会抛出的异常，提前结束线程，但I/O阻塞和synchronized阻塞不能中断</li><li>Interrupted()</li><li>Executor的中断操作：shutdown()和shutdownNow()方法</li></ul><h2 id="互斥同步"><a href="#互斥同步" class="headerlink" title="互斥同步"></a>互斥同步</h2><ul><li>Synchronized：JVM提供，可以用来同步一个代码块/方法/类/静态方法</li><li>ReentrantLock：java.util.concurrent包中的锁（JDK实现的）</li><li>除非使用后者的高级功能，否则优先使用synchronized，不会产生死锁问题，JVM会确保锁的释放</li></ul><h2 id="线程之间的协作"><a href="#线程之间的协作" class="headerlink" title="线程之间的协作"></a>线程之间的协作</h2><ul><li>join()：在一个线程中调用另一个线程的join()方法，会挂起当前线程，直到目标线程结束</li><li>wait() notify() notifyAll()：调用 wait() 使得线程等待某个条件满足，线程在等待时会被挂起，当其他线程的运行使得这个条件满足时，其它线程会调用 notify() 或者 notifyAll() 来唤醒挂起的线程。（Object中的方法）</li><li>Await() signal() signalAll()：java.util.concurrent 类库中提供了 Condition 类来实现线程之间的协调，可以在 Condition 上调用 await() 方法使线程等待，其它线程调用 signal() 或 signalAll() 方法唤醒等待的线程。</li></ul><h2 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h2><ul><li>new 新建</li><li>Runnable 可运行</li><li>Blocked 阻塞（被动）</li><li>Waiting 无限期等待（主动）</li><li>Timed_waiting 限期等待（一定时间后被系统自动唤醒）</li><li>Terminated 死亡</li></ul><h2 id="J-U-C-AQS"><a href="#J-U-C-AQS" class="headerlink" title="J.U.C-AQS"></a>J.U.C-AQS</h2><ul><li>CountDownLatch：用来控制一个或多个线程等待多个线程</li><li>CyclicBarrier：用来控制多个线程互相等待，只有多个线程都到达了，线程才会继续执行</li><li>Semaphore：类似操作系统信号量，控制对互斥资源的访问</li></ul><h2 id="J-U-C-其他组件"><a href="#J-U-C-其他组件" class="headerlink" title="J.U.C-其他组件"></a>J.U.C-其他组件</h2><ul><li>FutureTask：可以异步获取执行结果或取消执行任务的场景</li><li>BlockingQueue：提供FIFO和优先级的阻塞队列实现方法，可以用于实现生产者消费者问题</li><li>ForkJoin：用于并行计算，类似于MapReduce</li></ul><h2 id="Java内存模型"><a href="#Java内存模型" class="headerlink" title="Java内存模型"></a>Java内存模型</h2><ul><li><p>主内存与工作内存</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210311194849.png" alt="image-20210311194849104"></p><p>所有变量都存储在主内存中</p></li><li><p>内存间交互操作：8个操作实现主内存和工作内存的交互</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210311194952.png" alt="image-20210311194952576"></p></li><li><p>内存模型三大特性</p><ul><li>原子性：上述8个操作具有原子性</li><li>可见性：一个线程修改共享变量的值，其他线程能够立刻得知修改（实现方式有volatile、synchronized、final）</li><li>有序性：本线程内观察，所有操作都是有序的；在一个线程内观察另一个线程，所有操作都是无序的</li></ul></li><li><p>先行发生原则：让一个操作无需控制就能先于另一个操作完成</p><ol><li>单一线程原则</li><li>管程锁定原则</li><li>volatile变量规则</li><li>线程启动规则</li><li>线程加入规则</li><li>线程中断规则</li><li>对象终结规则</li><li>传递性</li></ol></li></ul><h2 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h2><ul><li>不可变：一定线程安全，有final、String、枚举类型、Number部分子类</li><li>互斥同步：sychronized和ReentrantLock（阻塞同步）</li><li>非阻塞同步：乐观的并发策略，先执行，有冲突再补偿<ul><li>CAS乐观锁</li><li>AtomicInteger</li><li>ABA</li></ul></li><li>无同步方案：当方法不涉及共享数据时，就不用同步措施<ul><li>栈封闭</li><li>线程本地存储</li><li>可重入代码</li></ul></li></ul><h2 id="锁优化"><a href="#锁优化" class="headerlink" title="锁优化"></a>锁优化</h2><p>主要指JVM对synchronized的优化</p><ul><li>自旋锁：让一个线程在请求一个共享数据的锁时忙循环一段时间，若能获得锁，则可以避免阻塞状态</li><li>锁消除：对于检测出不可能存在竞争的共享数据的锁进行消除</li><li>锁粗化：若频繁对一个对象加锁解锁，则将加锁范围扩展到整个操作序列的外部</li><li>轻量级锁和偏向锁：JDK1.6引入</li></ul><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><ol><li><p>给线程起有意义的名字</p></li><li><p>缩小同步范围</p></li><li><p>多用同步工具少用wait()和notify()</p></li><li><p>使用BlockingQueue实现生产者消费者问题</p></li><li><p>多用并发集合少用同步集合</p></li><li><p>使用本地变量和不可变类来保证安全</p></li><li><p>使用线程池而不是直接创建线程</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>上车问题</title>
      <link href="2021/03/13/%E7%AE%97%E6%B3%95%E9%A2%98%E8%A7%A3/%E4%B8%8A%E8%BD%A6%E9%97%AE%E9%A2%98/"/>
      <url>2021/03/13/%E7%AE%97%E6%B3%95%E9%A2%98%E8%A7%A3/%E4%B8%8A%E8%BD%A6%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>问题描述：火车从始发站（第 1站）开出，在始发站上车的人数为 a，然后到达第 2 站，在第 2 站有人上、下车，但上、下车的人数相同，因此在第 2 站开出时车上的人数保持为 a 人。从第 3 站起，上、下车的人数有如下规律：上车的人数都是前两站上车人数之和，而下车人数等于上一站上车人数，一直到终点站的前一站。已知：共有 n 个车站，始发站上车的人数为 a ，终点站全部下车的人数是 m。试问 第x 站开出时车上的人数是多少？程序运行时，先输入四个整数：始发站上车人数 a，车站数 n，终点站下车人数 m 和所求的站点编号 x。要求输出从 x 站开出时车上的人数。</p><p>根据题意列出上车下车人数的表格：</p><div class="table-container"><table><thead><tr><th>车站</th><th>进站前人数</th><th>上车人数</th><th>下车人数</th><th>出站人数</th></tr></thead><tbody><tr><td>1</td><td>0</td><td>a</td><td>0</td><td>a</td></tr><tr><td>2</td><td>a</td><td>b</td><td>b</td><td>a</td></tr><tr><td>3</td><td>a</td><td>a+b</td><td>b</td><td>2a</td></tr><tr><td>4</td><td>2a</td><td>a+2b</td><td>a+b</td><td>2a+b</td></tr><tr><td>5</td><td>2a+b</td><td>2a+3b</td><td>a+2b</td><td>3a+2b</td></tr><tr><td>…</td><td>…</td><td>…</td><td>…</td><td>…</td></tr><tr><td>n-1</td><td>?</td><td>?</td><td>?</td><td>m</td></tr><tr><td>n</td><td>m</td><td>0</td><td>m</td><td>0</td></tr></tbody></table></div><p>根据表格本题的关键在于根据m求出b</p><p><em>m=f(n-1)a+g(n-1)b</em></p><p>求出f和g即可</p><p>而出站人数=进站人数 + 上车人数 - 下车人数</p><p>每站的上车人数和下车人数可以根据题意递推求得</p><p>据此可解决问题</p><p>C++代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cin</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//每一站上了多少a</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">upa</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> upa(n<span class="number">-1</span>) + upa(n<span class="number">-2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//每一站上了多少b</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">upb</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> upb(n<span class="number">-1</span>) + upb(n<span class="number">-2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//每一站下了多少a</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">downa</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span> || n==<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> upa(n<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//每一站下了多少b</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">downb</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> upb(n<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//每一站出的时候有多少a</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span> || n==<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (upa(n) - downa(n)) + f(n<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//每一站出的时候有多少b</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">g</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span> || n==<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (upb(n) - downb(n)) + g(n<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a, n, m, x;</span><br><span class="line">    <span class="keyword">int</span> b; <span class="comment">//b表示第二站上车人数</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入始发站上车人数，车站数，终点站下车人数和所求的站点编号：&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>; </span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据定义m=f(n-1)+g(n-1)，据此求出b</span></span><br><span class="line">b = (m-(f(n<span class="number">-1</span>) * a)) / g(n<span class="number">-1</span>);</span><br><span class="line">    <span class="comment">//计算第x站出站后人数</span></span><br><span class="line">ans = (f(x)*a) + (g(x)*b);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">&quot;第&quot;</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;x;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">&quot;站开出时车上的人数是:&quot;</span>; </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法题解 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/03/13/hello-world/"/>
      <url>2021/03/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
