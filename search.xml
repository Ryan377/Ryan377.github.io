<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>第26章 最大流</title>
      <link href="2021/06/09/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA_todo(4)/%E7%AC%AC26%E7%AB%A0-%E6%9C%80%E5%A4%A7%E6%B5%81/"/>
      <url>2021/06/09/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA_todo(4)/%E7%AC%AC26%E7%AB%A0-%E6%9C%80%E5%A4%A7%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h2 id="流网络"><a href="#流网络" class="headerlink" title="流网络"></a>流网络</h2><p><strong>流网络和流</strong></p><p>流网络：容量值、源结点、汇点</p><p>流的性质：</p><ol><li>容量限制</li><li>流量守恒</li></ol><p>具有多个源结点和汇结点的网络：加入一个超级源结点和超级汇点</p><h2 id="ford-fulkerson算法"><a href="#ford-fulkerson算法" class="headerlink" title="ford-fulkerson算法"></a>ford-fulkerson算法</h2><h2 id="最大二分匹配"><a href="#最大二分匹配" class="headerlink" title="最大二分匹配"></a>最大二分匹配</h2><h2 id="推送重贴标签算法"><a href="#推送重贴标签算法" class="headerlink" title="推送重贴标签算法"></a>推送重贴标签算法</h2><h2 id="前置重贴标签算法"><a href="#前置重贴标签算法" class="headerlink" title="前置重贴标签算法"></a>前置重贴标签算法</h2>]]></content>
      
      
      <categories>
          
          <category> 算法导论 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>流水线CPU设计</title>
      <link href="2021/05/31/%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C_todo(2)/%E6%B5%81%E6%B0%B4%E7%BA%BFCPU%E8%AE%BE%E8%AE%A1/"/>
      <url>2021/05/31/%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C_todo(2)/%E6%B5%81%E6%B0%B4%E7%BA%BFCPU%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 体系结构实验 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Tomasulo算法</title>
      <link href="2021/05/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84_todo/Tomasulo%E7%AE%97%E6%B3%95/"/>
      <url>2021/05/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84_todo/Tomasulo%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> 计算机体系结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第8章 线程级并行</title>
      <link href="2021/05/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84_todo/%E7%AC%AC8%E7%AB%A0-%E7%BA%BF%E7%A8%8B%E7%BA%A7%E5%B9%B6%E8%A1%8C/"/>
      <url>2021/05/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84_todo/%E7%AC%AC8%E7%AB%A0-%E7%BA%BF%E7%A8%8B%E7%BA%A7%E5%B9%B6%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> 计算机体系结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第7章 互联网络</title>
      <link href="2021/05/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84_todo/%E7%AC%AC7%E7%AB%A0-%E4%BA%92%E8%81%94%E7%BD%91%E7%BB%9C/"/>
      <url>2021/05/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84_todo/%E7%AC%AC7%E7%AB%A0-%E4%BA%92%E8%81%94%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> 计算机体系结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第6章 向量体系结构</title>
      <link href="2021/05/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84_todo/%E7%AC%AC6%E7%AB%A0-%E5%90%91%E9%87%8F%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
      <url>2021/05/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84_todo/%E7%AC%AC6%E7%AB%A0-%E5%90%91%E9%87%8F%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> 计算机体系结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>系统实现技术</title>
      <link href="2021/05/18/%E6%95%B0%E6%8D%AE%E5%BA%93_todo(1)/%E7%B3%BB%E7%BB%9F%E5%AE%9E%E7%8E%B0%E6%8A%80%E6%9C%AF/"/>
      <url>2021/05/18/%E6%95%B0%E6%8D%AE%E5%BA%93_todo(1)/%E7%B3%BB%E7%BB%9F%E5%AE%9E%E7%8E%B0%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>事务是构成单一逻辑工作单元的操作集合。由一系列下面这些操作构成：</p><ul><li>读数据库对象：磁盘-&gt;缓冲区-&gt;程序</li><li>对数据库对象的写操作：缓冲区-&gt;磁盘</li></ul><p>在程序中，事务以BEGIN TRANSACTION开始，以COMMIT语句或ROLLBACK语句结束。</p><p>性质（ACID）</p><ul><li>原子性：事务是一个不可分割的工作单元；</li><li>一致性：数据不会因事务的执行而遭受破坏；</li><li>隔离性：在多个事务并发执行时，系统应保证这些事务先后单独执行时的结果一样；</li><li>持久性：一个事务一旦完成全部操作后，它对数据库的所有更新应永久地反映在数据库中。</li></ul><span id="more"></span><p>事务状态变迁图</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210525152743.png" alt="事务状态变迁图"></p><p><strong>分布式事务</strong></p><p>两段式提交：参与者将操作成败通知协调者，再由协调者根据所有参与者的反馈情报决定各参与者是否要提交操作还是中止操作。</p><p>缺点：</p><ul><li>同步阻塞问题</li><li>单点故障</li><li>数据不一致</li><li>…</li></ul><p>分布式系统中的三个特性（CAP原理）：</p><ul><li>一致性：在分布式系统中的所有数据备份，在同一时刻是否同样的值。</li><li>可用性：在集群中一部分节点故障后，集群整体是否还能响应客户端的读写请求。</li><li>分区容错性：分区相当于对通信的时限要求。系统如果不能在时限内达成数据一致性，这就意味着发生了分区的情况，必须就当前操作在C和A之间做出选择。</li></ul><h2 id="数据库恢复"><a href="#数据库恢复" class="headerlink" title="数据库恢复"></a>数据库恢复</h2><p><strong>存储器类型</strong></p><ol><li>易失存储器：内存，Cache</li><li>非易失存储器：磁盘和磁带</li><li>稳定存储器：信息绝不会丢失，实现：数据备份、数据银行</li></ol><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210604084237.png" alt="数据访问"></p><p><strong>恢复的基本原则和实现方法</strong></p><p>基本原则：冗余，即数据库重复存储</p><p>实现方法：转储和建立日志</p><p>检查点技术：类似于数据库快照</p><p>日志：每条日志记录有一个id，称为LSN，日志记录顺序地存放在日志文件中，可以很快地访问到，记录对页的修改、commit信息等。</p><p><strong>恢复</strong></p><p>恢复管理器：主要保证事务的原子性和持久性，主要目的是从system crash和media crash中恢复出来</p><p>ARIES算法：</p><ol><li>Analysis：找出还没有写到硬盘上的脏数据，和Crash时活跃的事务</li><li>Redo：重做已提交的操作，根据log将系统恢复到系统崩溃之前的状态</li><li>Undo：消除没有提交的事务对数据库的修改</li></ol><p>SQL对事务的支持</p><ul><li>无begin transaction</li><li>Commit</li><li>Rollback</li><li>游标</li></ul><h2 id="数据库的并发控制"><a href="#数据库的并发控制" class="headerlink" title="数据库的并发控制"></a>数据库的并发控制</h2><p><strong>问题</strong></p><ol><li>丢失更新</li><li>读脏数据</li><li>错误求和</li><li>不可重复读</li></ol><p><strong>并发控制与事务</strong></p><ul><li>并发计算的目的<ul><li>通过并行计算，提高系统的吞吐能力</li><li>通过并行计算，提高小查询的响应速度</li></ul></li><li>串行化问题<ul><li>保证并发事务的执行同事务一个一个串行执行的效果是一样的</li><li>串行化问题不应受终止的事务的影响</li><li>事务的执行结果以对数据库的影响为标准</li></ul></li></ul><p><strong>封锁技术</strong></p><p>封锁是控制并发执行的主要技术</p><p>有两种锁：排他型封锁（X锁）和共享型封锁（S锁）</p><p>封锁相容矩阵</p><div class="table-container"><table><thead><tr><th>T1/T2</th><th>X</th><th>S</th><th>-</th></tr></thead><tbody><tr><td>X</td><td>N</td><td>N</td><td>Y</td></tr><tr><td>S</td><td>N</td><td>Y</td><td>Y</td></tr><tr><td>-</td><td>Y</td><td>Y</td><td>Y</td></tr></tbody></table></div><p><strong>封锁粒度</strong></p><p>封锁对象的大小称为封锁的粒度</p><p>粒度越大，并发度越小，开销越小</p><p>粒度越小，并发度越高，开销越高</p><p><strong>并发操作的的调度</strong></p><ul><li>串行调度</li><li>并行调度</li><li>可串行化</li></ul><p><strong>两段封锁协议</strong></p><ul><li>在对任何一个数据进行读写操作之前，事务必须获得对该数据的封锁</li><li>在释放一个封锁之后，事务不再获得任何其他封锁</li><li>遵守该协议的事务分为两个阶段：获得封锁、释放封锁</li><li>如果所有事务都遵守两段封锁协议，则所有可能的并发调度都是可串行化的</li></ul><p><strong>SQL事务</strong></p><p>存取模式：只读型、读写型</p><p>隔离级别：可串行化、可重复读、读提交数据、可以读未提交数据</p><p><strong>基于时标的并发控制</strong></p><p>时标：在事务Ti运行时，有唯一的时间标志，称为时标或时戳，用TS(Ti)实现</p><p>时标顺序协议</p><h2 id="并发事务的可串行化和可恢复性"><a href="#并发事务的可串行化和可恢复性" class="headerlink" title="并发事务的可串行化和可恢复性"></a>并发事务的可串行化和可恢复性</h2><p><strong>并发事务的可串行化</strong></p><p>调度是不是“冲突等价”的。</p><p><strong>并发事务的可恢复性</strong></p><p>如果存在某个事务Ti读了其它事务未提交的数据，随后事务Tj立即执行COMMIT操作，这种调度称为“不可恢复”的调度。否则称为“可恢复”的调度。</p><h2 id="数据库的完整性"><a href="#数据库的完整性" class="headerlink" title="数据库的完整性"></a>数据库的完整性</h2><p>数据的正确性、有效性和相容性</p><p>完整性子系统的主要功能：</p><ol><li>监督事务的执行，并测试是否违反完整性规则</li><li>若有违反现象，则采取恰当的操作，比如拒绝操作、报告违反情况、改正错误等方法来处理。</li></ol><p><strong>SQL中的完整性约束</strong></p><ul><li>候选键定义</li><li>外键定义</li><li>在实际应用中，作为主键的关系称为参照表，作为外键的关系称为依赖表</li></ul><p><strong>SQL触发器</strong></p><p>一个能由系统自动执行对数据库修改的语句，触发器有时也称为主动规则或事件-条件-动作规则。</p><h2 id="数据库的安全性"><a href="#数据库的安全性" class="headerlink" title="数据库的安全性"></a>数据库的安全性</h2><p>DB安全性是指保护DB，防止不合法的使用，以免数据的泄密、更改或破坏。</p><h2 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h2><p>存储过程是一系列预先编辑好的、能实现特定数据操作功能的SQL代码集，它与特定是数据库相关联，存储在数据库服务器上。用户可以像使用函数一样重复调用这些存储过程，实现它所定义的操作。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>一个基于B+树索引简单的数据库</title>
      <link href="2021/05/14/%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8EB+%E6%A0%91%E7%B4%A2%E5%BC%95%E7%AE%80%E5%8D%95%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>2021/05/14/%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8EB+%E6%A0%91%E7%B4%A2%E5%BC%95%E7%AE%80%E5%8D%95%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h2 id="程序流程图"><a href="#程序流程图" class="headerlink" title="程序流程图"></a>程序流程图</h2><span id="more"></span><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210519184925.png" alt="数据库实现"></p><h2 id="数据库系统结构"><a href="#数据库系统结构" class="headerlink" title="数据库系统结构"></a>数据库系统结构</h2><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210521142053.png" alt="数据库结构"></p><h2 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h2><h3 id="叶子节点"><a href="#叶子节点" class="headerlink" title="叶子节点"></a>叶子节点</h3><p><img src="https://cstack.github.io/db_tutorial/assets/images/leaf-node-format.png" alt="Our leaf node format"></p><p>（图中少标注了一个next_leaf_pointer）</p><h3 id="内部节点"><a href="#内部节点" class="headerlink" title="内部节点"></a>内部节点</h3><p><img src="https://cstack.github.io/db_tutorial/assets/images/internal-node-format.png" alt="Our internal node format"></p><h2 id="完整代码（待完善）"><a href="#完整代码（待完善）" class="headerlink" title="完整代码（待完善）"></a>完整代码（待完善）</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INPUT_BUFFER_SIZE 31</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  <span class="keyword">char</span> buffer[INPUT_BUFFER_SIZE + <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">size_t</span> length;</span><br><span class="line">&#125; input_buffer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">  INPUT_SUCCESS,</span><br><span class="line">  INPUT_TOO_LONG</span><br><span class="line">&#125; InputResult;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">  EXECUTE_SUCCESS</span><br><span class="line">&#125; ExecuteResult;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">  META_COMMAND_SUCCESS,</span><br><span class="line">  META_COMMAND_UNRECOGNIZED_COMMAND</span><br><span class="line">&#125; MetaCommandResult;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">  PREPARE_SUCCESS,</span><br><span class="line">  PREPARE_NEGATIVE_VALUE,</span><br><span class="line">  PREPARE_STRING_TOO_LONG,</span><br><span class="line">  PREPARE_SYNTAX_ERROR,</span><br><span class="line">  PREPARE_UNRECOGNIZED_STATEMENT,</span><br><span class="line">  PREPARE_EMPTY_STATEMENT</span><br><span class="line">&#125; PrepareResult;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">  STATEMENT_INSERT,</span><br><span class="line">  STATEMENT_SELECT,</span><br><span class="line">  STATEMENT_DELETE</span><br><span class="line">&#125; StatementType;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_prompt</span><span class="params">()</span> </span>&#123; <span class="built_in">printf</span>(<span class="string">&quot;myjql&gt; &quot;</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function">InputResult <span class="title">read_input</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">/* we read the entire line as the input */</span></span><br><span class="line">  input_buffer.length = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (input_buffer.length &lt;= INPUT_BUFFER_SIZE</span><br><span class="line">    &amp;&amp; (input_buffer.buffer[input_buffer.length++] = getchar()) != <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">    &amp;&amp; input_buffer.buffer[input_buffer.length - <span class="number">1</span>] != EOF);</span><br><span class="line">  <span class="keyword">if</span> (input_buffer.buffer[input_buffer.length - <span class="number">1</span>] == EOF)</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_SUCCESS);</span><br><span class="line">  input_buffer.length--;</span><br><span class="line">  <span class="comment">/* if the last character is not new-line, the input is considered too long,</span></span><br><span class="line"><span class="comment">     the remaining characters are discarded */</span></span><br><span class="line">  <span class="keyword">if</span> (input_buffer.length == INPUT_BUFFER_SIZE</span><br><span class="line">    &amp;&amp; input_buffer.buffer[input_buffer.length] != <span class="string">&#x27;\n&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">while</span> (getchar() != <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> INPUT_TOO_LONG;</span><br><span class="line">  &#125;</span><br><span class="line">  input_buffer.buffer[input_buffer.length] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> INPUT_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> COLUMN_B_SIZE 11</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  <span class="keyword">uint32_t</span> a;</span><br><span class="line">  <span class="keyword">char</span> b[COLUMN_B_SIZE + <span class="number">1</span>];</span><br><span class="line">&#125; Row;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  StatementType type;</span><br><span class="line">  Row row;</span><br><span class="line">  <span class="keyword">uint8_t</span> flag; <span class="comment">/* whether row.a, row.b have valid values */</span></span><br><span class="line">&#125; statement;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义Row序列化的布局</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> size_of_attribute(Struct, Attribute) sizeof(((Struct*)0)-&gt;Attribute)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> a_SIZE size_of_attribute(Row, a)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> b_SIZE size_of_attribute(Row, b)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> a_OFFSET 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> b_OFFSET (a_OFFSET + a_SIZE)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ROW_SIZE (a_SIZE + b_SIZE)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PAGE_SIZE 4096</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TABLE_MAX_PAGES 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> file_descriptor;</span><br><span class="line">  <span class="keyword">uint32_t</span> file_length;</span><br><span class="line">  <span class="keyword">uint32_t</span> num_pages;</span><br><span class="line">  <span class="keyword">void</span>* pages[TABLE_MAX_PAGES];</span><br><span class="line">&#125;Pager;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  Pager* pager;</span><br><span class="line">  <span class="keyword">uint32_t</span> root_page_num;</span><br><span class="line">&#125;table;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">  <span class="keyword">uint32_t</span> page_num;</span><br><span class="line">  <span class="keyword">uint32_t</span> cell_num;</span><br><span class="line">  <span class="keyword">bool</span> end_of_table;</span><br><span class="line">&#125;Cursor;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_row</span><span class="params">(Row* row)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;(%d, %s)\n&quot;</span>, row-&gt;a, row-&gt;b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* B-Tree operations */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span> NODE_INTERNAL, NODE_LEAF &#125; NodeType;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 节点公共头部布局</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NODE_TYPE_SIZE sizeof(uint8_t) <span class="comment">// 节点类型</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NODE_TYPE_OFFSET 0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_ROOT_SIZE sizeof(uint8_t) <span class="comment">// 是否为根节点</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_ROOT_OFFSET NODE_TYPE_SIZE</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PARENT_POINTER_SIZE sizeof(uint32_t) <span class="comment">// 父节点的指针</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PARENT_POINTER_OFFSET (IS_ROOT_OFFSET + IS_ROOT_SIZE)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> COMMON_NODE_HEADER_SIZE (NODE_TYPE_SIZE + IS_ROOT_SIZE + PARENT_POINTER_SIZE)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 内部节点头部布局</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INTERNAL_NODE_NUM_KEYS_SIZE sizeof(uint32_t) <span class="comment">//key的数量</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INTERNAL_NODE_NUM_KEYS_OFFSET COMMON_NODE_HEADER_SIZE</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INTERNAL_NODE_RIGHT_CHILD_SIZE sizeof(uint32_t) <span class="comment">// 最右子节点指针</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INTERNAL_NODE_RIGHT_CHILD_OFFSET (INTERNAL_NODE_NUM_KEYS_OFFSET + INTERNAL_NODE_NUM_KEYS_SIZE)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INTERNAL_NODE_HEADER_SIZE (COMMON_NODE_HEADER_SIZE + INTERNAL_NODE_NUM_KEYS_SIZE + INTERNAL_NODE_RIGHT_CHILD_SIZE)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 内部节点结构体布局</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INTERNAL_NODE_KEY_SIZE (sizeof(char)*12) <span class="comment">// 关键字</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INTERNAL_NODE_CHILD_SIZE sizeof(uint32_t) <span class="comment">// 关键字对应子节点指针</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INTERNAL_NODE_CELL_SIZE (INTERNAL_NODE_CHILD_SIZE + INTERNAL_NODE_KEY_SIZE)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INTERNAL_NODE_MAX_CELLS 30</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 叶子节点头部定义</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEAF_NODE_NUM_CELLS_SIZE sizeof(uint32_t) <span class="comment">// cell数量</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEAF_NODE_NUM_CELLS_OFFSET COMMON_NODE_HEADER_SIZE</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEAF_NODE_NEXT_LEAF_SIZE sizeof(uint32_t) <span class="comment">// 下一叶节点指针</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEAF_NODE_NEXT_LEAF_OFFSET (LEAF_NODE_NUM_CELLS_OFFSET + LEAF_NODE_NUM_CELLS_SIZE)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEAF_NODE_HEADER_SIZE (COMMON_NODE_HEADER_SIZE + LEAF_NODE_NUM_CELLS_SIZE + LEAF_NODE_NEXT_LEAF_SIZE)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 叶子节点结构体定义</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEAF_NODE_KEY_SIZE (sizeof(char)*12) <span class="comment">// 关键字</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEAF_NODE_KEY_OFFSET 0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEAF_NODE_VALUE_SIZE ROW_SIZE <span class="comment">// 存储的数据(Row)</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEAF_NODE_VALUE_OFFSET (LEAF_NODE_KEY_OFFSET + LEAF_NODE_KEY_SIZE)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEAF_NODE_CELL_SIZE (LEAF_NODE_KEY_SIZE + LEAF_NODE_VALUE_SIZE)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEAF_NODE_SPACE_FOR_CELLS (PAGE_SIZE - LEAF_NODE_HEADER_SIZE)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEAF_NODE_MAX_CELLS (LEAF_NODE_SPACE_FOR_CELLS / LEAF_NODE_CELL_SIZE)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEAF_NODE_RIGHT_SPLIT_COUNT ((LEAF_NODE_MAX_CELLS + 1) / 2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEAF_NODE_LEFT_SPLIT_COUNT ((LEAF_NODE_MAX_CELLS + 1) - LEAF_NODE_RIGHT_SPLIT_COUNT)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// B+树基本功能函数定义</span></span><br><span class="line"></span><br><span class="line"><span class="function">NodeType <span class="title">get_node_type</span><span class="params">(<span class="keyword">void</span>* node)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">uint8_t</span> value = *((<span class="keyword">uint8_t</span>*)(node + NODE_TYPE_OFFSET));</span><br><span class="line">  <span class="keyword">return</span> (NodeType)value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_node_type</span><span class="params">(<span class="keyword">void</span>* node, NodeType type)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">uint8_t</span> value = type;</span><br><span class="line">  *((<span class="keyword">uint8_t</span>*)(node + NODE_TYPE_OFFSET)) = value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_node_root</span><span class="params">(<span class="keyword">void</span>* node)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">uint8_t</span> value = *((<span class="keyword">uint8_t</span>*)(node + IS_ROOT_OFFSET));</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">bool</span>)value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_node_root</span><span class="params">(<span class="keyword">void</span>* node, <span class="keyword">bool</span> is_root)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">uint8_t</span> value = is_root;</span><br><span class="line">  *((<span class="keyword">uint8_t</span>*)(node + IS_ROOT_OFFSET)) = value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">uint32_t</span>* <span class="title">node_parent</span><span class="params">(<span class="keyword">void</span>* node)</span> </span>&#123; <span class="keyword">return</span> node + PARENT_POINTER_OFFSET; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">uint32_t</span>* <span class="title">internal_node_num_keys</span><span class="params">(<span class="keyword">void</span>* node)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> node + INTERNAL_NODE_NUM_KEYS_OFFSET;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">uint32_t</span>* <span class="title">internal_node_right_child</span><span class="params">(<span class="keyword">void</span>* node)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> node + INTERNAL_NODE_RIGHT_CHILD_OFFSET;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">uint32_t</span>* <span class="title">internal_node_cell</span><span class="params">(<span class="keyword">void</span>* node, <span class="keyword">uint32_t</span> cell_num)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> node + INTERNAL_NODE_HEADER_SIZE + cell_num * INTERNAL_NODE_CELL_SIZE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">uint32_t</span>* <span class="title">internal_node_child</span><span class="params">(<span class="keyword">void</span>* node, <span class="keyword">uint32_t</span> child_num)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">uint32_t</span> num_keys = *internal_node_num_keys(node);</span><br><span class="line">  <span class="keyword">if</span> (child_num &gt; num_keys) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Tried to access child_num %d &gt; num_keys %d\n&quot;</span>, child_num, num_keys);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (child_num == num_keys) &#123;</span><br><span class="line">    <span class="keyword">return</span> internal_node_right_child(node);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> internal_node_cell(node, child_num);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">internal_node_key</span><span class="params">(<span class="keyword">void</span>* node, <span class="keyword">uint32_t</span> key_num)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">void</span>*)internal_node_cell(node, key_num) + INTERNAL_NODE_CHILD_SIZE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">uint32_t</span>* <span class="title">leaf_node_num_cells</span><span class="params">(<span class="keyword">void</span>* node)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> node + LEAF_NODE_NUM_CELLS_OFFSET;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">uint32_t</span>* <span class="title">leaf_node_next_leaf</span><span class="params">(<span class="keyword">void</span>* node)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> node + LEAF_NODE_NEXT_LEAF_OFFSET;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">leaf_node_cell</span><span class="params">(<span class="keyword">void</span>* node, <span class="keyword">uint32_t</span> cell_num)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> node + LEAF_NODE_HEADER_SIZE + cell_num * LEAF_NODE_CELL_SIZE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">leaf_node_key</span><span class="params">(<span class="keyword">void</span>* node, <span class="keyword">uint32_t</span> cell_num)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> leaf_node_cell(node, cell_num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">leaf_node_value</span><span class="params">(<span class="keyword">void</span>* node, <span class="keyword">uint32_t</span> cell_num)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> leaf_node_cell(node, cell_num) + LEAF_NODE_KEY_SIZE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">get_node_max_key</span><span class="params">(<span class="keyword">void</span>* node)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (get_node_type(node)) &#123;</span><br><span class="line">    <span class="keyword">case</span> NODE_INTERNAL:</span><br><span class="line">      <span class="keyword">return</span> &amp;*internal_node_key(node, *internal_node_num_keys(node) - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">case</span> NODE_LEAF:</span><br><span class="line">      <span class="keyword">return</span> &amp;*leaf_node_key(node, *leaf_node_num_cells(node) - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Pager Cursor</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">get_page</span><span class="params">(Pager* pager, <span class="keyword">uint32_t</span> page_num)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (page_num &gt; TABLE_MAX_PAGES) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Tried to fetch page number out of bounds. %d &gt; %d\n&quot;</span>, page_num,</span><br><span class="line">           TABLE_MAX_PAGES);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (pager-&gt;pages[page_num] == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="comment">// 缓存为0，从文件中分配内存</span></span><br><span class="line">    <span class="keyword">void</span>* page = <span class="built_in">malloc</span>(PAGE_SIZE);</span><br><span class="line">    <span class="keyword">uint32_t</span> num_pages = pager-&gt;file_length / PAGE_SIZE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可能在文件末尾保存一个部分页面</span></span><br><span class="line">    <span class="keyword">if</span> (pager-&gt;file_length % PAGE_SIZE) &#123;</span><br><span class="line">      num_pages += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (page_num &lt;= num_pages) &#123;</span><br><span class="line">      lseek(pager-&gt;file_descriptor, page_num * PAGE_SIZE, SEEK_SET);</span><br><span class="line">      <span class="keyword">ssize_t</span> bytes_read = read(pager-&gt;file_descriptor, page, PAGE_SIZE);</span><br><span class="line">      <span class="keyword">if</span> (bytes_read == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pager-&gt;pages[page_num] = page;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (page_num &gt;= pager-&gt;num_pages) &#123;</span><br><span class="line">      pager-&gt;num_pages = page_num + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> pager-&gt;pages[page_num];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">serialize_row</span><span class="params">(Row* source, <span class="keyword">void</span>* destination)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">memcpy</span>(destination + a_OFFSET, &amp;(source-&gt;a), a_SIZE);</span><br><span class="line">  <span class="built_in">memcpy</span>(destination + b_OFFSET, &amp;(source-&gt;b), b_SIZE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deserialize_row</span><span class="params">(<span class="keyword">void</span>* source, Row* destination)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">memcpy</span>(&amp;(destination-&gt;a), source + a_OFFSET, a_SIZE);</span><br><span class="line">  <span class="built_in">memcpy</span>(&amp;(destination-&gt;b), source + b_OFFSET, b_SIZE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initialize_leaf_node</span><span class="params">(<span class="keyword">void</span>* node)</span> </span>&#123;</span><br><span class="line">  set_node_type(node, NODE_LEAF);</span><br><span class="line">  set_node_root(node, <span class="literal">false</span>);</span><br><span class="line">  *leaf_node_num_cells(node) = <span class="number">0</span>;</span><br><span class="line">  *leaf_node_next_leaf(node) = <span class="number">0</span>;  <span class="comment">// 0 represents no sibling</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initialize_internal_node</span><span class="params">(<span class="keyword">void</span>* node)</span> </span>&#123;</span><br><span class="line">  set_node_type(node, NODE_INTERNAL);</span><br><span class="line">  set_node_root(node, <span class="literal">false</span>);</span><br><span class="line">  *internal_node_num_keys(node) = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Cursor* <span class="title">leaf_node_find</span><span class="params">(<span class="keyword">uint32_t</span> page_num, <span class="keyword">char</span>* key)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">void</span>* node = get_page(table.pager, page_num);</span><br><span class="line">  <span class="keyword">uint32_t</span> num_cells = *leaf_node_num_cells(node);</span><br><span class="line"></span><br><span class="line">  Cursor* cursor = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Cursor));</span><br><span class="line">  cursor-&gt;page_num = page_num;</span><br><span class="line">  cursor-&gt;end_of_table = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Binary search</span></span><br><span class="line">  <span class="keyword">uint32_t</span> min_index = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">uint32_t</span> one_past_max_index = num_cells;</span><br><span class="line">  <span class="keyword">while</span> (one_past_max_index != min_index) &#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> index = (min_index + one_past_max_index) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">char</span>* key_at_index = &amp;*leaf_node_key(node, index);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(key, key_at_index) == <span class="number">0</span>) &#123;</span><br><span class="line">      cursor-&gt;cell_num = index;</span><br><span class="line">      <span class="keyword">return</span> cursor;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(key, key_at_index) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      one_past_max_index = index;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      min_index = index + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  cursor-&gt;cell_num = min_index;</span><br><span class="line">  <span class="keyword">return</span> cursor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">uint32_t</span> <span class="title">internal_node_find_child</span><span class="params">(<span class="keyword">void</span>* node, <span class="keyword">char</span>* key)</span> </span>&#123;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  Return the index of the child which should contain</span></span><br><span class="line"><span class="comment">  the given key.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">uint32_t</span> num_keys = *internal_node_num_keys(node);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Binary search */</span></span><br><span class="line">  <span class="keyword">uint32_t</span> min_index = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">uint32_t</span> max_index = num_keys; <span class="comment">/* there is one more child than key */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (min_index != max_index) &#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> index = (min_index + max_index) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">char</span>* key_to_right = &amp;*internal_node_key(node, index);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(key_to_right, key) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">      max_index = index;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      min_index = index + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> min_index;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Cursor* <span class="title">internal_node_find</span><span class="params">(<span class="keyword">uint32_t</span> page_num, <span class="keyword">char</span>* key)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">void</span>* node = get_page(table.pager, page_num);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">uint32_t</span> child_index = internal_node_find_child(node, key);</span><br><span class="line">  <span class="keyword">uint32_t</span> child_num = *internal_node_child(node, child_index);</span><br><span class="line">  <span class="keyword">void</span>* child = get_page(table.pager, child_num);</span><br><span class="line">  <span class="keyword">switch</span> (get_node_type(child)) &#123;</span><br><span class="line">    <span class="keyword">case</span> NODE_LEAF:</span><br><span class="line">      <span class="keyword">return</span> leaf_node_find(child_num, key);</span><br><span class="line">    <span class="keyword">case</span> NODE_INTERNAL:</span><br><span class="line">      <span class="keyword">return</span> internal_node_find(child_num, key);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Cursor* <span class="title">table_find</span><span class="params">(<span class="keyword">char</span>* key)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">uint32_t</span> root_page_num = table.root_page_num;</span><br><span class="line">  <span class="keyword">void</span>* root_node = get_page(table.pager, root_page_num);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (get_node_type(root_node) == NODE_LEAF) &#123;</span><br><span class="line">    <span class="keyword">return</span> leaf_node_find(root_page_num, key);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> internal_node_find(root_page_num, key);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Cursor* <span class="title">table_start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Cursor* cursor = table_find(<span class="string">&quot;A&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span>* node = get_page(table.pager, cursor-&gt;page_num);</span><br><span class="line">  <span class="keyword">uint32_t</span> num_cells = *leaf_node_num_cells(node);</span><br><span class="line">  cursor-&gt;end_of_table = (num_cells == <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> cursor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">cursor_value</span><span class="params">(Cursor* cursor)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">uint32_t</span> page_num = cursor-&gt;page_num;</span><br><span class="line">  <span class="keyword">void</span>* page = get_page(table.pager, page_num);</span><br><span class="line">  <span class="keyword">return</span> leaf_node_value(page, cursor-&gt;cell_num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cursor_advance</span><span class="params">(Cursor* cursor)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">uint32_t</span> page_num = cursor-&gt;page_num;</span><br><span class="line">  <span class="keyword">void</span>* node = get_page(table.pager, page_num);</span><br><span class="line"></span><br><span class="line">  cursor-&gt;cell_num += <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (cursor-&gt;cell_num &gt;= (*leaf_node_num_cells(node))) &#123;</span><br><span class="line">    <span class="comment">/* Advance to next leaf node */</span></span><br><span class="line">    <span class="keyword">uint32_t</span> next_page_num = *leaf_node_next_leaf(node);</span><br><span class="line">    <span class="keyword">if</span> (next_page_num == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">/* This was rightmost leaf */</span></span><br><span class="line">      cursor-&gt;end_of_table = <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      cursor-&gt;page_num = next_page_num;</span><br><span class="line">      cursor-&gt;cell_num = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">Pager* <span class="title">pager_open</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* filename)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> fd = open(filename,</span><br><span class="line">                O_RDWR |      <span class="comment">// 读/写模式</span></span><br><span class="line">                    O_CREAT,  <span class="comment">// 如果文件不存在，则创建该文件</span></span><br><span class="line">                S_IWUSR |     <span class="comment">// 用户写权限</span></span><br><span class="line">                    S_IRUSR   <span class="comment">// 用户读权限</span></span><br><span class="line">                );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (fd == <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Unable to open file\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">off_t</span> file_length = lseek(fd, <span class="number">0</span>, SEEK_END);</span><br><span class="line"></span><br><span class="line">  Pager* pager = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Pager));</span><br><span class="line">  pager-&gt;file_descriptor = fd;</span><br><span class="line">  pager-&gt;file_length = file_length;</span><br><span class="line">  pager-&gt;num_pages = (file_length / PAGE_SIZE);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (file_length % PAGE_SIZE != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Db file is not a whole number of pages. Corrupt file.\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">uint32_t</span> i = <span class="number">0</span>; i &lt; TABLE_MAX_PAGES; i++) &#123;</span><br><span class="line">        pager-&gt;pages[i] = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> pager;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">open_file</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* filename)</span> </span>&#123;</span><br><span class="line"><span class="comment">/* open file */</span></span><br><span class="line">  Pager* pager = pager_open(filename);</span><br><span class="line"></span><br><span class="line">  table.pager = pager;</span><br><span class="line">  table.root_page_num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (pager-&gt;num_pages == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// New database file. Initialize page 0 as leaf node.</span></span><br><span class="line">    <span class="keyword">void</span>* root_node = get_page(pager, <span class="number">0</span>);</span><br><span class="line">    initialize_leaf_node(root_node);</span><br><span class="line">    set_node_root(root_node, <span class="literal">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pager_flush</span><span class="params">(Pager* pager, <span class="keyword">uint32_t</span> page_num)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (pager-&gt;pages[page_num] == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Tried to flush null page\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">off_t</span> offset = lseek(pager-&gt;file_descriptor, page_num * PAGE_SIZE, SEEK_SET);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (offset == <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">ssize_t</span> bytes_written =</span><br><span class="line">      write(pager-&gt;file_descriptor, pager-&gt;pages[page_num], PAGE_SIZE);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (bytes_written == <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exit_nicely</span><span class="params">(<span class="keyword">int</span> code)</span> </span>&#123;</span><br><span class="line">  <span class="comment">/* do clean work */</span></span><br><span class="line">  Pager* pager = table.pager;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; pager-&gt;num_pages; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (pager-&gt;pages[i] == <span class="literal">NULL</span>) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pager_flush(pager, i);</span><br><span class="line">    <span class="built_in">free</span>(pager-&gt;pages[i]);</span><br><span class="line">    pager-&gt;pages[i] = <span class="literal">NULL</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> result = close(pager-&gt;file_descriptor);</span><br><span class="line">  <span class="keyword">if</span> (result == <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Error closing db file.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; TABLE_MAX_PAGES; i++) &#123;</span><br><span class="line">    <span class="keyword">void</span>* page = pager-&gt;pages[i];</span><br><span class="line">    <span class="keyword">if</span> (page) &#123;</span><br><span class="line">      <span class="built_in">free</span>(page);</span><br><span class="line">      pager-&gt;pages[i] = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">free</span>(pager);</span><br><span class="line">  <span class="built_in">exit</span>(code);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exit_success</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;bye~\n&quot;</span>);</span><br><span class="line">  exit_nicely(EXIT_SUCCESS);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">MetaCommandResult <span class="title">do_meta_command</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">strcmp</span>(input_buffer.buffer, <span class="string">&quot;.exit&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_SUCCESS);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> META_COMMAND_UNRECOGNIZED_COMMAND;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">PrepareResult <span class="title">prepare_insert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  statement.type = STATEMENT_INSERT;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">char</span>* keyword = strtok(input_buffer.buffer, <span class="string">&quot; &quot;</span>);</span><br><span class="line">  <span class="keyword">char</span>* a = strtok(<span class="literal">NULL</span>, <span class="string">&quot; &quot;</span>);</span><br><span class="line">  <span class="keyword">char</span>* b = strtok(<span class="literal">NULL</span>, <span class="string">&quot; &quot;</span>);</span><br><span class="line">  <span class="keyword">int</span> x;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (a == <span class="literal">NULL</span> || b == <span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> PREPARE_SYNTAX_ERROR;</span><br><span class="line"></span><br><span class="line">  x = atoi(a);</span><br><span class="line">  <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> PREPARE_NEGATIVE_VALUE;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">strlen</span>(b) &gt; COLUMN_B_SIZE)</span><br><span class="line">    <span class="keyword">return</span> PREPARE_STRING_TOO_LONG;</span><br><span class="line"></span><br><span class="line">  statement.row.a = x;</span><br><span class="line">  <span class="built_in">strcpy</span>(statement.row.b, b);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> PREPARE_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">PrepareResult <span class="title">prepare_condition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  statement.flag = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">char</span>* keyword = strtok(input_buffer.buffer, <span class="string">&quot; &quot;</span>);</span><br><span class="line">  <span class="keyword">char</span>* b = strtok(<span class="literal">NULL</span>, <span class="string">&quot; &quot;</span>);</span><br><span class="line">  <span class="keyword">char</span>* c = strtok(<span class="literal">NULL</span>, <span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (b == <span class="literal">NULL</span>) <span class="keyword">return</span> PREPARE_SUCCESS;</span><br><span class="line">  <span class="keyword">if</span> (c != <span class="literal">NULL</span>) <span class="keyword">return</span> PREPARE_SYNTAX_ERROR;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">strlen</span>(b) &gt; COLUMN_B_SIZE)</span><br><span class="line">    <span class="keyword">return</span> PREPARE_STRING_TOO_LONG;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">strcpy</span>(statement.row.b, b);</span><br><span class="line">  statement.flag |= <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> PREPARE_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">PrepareResult <span class="title">prepare_select</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  statement.type = STATEMENT_SELECT;</span><br><span class="line">  <span class="keyword">return</span> prepare_condition();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">PrepareResult <span class="title">prepare_delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  statement.type = STATEMENT_DELETE;</span><br><span class="line">  PrepareResult result = prepare_condition();</span><br><span class="line">  <span class="keyword">if</span> (result == PREPARE_SUCCESS &amp;&amp; statement.flag == <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> PREPARE_SYNTAX_ERROR;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">PrepareResult <span class="title">prepare_statement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">strlen</span>(input_buffer.buffer) == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> PREPARE_EMPTY_STATEMENT;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strncmp</span>(input_buffer.buffer, <span class="string">&quot;insert&quot;</span>, <span class="number">6</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> prepare_insert();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strncmp</span>(input_buffer.buffer, <span class="string">&quot;select&quot;</span>, <span class="number">6</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> prepare_select();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strncmp</span>(input_buffer.buffer, <span class="string">&quot;delete&quot;</span>, <span class="number">6</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> prepare_delete();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> PREPARE_UNRECOGNIZED_STATEMENT;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">uint32_t</span> <span class="title">get_unused_page_num</span><span class="params">(Pager* pager)</span> </span>&#123; <span class="keyword">return</span> pager-&gt;num_pages; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">create_new_root</span><span class="params">(<span class="keyword">uint32_t</span> right_child_page_num)</span> </span>&#123;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  拆分根的处理。</span></span><br><span class="line"><span class="comment">  旧的根复制到新页面，成为左子。</span></span><br><span class="line"><span class="comment">  确保子结点的地址正确传入。</span></span><br><span class="line"><span class="comment">  重新初始化根页面以确保包含新的根节点。</span></span><br><span class="line"><span class="comment">  新的根节点指向两个子节点。</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span>* root = get_page(table.pager, table.root_page_num);</span><br><span class="line">  <span class="keyword">void</span>* right_child = get_page(table.pager, right_child_page_num);</span><br><span class="line">  <span class="keyword">uint32_t</span> left_child_page_num = get_unused_page_num(table.pager);</span><br><span class="line">  <span class="keyword">void</span>* left_child = get_page(table.pager, left_child_page_num);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 左子结点具有从旧根复制的数据 */</span></span><br><span class="line">  <span class="built_in">memcpy</span>(left_child, root, PAGE_SIZE);</span><br><span class="line">  set_node_root(left_child, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 根节点是一个新的内部节点，有一个关键值和两个子节点 */</span></span><br><span class="line">  initialize_internal_node(root);</span><br><span class="line">  set_node_root(root, <span class="literal">true</span>);</span><br><span class="line">  *internal_node_num_keys(root) = <span class="number">1</span>;</span><br><span class="line">  *internal_node_child(root, <span class="number">0</span>) = left_child_page_num;</span><br><span class="line">  <span class="keyword">char</span>* left_child_max_key = get_node_max_key(left_child);</span><br><span class="line">  *internal_node_key(root, <span class="number">0</span>) = *left_child_max_key;</span><br><span class="line">  *internal_node_right_child(root) = right_child_page_num;</span><br><span class="line">  *node_parent(left_child) = table.root_page_num;</span><br><span class="line">  *node_parent(right_child) = table.root_page_num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">internal_node_insert</span><span class="params">(<span class="keyword">uint32_t</span> parent_page_num,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">uint32_t</span> child_page_num)</span> </span>&#123;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  将新的子/关键值（child/key）键值对添加到与子结点对应的父结点</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span>* parent = get_page(table.pager, parent_page_num);</span><br><span class="line">  <span class="keyword">void</span>* child = get_page(table.pager, child_page_num);</span><br><span class="line">  <span class="keyword">char</span>* child_max_key = get_node_max_key(child);</span><br><span class="line">  <span class="keyword">uint32_t</span> index = internal_node_find_child(parent, child_max_key);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">uint32_t</span> original_num_keys = *internal_node_num_keys(parent);</span><br><span class="line">  *internal_node_num_keys(parent) = original_num_keys + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (original_num_keys &gt;= INTERNAL_NODE_MAX_CELLS) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Need to implement splitting internal node\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">uint32_t</span> right_child_page_num = *internal_node_right_child(parent);</span><br><span class="line">  <span class="keyword">void</span>* right_child = get_page(table.pager, right_child_page_num);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strcmp</span>(child_max_key, get_node_max_key(right_child) ) &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">    <span class="comment">/* 替换右子树的结点 */</span></span><br><span class="line">    *internal_node_child(parent, original_num_keys) = right_child_page_num;</span><br><span class="line">    *internal_node_key(parent, original_num_keys) =</span><br><span class="line">        *get_node_max_key(right_child);</span><br><span class="line">    *internal_node_right_child(parent) = child_page_num;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">/* 为新的结点或者说层腾出空间 */</span></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = original_num_keys; i &gt; index; i--) &#123;</span><br><span class="line">      <span class="keyword">void</span>* destination = internal_node_cell(parent, i);</span><br><span class="line">      <span class="keyword">void</span>* source = internal_node_cell(parent, i - <span class="number">1</span>);</span><br><span class="line">      <span class="built_in">memcpy</span>(destination, source, INTERNAL_NODE_CELL_SIZE);</span><br><span class="line">    &#125;</span><br><span class="line">    *internal_node_child(parent, index) = child_page_num;</span><br><span class="line">    *internal_node_key(parent, index) = *child_max_key;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update_internal_node_key</span><span class="params">(<span class="keyword">void</span>* node, <span class="keyword">char</span>* old_key, <span class="keyword">const</span> <span class="keyword">char</span>* new_key)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">uint32_t</span> old_child_index = internal_node_find_child(node, old_key);</span><br><span class="line">  *internal_node_key(node, old_child_index) = *new_key;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">leaf_node_split_and_insert</span><span class="params">(Cursor* cursor, <span class="keyword">const</span> <span class="keyword">char</span>* key, Row* value)</span> </span>&#123;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  创建一个新节点并移动一半的结点。</span></span><br><span class="line"><span class="comment">  将新值插入两个节点之一。</span></span><br><span class="line"><span class="comment">  更新父结点或创建新父结点。</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span>* old_node = get_page(table.pager, cursor-&gt;page_num);</span><br><span class="line">  <span class="keyword">char</span>* old_max = get_node_max_key(old_node);</span><br><span class="line">  <span class="keyword">uint32_t</span> new_page_num = get_unused_page_num(table.pager);</span><br><span class="line">  <span class="keyword">void</span>* new_node = get_page(table.pager, new_page_num);</span><br><span class="line">  initialize_leaf_node(new_node);</span><br><span class="line">  *node_parent(new_node) = *node_parent(old_node);</span><br><span class="line">  *leaf_node_next_leaf(new_node) = *leaf_node_next_leaf(old_node);</span><br><span class="line">  *leaf_node_next_leaf(old_node) = new_page_num;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  在旧的（左）和新（右）结点之间平均分配所有现有密钥和新密钥。</span></span><br><span class="line"><span class="comment">  从右侧开始，将每个键移动到正确的位置。</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  <span class="keyword">for</span> (i = LEAF_NODE_MAX_CELLS; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="keyword">void</span>* destination_node;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= LEAF_NODE_LEFT_SPLIT_COUNT) &#123;</span><br><span class="line">      destination_node = new_node;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      destination_node = old_node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">uint32_t</span> index_within_node = i % LEAF_NODE_LEFT_SPLIT_COUNT;</span><br><span class="line">    <span class="keyword">void</span>* destination = leaf_node_cell(destination_node, index_within_node);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (i == cursor-&gt;cell_num) &#123;</span><br><span class="line">      serialize_row(value,</span><br><span class="line">                    leaf_node_value(destination_node, index_within_node));</span><br><span class="line">      *leaf_node_key(destination_node, index_within_node) = *key;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i &gt; cursor-&gt;cell_num) &#123;</span><br><span class="line">      <span class="built_in">memcpy</span>(destination, leaf_node_cell(old_node, i - <span class="number">1</span>), LEAF_NODE_CELL_SIZE);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">memcpy</span>(destination, leaf_node_cell(old_node, i), LEAF_NODE_CELL_SIZE);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 更新两个叶结点上的结构 */</span></span><br><span class="line">  *(leaf_node_num_cells(old_node)) = LEAF_NODE_LEFT_SPLIT_COUNT;</span><br><span class="line">  *(leaf_node_num_cells(new_node)) = LEAF_NODE_RIGHT_SPLIT_COUNT;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (is_node_root(old_node)) &#123;</span><br><span class="line">    <span class="keyword">return</span> create_new_root(new_page_num);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> parent_page_num = *node_parent(old_node);</span><br><span class="line">    <span class="keyword">char</span>* new_max = get_node_max_key(old_node);</span><br><span class="line">    <span class="keyword">void</span>* parent = get_page(table.pager, parent_page_num);</span><br><span class="line"></span><br><span class="line">    update_internal_node_key(parent, old_max, new_max);</span><br><span class="line">    internal_node_insert(parent_page_num, new_page_num);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">leaf_node_insert</span><span class="params">(Cursor* cursor, <span class="keyword">char</span>* key, Row* value)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">void</span>* node = get_page(table.pager, cursor-&gt;page_num);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">uint32_t</span> num_cells = *leaf_node_num_cells(node);</span><br><span class="line">  <span class="keyword">if</span> (num_cells &gt;= LEAF_NODE_MAX_CELLS) &#123;</span><br><span class="line">    <span class="comment">// 节点已满</span></span><br><span class="line">    leaf_node_split_and_insert(cursor, key, value);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (cursor-&gt;cell_num &lt; num_cells) &#123;</span><br><span class="line">    <span class="comment">// 为新数据腾出空间</span></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = num_cells; i &gt; cursor-&gt;cell_num; i--) &#123;</span><br><span class="line">      <span class="built_in">memcpy</span>(leaf_node_cell(node, i), leaf_node_cell(node, i - <span class="number">1</span>),</span><br><span class="line">             LEAF_NODE_CELL_SIZE);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  *(leaf_node_num_cells(node)) += <span class="number">1</span>;</span><br><span class="line">  *(leaf_node_key(node, cursor-&gt;cell_num)) = *key;</span><br><span class="line">  serialize_row(value, leaf_node_value(node, cursor-&gt;cell_num));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ExecuteResult <span class="title">execute_insert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Row* row_to_insert = &amp;(statement.row);</span><br><span class="line">  <span class="keyword">char</span>* key_to_insert = row_to_insert-&gt;b;</span><br><span class="line">  Cursor* cursor = table_find(key_to_insert);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span>* node = get_page(table.pager, cursor-&gt;page_num);</span><br><span class="line">  <span class="keyword">uint32_t</span> num_cells = *leaf_node_num_cells(node);</span><br><span class="line"></span><br><span class="line">  leaf_node_insert(cursor, row_to_insert-&gt;b, row_to_insert);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">free</span>(cursor);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> EXECUTE_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ExecuteResult <span class="title">execute_select</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  Cursor* cursor = table_start();</span><br><span class="line"></span><br><span class="line">  Row row;</span><br><span class="line">  <span class="keyword">bool</span> isFind = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (statement.flag == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">while</span> (!(cursor-&gt;end_of_table)) &#123;</span><br><span class="line">          deserialize_row(cursor_value(cursor), &amp;row);</span><br><span class="line">          <span class="keyword">if</span> (row.a != <span class="number">0</span>) &#123;</span><br><span class="line">              <span class="keyword">if</span> (!isFind)</span><br><span class="line">              &#123;</span><br><span class="line">                  isFind = <span class="literal">true</span>;</span><br><span class="line">                  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">              &#125;</span><br><span class="line">              print_row(&amp;row);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          cursor_advance(cursor);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  Row rows[<span class="number">10000</span>];</span><br><span class="line">  <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (!(cursor-&gt;end_of_table)) &#123;</span><br><span class="line">    deserialize_row(cursor_value(cursor), &amp;row);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(row.b, statement.row.b) == <span class="number">0</span> &amp;&amp; row.a != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isFind)</span><br><span class="line">        &#123;</span><br><span class="line">            isFind = <span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            rows[<span class="number">0</span>] = row;</span><br><span class="line">            count = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> position = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (position &lt;= count) &#123;</span><br><span class="line">                <span class="keyword">if</span> (row.a &gt; rows[position].a) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    position++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = count; i &gt; position; i--) &#123;</span><br><span class="line">                rows[i] = rows[i - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            rows[position] = row;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cursor_advance(cursor);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">      print_row(&amp;rows[i]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">free</span>(cursor);</span><br><span class="line">  <span class="keyword">if</span> (!isFind) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;\n(Empty)&quot;</span>);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> EXECUTE_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ExecuteResult <span class="title">execute_delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Cursor* cursor = table_start();</span><br><span class="line"></span><br><span class="line">    Row row;</span><br><span class="line">    <span class="keyword">while</span> (!(cursor-&gt;end_of_table)) &#123;</span><br><span class="line">        deserialize_row(cursor_value(cursor), &amp;row);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>( row.b, statement.row.b) == <span class="number">0</span>) &#123;</span><br><span class="line">            Row del;</span><br><span class="line">            del.a = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> i;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(del) ; i++) &#123;</span><br><span class="line">                del.b[i] = row.b[i];</span><br><span class="line">            &#125;</span><br><span class="line">            serialize_row(&amp;del, cursor_value(cursor));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        cursor_advance(cursor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(cursor);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> EXECUTE_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ExecuteResult <span class="title">execute_statement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (statement.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> STATEMENT_INSERT:</span><br><span class="line">      <span class="keyword">return</span> execute_insert();</span><br><span class="line">    <span class="keyword">case</span> STATEMENT_SELECT:</span><br><span class="line">      <span class="keyword">return</span> execute_select();</span><br><span class="line">    <span class="keyword">case</span> STATEMENT_DELETE:</span><br><span class="line">      <span class="keyword">return</span> execute_delete();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sigint_handler</span><span class="params">(<span class="keyword">int</span> signum)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">  <span class="built_in">exit</span>(EXIT_SUCCESS);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (argc &lt; <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Must supply a database filename.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  atexit(&amp;exit_success);</span><br><span class="line">  signal(SIGINT, &amp;sigint_handler);</span><br><span class="line"></span><br><span class="line">  open_file(argv[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    print_prompt();</span><br><span class="line">    <span class="keyword">switch</span> (read_input()) &#123;</span><br><span class="line">      <span class="keyword">case</span> INPUT_SUCCESS:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> INPUT_TOO_LONG:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Input is too long.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (input_buffer.buffer[<span class="number">0</span>] == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">switch</span> (do_meta_command()) &#123;</span><br><span class="line">        <span class="keyword">case</span> META_COMMAND_SUCCESS:</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">case</span> META_COMMAND_UNRECOGNIZED_COMMAND:</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;Unrecognized command &#x27;%s&#x27;.\n&quot;</span>, input_buffer.buffer);</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (prepare_statement()) &#123;</span><br><span class="line">      <span class="keyword">case</span> PREPARE_SUCCESS:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> PREPARE_EMPTY_STATEMENT:</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">case</span> PREPARE_NEGATIVE_VALUE:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Column `a` must be positive.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">case</span> PREPARE_STRING_TOO_LONG:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;String for column `b` is too long.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">case</span> PREPARE_SYNTAX_ERROR:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Syntax error. Could not parse statement.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">case</span> PREPARE_UNRECOGNIZED_STATEMENT:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Unrecognized keyword at start of &#x27;%s&#x27;.\n&quot;</span>,</span><br><span class="line">               input_buffer.buffer);</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (execute_statement()) &#123;</span><br><span class="line">      <span class="keyword">case</span> EXECUTE_SUCCESS:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\nExecuted.\n\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考资料：<a href="https://cstack.github.io/db_tutorial/">db_tutorial</a></p>]]></content>
      
      
      <categories>
          
          <category> 项目记录 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>多周期CPU设计</title>
      <link href="2021/05/06/%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C_todo(2)/%E5%A4%9A%E5%91%A8%E6%9C%9FCPU%E8%AE%BE%E8%AE%A1/"/>
      <url>2021/05/06/%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C_todo(2)/%E5%A4%9A%E5%91%A8%E6%9C%9FCPU%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="多周期处理器"><a href="#多周期处理器" class="headerlink" title="多周期处理器"></a>多周期处理器</h2><p>多周期处理器，通过往处理器中添加寄存器，用于储存中间量，以此把处理器划分为多个部分， 同时把各个指令分解为多个短步骤，指令运行会更加高效、紧凑。同时还复用单个ALU合并指令、数据存储器。此外，还需要设计 FSM来控制每条指令各部分的运行顺序。</p><span id="more"></span><h2 id="MIPS指令集"><a href="#MIPS指令集" class="headerlink" title="MIPS指令集"></a>MIPS指令集</h2><ol><li>书上的指令：add、sub、and、or、slt、sw、lw、beq、addi、j</li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> 体系结构实验 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第24-25章 最短路径</title>
      <link href="2021/05/05/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA_todo(4)/%E7%AC%AC24-25%E7%AB%A0-%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/"/>
      <url>2021/05/05/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA_todo(4)/%E7%AC%AC24-25%E7%AB%A0-%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/</url>
      
        <content type="html"><![CDATA[<h2 id="bellman-ford算法"><a href="#bellman-ford算法" class="headerlink" title="bellman-ford算法"></a>bellman-ford算法</h2><p>最短路径的子路径也是最短路径</p><p>松弛操作：检查一下绕小路会不会更近</p><span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="有向无环图中的单源最短路径问题"><a href="#有向无环图中的单源最短路径问题" class="headerlink" title="有向无环图中的单源最短路径问题"></a>有向无环图中的单源最短路径问题</h2><p>对有向无环图进行拓扑排序，再进行Bellman操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="dijkstra算法"><a href="#dijkstra算法" class="headerlink" title="dijkstra算法"></a>dijkstra算法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="所有节点的最短路径"><a href="#所有节点的最短路径" class="headerlink" title="所有节点的最短路径"></a>所有节点的最短路径</h2>]]></content>
      
      
      <categories>
          
          <category> 算法导论 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第23章 最小生成树</title>
      <link href="2021/05/05/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA_todo(4)/%E7%AC%AC23%E7%AB%A0-%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
      <url>2021/05/05/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA_todo(4)/%E7%AC%AC23%E7%AB%A0-%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>最小生成树：将所有的结点连接起来，又具有最小的权重。</p><h2 id="最小生成树的形成"><a href="#最小生成树的形成" class="headerlink" title="最小生成树的形成"></a>最小生成树的形成</h2><ul><li>无向图G=(V, E)的一个切割(S, V - S)</li><li>一个端点在S，另一个端点在V - S，该边横跨切割</li><li>横跨切割最小的叫轻量级边</li></ul><span id="more"></span><h2 id="kruskal算法和prim算法"><a href="#kruskal算法和prim算法" class="headerlink" title="kruskal算法和prim算法"></a>kruskal算法和prim算法</h2><p><strong>kruskal算法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Prim算法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第22章 基本的图算法</title>
      <link href="2021/05/05/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA_todo(4)/%E7%AC%AC22%E7%AB%A0-%E5%9F%BA%E6%9C%AC%E7%9A%84%E5%9B%BE%E7%AE%97%E6%B3%95/"/>
      <url>2021/05/05/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA_todo(4)/%E7%AC%AC22%E7%AB%A0-%E5%9F%BA%E6%9C%AC%E7%9A%84%E5%9B%BE%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="图的表示"><a href="#图的表示" class="headerlink" title="图的表示"></a>图的表示</h2><p>G=(V,E)</p><ol><li>将图作为邻接链表的组合（适合稀疏矩阵）</li><li>将图作为邻接矩阵看待（适合稠密矩阵）</li></ol><p>邻接链表可以表示权重图（每条边带一个权重）</p><p>邻接矩阵可以快速判断一条边是否存在</p><p>图的属性：v.d表示结点的属性d，(u,v).f表示边的属性f</p><span id="more"></span><p>定义示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Color</span> </span>&#123;</span><br><span class="line">    White,Grey,Black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Vertex</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String s;</span><br><span class="line">    <span class="keyword">public</span> Color color;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> d;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> f;</span><br><span class="line">    <span class="keyword">public</span> Vertex pi;</span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;Vertex&gt; adj;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Vertex</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.s = s;</span><br><span class="line">        <span class="keyword">this</span>.adj = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addAdj</span><span class="params">(Vertex v)</span> </span>&#123;</span><br><span class="line">        adj.add(v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Graph</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;Vertex&gt; V;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Graph</span><span class="params">(ArrayList&lt;Vertex&gt; v)</span> </span>&#123;</span><br><span class="line">        V = v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="广度优先搜索"><a href="#广度优先搜索" class="headerlink" title="广度优先搜索"></a>广度优先搜索</h2><p>Prim算法和Djikstra算法</p><p>将每个结点涂上白色、灰色、黑色</p><p>白色：没有被发现</p><p>灰色：已知和未知之间</p><p>黑色：所有与黑色结点邻接的结点都已被发现</p><p>v.$\pi$表示结点的前驱节点，没被发现就是Null</p><p>v.d表示从源结点s到结点v的距离</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BFS</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Vertex s = <span class="keyword">new</span> Vertex(<span class="string">&quot;s&quot;</span>);</span><br><span class="line">        Vertex r = <span class="keyword">new</span> Vertex(<span class="string">&quot;r&quot;</span>);</span><br><span class="line">        Vertex v = <span class="keyword">new</span> Vertex(<span class="string">&quot;v&quot;</span>);</span><br><span class="line">        Vertex w = <span class="keyword">new</span> Vertex(<span class="string">&quot;w&quot;</span>);</span><br><span class="line">        Vertex t = <span class="keyword">new</span> Vertex(<span class="string">&quot;t&quot;</span>);</span><br><span class="line">        Vertex x = <span class="keyword">new</span> Vertex(<span class="string">&quot;x&quot;</span>);</span><br><span class="line">        Vertex y = <span class="keyword">new</span> Vertex(<span class="string">&quot;y&quot;</span>);</span><br><span class="line">        Vertex u = <span class="keyword">new</span> Vertex(<span class="string">&quot;u&quot;</span>);</span><br><span class="line"></span><br><span class="line">        s.addAdj(r);</span><br><span class="line">        r.addAdj(s);</span><br><span class="line"></span><br><span class="line">        r.addAdj(v);</span><br><span class="line">        v.addAdj(r);</span><br><span class="line"></span><br><span class="line">        s.addAdj(w);</span><br><span class="line">        w.addAdj(s);</span><br><span class="line"></span><br><span class="line">        t.addAdj(w);</span><br><span class="line">        w.addAdj(t);</span><br><span class="line"></span><br><span class="line">        x.addAdj(w);</span><br><span class="line">        w.addAdj(x);</span><br><span class="line"></span><br><span class="line">        t.addAdj(x);</span><br><span class="line">        x.addAdj(t);</span><br><span class="line"></span><br><span class="line">        t.addAdj(u);</span><br><span class="line">        u.addAdj(t);</span><br><span class="line"></span><br><span class="line">        x.addAdj(u);</span><br><span class="line">        u.addAdj(x);</span><br><span class="line"></span><br><span class="line">        x.addAdj(y);</span><br><span class="line">        y.addAdj(x);</span><br><span class="line"></span><br><span class="line">        u.addAdj(y);</span><br><span class="line">        y.addAdj(u);</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Vertex&gt; V = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        V.add(s);</span><br><span class="line">        V.add(r);</span><br><span class="line">        V.add(v);</span><br><span class="line">        V.add(w);</span><br><span class="line">        V.add(x);</span><br><span class="line">        V.add(y);</span><br><span class="line">        V.add(t);</span><br><span class="line">        V.add(u);</span><br><span class="line"></span><br><span class="line">        Graph G = <span class="keyword">new</span> Graph(V);</span><br><span class="line"></span><br><span class="line">        bfs(G, s);</span><br><span class="line"></span><br><span class="line">        PrintPath(G, s, u);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bfs</span><span class="params">(Graph G, Vertex s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Vertex u : G.V) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!u.s.equals(s.s)) &#123;</span><br><span class="line">                u.color = Color.White;</span><br><span class="line">                u.d = Integer.MAX_VALUE;</span><br><span class="line">                u.pi = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        s.color = Color.Grey;</span><br><span class="line">        s.d = <span class="number">0</span>;</span><br><span class="line">        s.pi = <span class="keyword">null</span>;</span><br><span class="line">        Queue&lt;Vertex&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        q.add(s);</span><br><span class="line">        <span class="keyword">while</span> ( !q.isEmpty() ) &#123;</span><br><span class="line">            Vertex u = q.poll();</span><br><span class="line">            <span class="keyword">for</span> (Vertex v : u.adj) &#123;</span><br><span class="line">                <span class="keyword">if</span> (v.color == Color.White) &#123;</span><br><span class="line">                    v.color = Color.Grey;</span><br><span class="line">                    v.d = u.d + <span class="number">1</span>;</span><br><span class="line">                    v.pi = u;</span><br><span class="line">                    q.add(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            u.color = Color.Black;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">PrintPath</span><span class="params">(Graph G, Vertex s, Vertex v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (v.s.equals(s.s)) &#123;</span><br><span class="line">            System.out.println(s.s);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (v.pi == <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;no path from s to v exists&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            PrintPath(G, s, v.pi);</span><br><span class="line">            System.out.println(v.s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>分析</strong></p><p>广度优先算法总运行时间O(V+E)</p><p>图G的前驱子图为$G_\pi=(V_\pi,E_\pi)$，其中$V_\pi=\{v\in V:v.\pi \neq NIL\}\bigcup \{s\}$，$E_\pi=\{(v.\pi, v):v\in V_\pi-\{s\}\}$</p><p>BFS过程所建造出来的$\pi$属性使得前驱子图$G_\pi$成为一颗广度优先树</p><p>获得的是到源结点的最短路径</p><h2 id="深度优先搜索"><a href="#深度优先搜索" class="headerlink" title="深度优先搜索"></a>深度优先搜索</h2><p>先搜索最近才发现的结点，直到从该结点出发所有边都被发现，然后回溯，搜索其前驱节点的出发边。</p><p>形成一个由多棵深度优先树构成的深度优先森林。</p><p>深度优先算法在每个结点上盖一个时间戳</p><p>第一个时间戳v.d：记录结点v第一次被发现的时间（涂上灰色的时候）</p><p>第二个时间戳v.f：记录搜索完成时对v的邻接链表扫描的时间（涂上黑色的时候）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(Graph G)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">for</span> (Vertex u : G.V) &#123;</span><br><span class="line">         u.color = Color.White;</span><br><span class="line">         u.pi = <span class="keyword">null</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     time = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">for</span> (Vertex u : G.V) &#123;</span><br><span class="line">         <span class="keyword">if</span> (u.color == Color.White) &#123;</span><br><span class="line">             dfsVisit(G, u);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfsVisit</span><span class="params">(Graph G, Vertex u)</span> </span>&#123;</span><br><span class="line">    time++;</span><br><span class="line">    u.d = time;</span><br><span class="line">    u.color = Color.Grey;</span><br><span class="line">    <span class="keyword">for</span> (Vertex v : u.adj) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v.color == Color.White) &#123;</span><br><span class="line">            v.pi = u;</span><br><span class="line">            dfsVisit(G, v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    u.color = Color.Black;</span><br><span class="line">    time++;</span><br><span class="line">    u.f = time;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现时间和完成时间具有括号化性质</p><h2 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h2><p>使用深度优先搜索对有向无环图进行拓扑排序，对一个有向无环图来说，其拓扑排序是G中所有节点的一种线性次序，所有有向边都从前面指向后面。</p><p>通过DFS得出每个顶点的v.f，然后以此排序即可。</p><h2 id="强连通分量"><a href="#强连通分量" class="headerlink" title="强连通分量"></a>强连通分量</h2><p>有向图中u可以到v，v可以到u。</p><p>将一个有向图分解为强连通分量：进行两次深度优先搜索，一次在$G$上，一次在$G^T$上</p>]]></content>
      
      
      <categories>
          
          <category> 算法导论 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第17章 摊还分析</title>
      <link href="2021/05/05/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA_todo(4)/%E7%AC%AC17%E7%AB%A0-%E6%91%8A%E8%BF%98%E5%88%86%E6%9E%90/"/>
      <url>2021/05/05/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA_todo(4)/%E7%AC%AC17%E7%AB%A0-%E6%91%8A%E8%BF%98%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>用于保证最坏情况下每个操作的平均性能。</p><h2 id="聚合分析"><a href="#聚合分析" class="headerlink" title="聚合分析"></a>聚合分析</h2><p>证明对所有n，一个n操作的序列最坏情况下花费的总时间为T(n)。因此，最坏情况下，每个操作的平均代价或摊还代价为T(n)/n。</p><span id="more"></span><p><strong>例子：</strong></p><ul><li>栈操作</li><li>二进制计数器递增</li></ul><h2 id="核算法"><a href="#核算法" class="headerlink" title="核算法"></a>核算法</h2><ol><li>对不同操作赋予不同费用，赋予某些操作的费用可能多于或少于其实际代价，我们将赋予一个操作的费用称为它的摊还代价。</li><li>当一个操作的摊还代价超出其实际代价时，我们将差额存入数据结构中的特定对象，存入的差额称为信用。对于后续操作中摊还代价小于实际代价的情况，信用可以用来支付差额。</li><li>我们将一个操作的摊还代价分解为其实际代价和信用（存入的和用掉的），不同操作可能有不同的摊还代价，这种方法不同于聚合分析中所有操作都赋予相同摊还代价的方式。</li></ol><p><strong>例子：</strong></p><ul><li>栈操作</li><li>二进制计数器递增</li></ul><h2 id="势能法"><a href="#势能法" class="headerlink" title="势能法"></a>势能法</h2><ul><li><p>势能法摊还分析并不将预付代价表示为数据结构中特定对象的信用，而是表示为“势能”，将势能释放为即可用未来支付操作的代价。我们将势能与整个数据结构而不是特定对象相关联。</p></li><li><p>势函数$\Phi$将每个数据结构$D_i$映射到一个实函数$\Phi(D_i)$，此值为关联到数据结构$D_i$的势（$D_i$为在数据结构$D_{i-1}$上执行第i个操作的结果数据结构）</p></li><li><p>第i个操作的摊还代价$\hat{c_i}$，$\hat{c_i}=c_i+\Phi(D_i)-\Phi(D_{i-1})$（$c_i$为第i个操作的实际代价）</p></li><li><p>n个操作的总摊还代价为：</p><script type="math/tex; mode=display">\sum_{i=1}^{n}{\hat{c_i}}=\sum_{i=1}^nc_i+\Phi(D_n)-\Phi(D_0)</script></li></ul><p>例子</p><ul><li>栈操作</li><li>二进制计数器递增</li></ul><h2 id="动态表"><a href="#动态表" class="headerlink" title="动态表"></a>动态表</h2><p><strong>表扩张</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">TABLE-INSERT(T,x)</span><br><span class="line">if T.size&#x3D;&#x3D;0</span><br><span class="line">allocate T.table with 1 slot</span><br><span class="line">    T.size &#x3D; 1</span><br><span class="line">    if T.num &#x3D;&#x3D; T.size</span><br><span class="line">    allocate new table with 2*T.size slot</span><br><span class="line">    insert all items in T.table into new table</span><br><span class="line">    free T.table</span><br><span class="line">    T.table &#x3D; new table</span><br><span class="line">    T.size &#x3D; 2*T.size</span><br><span class="line">    insert x into T.table</span><br><span class="line">    T.num &#x3D; T.num + 1</span><br></pre></td></tr></table></figure><p>分析：</p><ol><li>聚合分析</li><li>核算法</li><li>势能法</li></ol><p><strong>表扩张和收缩</strong></p><p>动态表装载因子有一个正的常数的下界，一个表操作的摊还代价有一个常数上界。</p>]]></content>
      
      
      <categories>
          
          <category> 算法导论 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第16章 贪心算法</title>
      <link href="2021/05/05/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA_todo(4)/%E7%AC%AC16%E7%AB%A0-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
      <url>2021/05/05/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA_todo(4)/%E7%AC%AC16%E7%AB%A0-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>对于某些最优化问题可以使用更简单，更高效的算法：贪心算法，在每一步都做出当时看起来最佳的选择，从而能导致全局最优解。</p><span id="more"></span><h2 id="活动选择问题"><a href="#活动选择问题" class="headerlink" title="活动选择问题"></a>活动选择问题</h2><p>选出一个最大兼容活动集</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] s = &#123; <span class="number">1</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">12</span> &#125;;</span><br><span class="line">    <span class="keyword">int</span>[] f = &#123; <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span> &#125;;</span><br><span class="line">    <span class="keyword">boolean</span>[] a = <span class="keyword">new</span> <span class="keyword">boolean</span>[s.length];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> result = greedySelector(s, f, a);</span><br><span class="line">    System.out.println(<span class="string">&quot;Result is: &quot;</span> + result);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= s.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i]) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = i + <span class="number">1</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;第&quot;</span> + temp + <span class="string">&quot;活动被选中，其开始时间为：&quot;</span> + s[i] + <span class="string">&quot;，结束时间为：&quot;</span> + f[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">greedySelector</span><span class="params">(<span class="keyword">int</span>[] s, <span class="keyword">int</span>[] f, <span class="keyword">boolean</span>[] a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = s.length - <span class="number">1</span>;</span><br><span class="line">    a[<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] &gt;= f[j]) &#123;</span><br><span class="line">            a[i] = <span class="keyword">true</span>;</span><br><span class="line">            j = i;</span><br><span class="line">            count++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            a[i] = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="贪心算法原理"><a href="#贪心算法原理" class="headerlink" title="贪心算法原理"></a>贪心算法原理</h2><ol><li>将最优化问题转换成这样的形式：对其做出一次选择后，只剩下一个子问题需要求解</li><li>证明做出贪心选择后，原问题总是存在最优解，即贪心选择总是安全的</li><li>证明做出贪心选择后，剩余的子问题满足性质：其最优解与贪心选择组合即可得到原问题的最优解，这样就得到了最优子结构</li></ol><h2 id="赫夫曼编码"><a href="#赫夫曼编码" class="headerlink" title="赫夫曼编码"></a>赫夫曼编码</h2><p>根据每个字符出现的频率，赫夫曼贪心算法构造出字符的最优二进制表示</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210518124804.png" alt="image-20210518124757219"></p>]]></content>
      
      
      <categories>
          
          <category> 算法导论 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第15章 动态规划</title>
      <link href="2021/05/05/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA_todo(4)/%E7%AC%AC15%E7%AB%A0-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
      <url>2021/05/05/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA_todo(4)/%E7%AC%AC15%E7%AB%A0-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<p>动态规划通常用于求解最优化问题</p><ol><li>刻画一个最优解的结构特征</li><li>递归定义最优解的值</li><li>计算最优解的值，通常采用自底向上的方法</li><li>利用计算出的信息构造一个最优解</li></ol><span id="more"></span><h2 id="钢条切割"><a href="#钢条切割" class="headerlink" title="钢条切割"></a>钢条切割</h2><p>寻找最优切割方案</p><p>暴力递归求解复杂度高，因为求解了很多重复子问题</p><p>采用动态规划的思想，并用一个数组保存中间结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自顶向下递归</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">cutRod</span><span class="params">(<span class="keyword">int</span>[] p, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> q = Integer.MIN_VALUE;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        q = Math.max(q, p[i] + cutRod(p, n - i - <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态规划，自顶向下带备忘录</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">memoCutRod</span><span class="params">(<span class="keyword">int</span>[] p, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        dp[i] = Integer.MIN_VALUE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> memoCutRodAux(p, n, dp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">memoCutRodAux</span><span class="params">(<span class="keyword">int</span>[] p, <span class="keyword">int</span> n, <span class="keyword">int</span>[] dp)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(dp[n] &gt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    <span class="keyword">int</span> ans;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>)</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        ans = Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            ans = Math.max(ans, p[i] + memoCutRodAux(p, n - i - <span class="number">1</span>, dp));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dp[n] = ans;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自底向上版本</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">bottomUpCutRod</span><span class="params">(<span class="keyword">int</span>[] p, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> ans = Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">            ans = Math.max(ans, p[j - <span class="number">1</span>] + dp[i - j]);</span><br><span class="line">        &#125;</span><br><span class="line">        dp[i] = ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="矩阵链乘法"><a href="#矩阵链乘法" class="headerlink" title="矩阵链乘法"></a>矩阵链乘法</h2><p>完全括号化的矩阵乘积链</p><p>求完全括号化方案使得所需标量乘法次数最少</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MatrixChainMultiplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] p = &#123;<span class="number">30</span>, <span class="number">35</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">25</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[][] m = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">7</span>][<span class="number">7</span>];</span><br><span class="line">        <span class="keyword">int</span>[][] s = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">7</span>][<span class="number">7</span>];</span><br><span class="line">        Matrix_Chain(p, <span class="number">6</span>, m, s);</span><br><span class="line">        print_optimal_parens(s, <span class="number">1</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Matrix_Chain</span><span class="params">(<span class="keyword">int</span>[] p, <span class="keyword">int</span> n, <span class="keyword">int</span>[][] m, <span class="keyword">int</span>[][] s)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//①将对角线上的值先赋值为0</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            m[i][i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>; <span class="comment">//l为矩阵链的长度</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//m[i][j]的第一个参数</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//m[i][j]的第二个参数</span></span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//②以长度L为划分，L从2开始到n</span></span><br><span class="line">        <span class="keyword">for</span> (l = <span class="number">2</span>; l &lt;= n; l++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//循环第一个参数，因为l的长度至少为2，所以i和j在这个循环里面肯定不相等</span></span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n - l + <span class="number">1</span>; i++) &#123;</span><br><span class="line">                <span class="comment">//因为j-i+1=l，所以j=l+i-1</span></span><br><span class="line">                j = i + l - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//给m[i][j]赋初值，这里要寻找m[i][j]的最小值，本来应当给m[i][j]赋值一个正无穷，但是这里直接赋一个i=j时候的特值也可以</span></span><br><span class="line">                m[i][j] = m[i][i] + m[i + <span class="number">1</span>][j] + p[i - <span class="number">1</span>] * p[i] * p[j];</span><br><span class="line">                s[i][j] = i;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//对于每个特定的i和j的组合，遍历此时所有的合适k值，k大于等于i小于j</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = i + <span class="number">1</span>; k &lt; j; k++) &#123; <span class="comment">//这里k不能等于j，因为后面要m[k+1][j]，不然k+1就比j大了</span></span><br><span class="line"></span><br><span class="line">                    tmp = m[i][k] + m[k + <span class="number">1</span>][j] + p[i - <span class="number">1</span>] * p[k] * p[j];</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (tmp &lt; m[i][j]) &#123;</span><br><span class="line">                        m[i][j] = tmp;</span><br><span class="line">                        s[i][j] = k;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print_optimal_parens</span><span class="params">(<span class="keyword">int</span>[][] s, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i == j) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;A&quot;</span> + i);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;(&quot;</span>);</span><br><span class="line">            print_optimal_parens(s, i, s[i][j]);</span><br><span class="line">            print_optimal_parens(s, s[i][j] + <span class="number">1</span>, j);</span><br><span class="line">            System.out.print(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态规划原理"><a href="#动态规划原理" class="headerlink" title="动态规划原理"></a>动态规划原理</h2><p>最优子结构和子问题重叠</p><p>如果一个问题的最优解包含其子问题的最优解，称此问题为具有最优子结构性质</p><ol><li>证明问题最优解的第一个组成部分是做出一个选择。</li><li>对于一个给定问题，在其可能的第一步选择中，你假定已经知道哪种选择才会得到最优解。</li><li>给定可能最优解的选择后 ，你确定这次选择会产生哪些子问题，以及如何更好地刻画子问题空间。</li><li>证明最为构成原问题的最优解的组成部分，每个子问题的解就是它本身的最优解。</li></ol><p>对于重叠子问题，对每个子问题求解一次，将解存入一个表中，当再次需要这个子问题时直接查表，每次查表的代价为常量时间。（备忘）</p><h2 id="最长公共子序列"><a href="#最长公共子序列" class="headerlink" title="最长公共子序列"></a>最长公共子序列</h2><p>给定两个序列，求X和Y长度最长的公共子序列</p><p>定义c[i, j]表示$X_i和Y_j$的LCS长度，则</p><script type="math/tex; mode=display">c[i,j]=\begin{cases}0,若i=0或j=0\\c[i-1,j-1]+1,若i,j>0且x_i=y_i\\max(c[i,j-1],c[i-1,j]),若i,j>0且x_i\neq y_i\end{cases}</script><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LCS</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] X = &#123;<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>&#125;;</span><br><span class="line">        <span class="keyword">char</span>[] Y = &#123;<span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;A&#x27;</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[][] c = <span class="keyword">new</span> <span class="keyword">int</span>[X.length + <span class="number">1</span>][Y.length + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span>[][] b = <span class="keyword">new</span> <span class="keyword">int</span>[X.length + <span class="number">1</span>][Y.length + <span class="number">1</span>];</span><br><span class="line">        LCS(X, Y, c, b);</span><br><span class="line">        printLCS(b, X, X.length, Y.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">LCS</span><span class="params">(<span class="keyword">char</span>[] x, <span class="keyword">char</span>[] y, <span class="keyword">int</span>[][] c, <span class="keyword">int</span>[][] b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = x.length;</span><br><span class="line">        <span class="keyword">int</span> n = y.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            c[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            c[<span class="number">0</span>][j] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (x[i - <span class="number">1</span>] == y[j - <span class="number">1</span>]) &#123;</span><br><span class="line">                    c[i][j] = c[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                    b[i][j] = <span class="number">2</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c[i - <span class="number">1</span>][j] &gt;= c[i][j - <span class="number">1</span>]) &#123;</span><br><span class="line">                    c[i][j] = c[i - <span class="number">1</span>][j];</span><br><span class="line">                    b[i][j] = <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    c[i][j] = c[i][j - <span class="number">1</span>];</span><br><span class="line">                    b[i][j] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printLCS</span><span class="params">(<span class="keyword">int</span>[][] b, <span class="keyword">char</span>[] X, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span> || j == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (b[i][j] == <span class="number">2</span>) &#123;</span><br><span class="line">            printLCS(b, X, i - <span class="number">1</span>, j - <span class="number">1</span>);</span><br><span class="line">            System.out.print(X[i - <span class="number">1</span>] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (b[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">            printLCS(b, X, i - <span class="number">1</span>, j);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            printLCS(b, X, i, j - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最优二叉搜索树"><a href="#最优二叉搜索树" class="headerlink" title="最优二叉搜索树"></a>最优二叉搜索树</h2><p>对于每个关键字，都有一个搜索频率，如何构造一个二叉搜索树使得所有搜索操作访问的结点总数最少</p><p>e[i,j]表示在包含关键字$k_i,…,k_j$进行一次搜索的的期望代价，最终希望计算出e[1,n]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OptimalBST</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span>[] p;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span>[] q;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span>[][] e;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span>[][] w;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[][] root;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        OptimalBST sample=<span class="keyword">new</span> OptimalBST();</span><br><span class="line">        sample.getInputInfo();</span><br><span class="line">        sample.optimalBST();</span><br><span class="line">        sample.constructOptimalBST(sample.root, <span class="number">1</span>, sample.n);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInputInfo</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;输入关键字的个数&quot;</span>);</span><br><span class="line">        Scanner in=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">this</span>.n=in.nextInt();</span><br><span class="line">        p=<span class="keyword">new</span> <span class="keyword">double</span>[n+<span class="number">1</span>];</span><br><span class="line">        q=<span class="keyword">new</span> <span class="keyword">double</span>[n+<span class="number">1</span>];</span><br><span class="line">        System.out.println(<span class="string">&quot;依次输入&quot;</span>+<span class="keyword">this</span>.n+<span class="string">&quot;个关键字的概率p&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            p[i+<span class="number">1</span>]=in.nextDouble();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;依次输入&quot;</span>+(<span class="keyword">this</span>.n+<span class="number">1</span>)+<span class="string">&quot;个非关键字的概率q&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            q[i]=in.nextDouble();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">optimalBST</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        e=<span class="keyword">new</span> <span class="keyword">double</span>[n+<span class="number">2</span>][n+<span class="number">1</span>];</span><br><span class="line">        w=<span class="keyword">new</span> <span class="keyword">double</span>[n+<span class="number">2</span>][n+<span class="number">1</span>];</span><br><span class="line">        root=<span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>][n+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n+<span class="number">2</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            e[i][i-<span class="number">1</span>]=q[i-<span class="number">1</span>];</span><br><span class="line">            w[i][i-<span class="number">1</span>]=q[i-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">1</span>;l&lt;=n;l++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n-l+<span class="number">1</span>;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> j=i+l-<span class="number">1</span>;</span><br><span class="line">                e[i][j]=Double.MAX_VALUE;</span><br><span class="line">                w[i][j]=w[i][j-<span class="number">1</span>]+p[j]+q[j];</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> r=i;r&lt;=j;r++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">double</span> t=e[i][r-<span class="number">1</span>]+e[r+<span class="number">1</span>][j]+w[i][j];</span><br><span class="line">                    <span class="keyword">if</span>(t&lt;e[i][j])</span><br><span class="line">                    &#123;</span><br><span class="line">                        e[i][j]=t;</span><br><span class="line">                        root[i][j]=r;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">constructOptimalBST</span><span class="params">(<span class="keyword">int</span>[][] root,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> r=root[i][j];</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">1</span>&amp;&amp;j==<span class="keyword">this</span>.n)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;k&quot;</span>+r+<span class="string">&quot;是根&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(r-<span class="number">1</span>&lt;i)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;d&quot;</span>+(r-<span class="number">1</span>)+<span class="string">&quot; 是 k&quot;</span>+r+<span class="string">&quot;的左子树&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;k&quot;</span>+root[i][r-<span class="number">1</span>]+<span class="string">&quot; 是 k&quot;</span>+r+<span class="string">&quot;的左子树&quot;</span>);</span><br><span class="line">            constructOptimalBST(root,i,r-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(j&lt;r+<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;d&quot;</span>+j+<span class="string">&quot; 是 k&quot;</span>+r+<span class="string">&quot;的右子树&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;k&quot;</span>+root[r+<span class="number">1</span>][j]+<span class="string">&quot; 是 k&quot;</span>+r+<span class="string">&quot;的右子树&quot;</span>);</span><br><span class="line">            constructOptimalBST(root,r+<span class="number">1</span>,j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法导论 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>内存中MVCC系统的可伸缩垃圾收集</title>
      <link href="2021/04/30/%E9%98%85%E8%AF%BB/%E5%86%85%E5%AD%98%E4%B8%ADMVCC%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%8F%AF%E4%BC%B8%E7%BC%A9%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86/"/>
      <url>2021/04/30/%E9%98%85%E8%AF%BB/%E5%86%85%E5%AD%98%E4%B8%ADMVCC%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%8F%AF%E4%BC%B8%E7%BC%A9%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>为了支持混合事务和分析处理（HTAP），数据库系统通常依赖于多版本并发控制（MVCC），虽然MVCC优雅地实现了读操作和写操作的轻量级隔离，但它也产生了过时的元组版本，这些版本最终必须被回收。令人惊讶的是，我们发现在HTAP工作负载中，这些旧版本的回收，即垃圾收集，往往成为性能瓶颈。事实证明在长期运行的查询中，最先进的垃圾收集器的粒度太粗了。因此，版本的数量迅速增长，拖慢了整个系统。此外，标准的后台清理方法使系统容易受到工作负荷突然激增的影响。</p><p>在这项工作中，我们提出了一种新的垃圾收集方法，它可以急切地修剪过时的版本。它与事务处理的无缝集成使GC的开销最小，并确保良好的可扩展性。我们表明，我们的方法可以很好地处理混合工作负载。而且与现有的最先进的方法相比，还可以加快纯OLTP工作负载的速度，如TPC-C。</p><span id="more"></span><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>MVCC是数据库系统中最常见的并发控制机制，根据不同的实现，它保证了快照隔离或完全可序化，如果辅以预决策锁的话，MVCC已经成为许多商业系统的默认机制。</p><p>MVCC的核心思想是简答而强大的：当一个元组被更新时，它的前一个版本通过系统保持存活，因此，事务可以在一个一致的数据快照上工作，而不会阻塞其他事务。与其他并发控制协议相比，读操作可以访问元素的旧快照，而写操作正在创建新版本，尽管多版本控制本身是无阻塞的，而且是可扩展的，但它在混合工作负载中存在固有的问题，如果在长期运行的事务中存在许多更新，活动版本的数量会迅速增长。只要活跃的事务可能需要的版本，都不能被丢弃。</p><p>由于这个原因，长期运行的事务会导致一个“恶性循环”，在事务的生命周期内，新添加的版本不能被垃圾收集，活动版本的数量不断累积，导致了版本链变长。随着链的长度的增加，检索所需的版本的成本也会增加。版本检索会使长期运行的事务变得更加缓慢，这就是使影响更加扩大了。写入事务最初几乎不被较长版本链的影响。因为它们不需要遍历整个版本链。他们只在链的开始添加新的版本。因此，快速的写事务和慢速的读事务之间的差距越来越大，迅速产生越来越多的版本。在某些时候，写的性能也会受到版本链上不断增加的冲突的影响，因此新版本的插入被阻止了，而版本链被锁在GC上。当线程在前台清理版本时，系统也会损失事务的处理时间。</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210528161933.png" alt="图1"></p><p>如图2，我们通过监测混合CH基准中的MVCC系统，直观地看到了所谓的“恶性循环的”实际意义，OLTP线程持续地运行短暂的TPC-C风格的事务，而OLAP线程发出分析性查询。我们看到，读取性能在几秒钟内就崩溃了，而写入则因为长时间的GC变慢了。如果有更高的写入量或者更高的并发读操作，其负面影响会更加明显。然而，即使是低容量的工作负载，只要GC被一个运行时间很长的事务（例如，被一个交互式用户事务）阻断，就会遇到这个问题。</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210601164529.png" alt="图2"></p><p>事实上，GC是一个主要的实际问题，会导致内存使用量的增加、征用和CPU的峰值，这一点已经被其他人观察到了。然而，关于MVCC协议和其他论文数量相比，关于GC的研究很少。</p><p>在本文中，我们表明，垃圾收集器是MVCC系统的一个重要组成部分。它的实现可以对系统的整体性能产生巨大的影响，因为它影响到事务的管理。因此，它对所有类别的工作负载都很重要，而不仅仅是混合的垃圾多的工作负载。我们的实验结果强调了GC在现代多核数据库中的重要性。作为一种解决方案，我们提出了Steam——一种精简的，无锁的GC设计，其性能优于以前的实现。Steam每当穿越一个版本链时都会急切地修剪。它删除了所有不被任何活动事务需要的版本。但大多数系统所使用的标准高期限方法会错过这些版本。</p><p>第二节介绍了基本的版本管理和垃圾处理在MVCC系统中收集以及关于混合工作负载和可扩展性的挑战。</p><p>第三节对现有的GCs和设计决策进行了深入的调查。</p><p>第四节中提出了我们的可扩展和稳健的垃圾收集器Steam，它减少了长时间运行的事务的脆弱性。</p><h2 id="2-MVCC中的版本管理"><a href="#2-MVCC中的版本管理" class="headerlink" title="2 MVCC中的版本管理"></a>2 MVCC中的版本管理</h2><p>MVCC是一个并发控制协议，每当元组被修改时，它就备份元组的旧版本。对于每个元组，事务可以检索到事务开始时的有效版本。因此所有事务都可以观察到表的一致快照。</p><p>一个元组的版本在一个有序的版本记录链中管理。每个版本记录都包含元组的旧版本和表明可见性的时间戳。在快照隔离下，如果一个版本在事务开始前被提交，那么它对事务是可见的。因此，时间戳等于事务的提交时间戳或一个高的临时数字，如果它仍然在运行中。</p><p>MVCC可以维护一个元组的多个版本（快照），而每次更新都会在链上增加一个新的版本记录。该链是按时间戳排序的，以方便检索可见的版本。</p><p>图3显示了一个被多次更新的元组的版本链。由于事务B和C在v4被提交之前就开始了，它们必须穿过该链以检索可见版本v1。</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210601164736.png" alt="图3"></p><h3 id="2-1-识别过时的版本"><a href="#2-1-识别过时的版本" class="headerlink" title="2.1 识别过时的版本"></a>2.1 识别过时的版本</h3><p>在讨论高效的垃圾收集之前，我们再来看看什么时候删除一个版本是安全的。一般来说，只要活动事务需要它来观察和数据库的一致快照，版本就必须被保留下来。从本质上来说，这意味着所有对活动事务可见的版本都必须保留。这些版本是否会被实际检索并不重要，因为数据库系统通常无法预测一个事务的访问时间，特别是在交互式用户查询的情况下。因此，它总是要保留可见的版本，只要它们在未来可能被访问。</p><p>可见的版本是由当前活跃的事务决定的。当一个版本不再被任何活动事务所需要时，它可以被安全地删除。未来是事务将不需要它们，因为它们已经在数据库的较新快照上工作了。因此，每个版本的重新要求的寿命只取决于当前的活动事务。</p><p>在最好的情况下，垃圾收集器可以识别并重新移动所有不必要的版本。然而，传统的垃圾收集器只跟踪最古老的事务的开始时间戳。因此，他们只能得到一个粗略的可重新要求的版本记录的估计。基本上，只有在最古老的事务开始之前提交的版本被确定为过时的。这就导致了在多次更新和长期事务的情况下，会有几个“遗漏”的版本。为了克服这个问题，我们在4.3节中提出了一个更细化的方法，对不必要的中间版本进行修剪。</p><h3 id="2-2-GC的实际影响"><a href="#2-2-GC的实际影响" class="headerlink" title="2.2 GC的实际影响"></a>2.2 GC的实际影响</h3><p>如图2，在这个实验中，我们运行了混合的CH基准测试，它结合了事务性的TPC-C和分析性的TPC-H工作负载，一个OLAP和OLTP线程足以使传统的高标准GC的能力过度紧张。只有一个仓库，孤立的查询执行时间是相当快的，然而，与写的持续时间相比，一些查询已经运行了很长时间，足以运行到“恶性循环”。通过添加更多的线程和仓库，效果会更差。</p><p>查询吞吐量在若干秒后明显下降，查询开始持续数秒。这些长期运行的查询在最上面的图中显示0查询/秒的增加其。只要这些查询在运行，版本记录的数量就会堆积起来。这导致了版本记录数量的“鲨鱼鳍”出现。只有当读结束后，写才开始清理版本记录。在这些GC时期，它不能实现任何额外的写进度。随着时间的推移，效果越来越差，版本记录数量的振幅增加，而读写性能几乎下降到0。在这种设置下，只有一个写线程，GC线程的背压已经很高了，而且版本的数量不断增长。特别是如果GC线程不能赶上写线程的话，对读取性能的影响是巨大的。在某些时候，整个系统会耗尽内存。</p><h2 id="3-垃圾收集调查"><a href="#3-垃圾收集调查" class="headerlink" title="3 垃圾收集调查"></a>3 垃圾收集调查</h2><p>我们的调查将现代内存中MVCC系统的GC实现与我们的新方法Steam进行了比较，我们在第四节中详述。</p><p>Steam是一个高度可扩展的垃圾收集器，它建立在HyPer的事务和版本管理之上。通过基于当前的活动的事务精确地修剪版本链，避免了长的版本链。这是用一种类似于HANA的基于间隔的算法来完成的，只是版本修剪不是在后台进行的，而是在前台通过对事务处理的搭接来主动完成的。每当一个链因更新或插入而增长时，它就会被急切地修剪掉。这使得修剪的成本小的可以忽略不计，因为链已经被相应的更新操作锁定和访问。</p><p>Hekaton也在常规的事务处理过程中清理版本。与Steam不同的是，它只清理那些在扫描过程中被遍历的过时版本，而Steam在读者可能需要遍历它们时就已经删除了过时的版本。从本质上讲，Steam在版本链因新版本的插入而增长时就会进行修剪——将版本链的长度限制在活动事务的数量上。此外，Hekaton只根据一个更粗略的高水印概念回收版本，而Steam则清理一个链上的所有过时版本。</p><p>在高层次上，Steam可以被看做HANA，Hekaton和HyPer中各种现有技术的实际结合和扩展。正如我们在实验中所展示的，看似微小的差异对性能、可扩展性和可靠性都有巨大的影响。在本节的其余部分，我们将更详细地讨论不同的设计决策，并在表1中对其进行总结。</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210601174301.png" alt="表1"></p><p><strong>追踪水平</strong></p><p>数据库系统使用不同颗粒度来追踪垃圾收集的版本。最精确的方法是在元组级GC，GC通过扫描单个图元来识别过时的版本，一般来说，这是用一个周期性调用的后台真空程序来实现的。然而，在常规事务处理过程中，也有可能在前台找到并清理版本。例如，Hekaton的工作线程在查询处理过程中清理了他们看到的所有过时的版本。由于这种方法只清理了遍历的版本，Hekaton仍然需要一个额外的后台线程来寻找剩余的版本。</p><p>另外，系统可以根据事务行为来收集版本。所有由同一事务创建的版本都有相同的提交时间戳。因此，多个过时的版本可以被识别并一次性清理掉。虽然这使得内存管理和版本管理更容易，但与更细粒度的元组级方法相比，它可能会延迟单个版本的回收。</p><p>基于纪元的系统更进一步，将多个事务归入一个纪元。一个纪元是根据一个阈值标准来推进的，比如分配的内存量或版本数量。  BOHM也使用纪元，但由于它是分批执行事务的，所以它也在批次层面上跟踪GC。</p><p>最粗略的粒度是对每个表进行版本回收。当确定一组给定的转换动作将永远不会访问一个表时，这才有意义。只有这样，系统才能删除该表的所有版本，而不必等待这些事务的完成。由于这只适用于具有固定给定操作集的特殊工作负载，例如存储程序或准备好的语句，这种方法很少被使用。HANA是我们所知道的唯一一个将这种方法作为其图层和事务层GC的延伸的系统。一般来说，数据库系统不能确定地预测哪些表将在事务的生命周期内被访问。</p><p><strong>频率和精度</strong></p><p>频率和精度指的是GC识别和清理过时版本的速度和彻底程度。如果GC没有被定期触发或者工作不精确，那么它保留的版本就会超过必要的时间。基于纪元的系统通过在一定的阈值计数或内存限制的基础上推进其全局纪元来控制GC。因此，频率高度依赖于阈值的设置。</p><p>建立在后台线程上的GC系统，会周期性地触发后台线程。因此，GC的频率取决于背景线程被调用的频率。由于HANA和Hekaton使用后台线程来重新刷新他们的高水印，如果GC被调用的频率太低，那么垃圾收集的决策就会基于过时的信息。在最坏的情况下，GC会停滞，直到下一次调用后台线程。像Hekaton这样的系统，根据当前的负载自适应地改变间隔时间。</p><p>BOHM的事务是分批组织和执行的。在一个批次结束时进行GC，以确保所有的事务都执行完毕。除了一个元组的最新状态外，只有以前执行的批次的版本可以安全地进行GC。</p><p>除了GC的频率，它的彻底性主要由GC识别可删除版本的方式来决定。基于时间戳的识别方式不如基于区间的方式彻底。时间戳的方法比较近似，因为它只删除那些严格按照时间顺序排列的时间戳已经落后于高水位的版本，高水位是由当前活动交易的最小开始时间戳设定的。由于高水位线与最古老的活动事务有关，所以只要是活动的，长期运行的事务就会阻碍整个GC的进展。在这种情况下，基于时间间隔的GC仍然可以通过从链的中间位置切除过时的版本来取得进展。一般来说，基于时间间隔的GC只保留必要的版本，从而准确地清理数据库。</p><p><strong>版本存储</strong></p><p>大多数系统将版本记录存储在全局数据结构中，如哈希表。这使得系统可以独立地回收每一个版本。缺点是，标准情况下，整个交易的所有版本都落在水印后面，变得更加复杂，因为这些版本必须在全局存储中被识别。根据实施情况，这可能需要一个定期的后台真空过程。</p><p>由于这个原因，HyPer和Steam将其版本直接存储在事务中，即Undo Log。当一个事务落后于高水位时，它的所有版本可以一起被回收，因为它们的内存是由事务对象拥有的。尽管如此，单个版本仍然可以从版本链中被剪除（解除链接）。只有对其内存的回收被推迟到拥有的事务对象被释放。一般来说，使用事务的撤销日志作为版本存储也是很有吸引力的，因为撤销日志无论如何都是需要回滚的。  使用撤销日志条目作为版本记录是直截了当的，因为之前的存储图像包含了恢复一个元组的前一个版本的所有信息。由于空间的原因，我们只在版本记录中存储<em>delta</em>，即改变的属性。如果一个系统存储整个元组，更新宽表或具有可变大小属性的表，如字符串或BLOBs，会导致几个不必要的复制操作。</p><p>Hekaton的版本管理很特别，因为它不使用连续的表空间和原位元组。一个元组的版本只能从索引中访问。由于这个原因，Hekaton不区分版本记录和元组。此外，它是唯一一个将记录从最旧到最新排序的系统（O2N）。这种顺序迫使事务遍历整个链条以找到最新的版本，这使得系统的性能高度依赖于其快速修剪旧版本的能力。O2N排序也使得检测写与写之间的冲突变得更加昂贵，因为事务必须遍历整个链来检测冲突版本的存在。同样的情况也适用于回滚，回滚也需要遍历整个链来恢复和删除以前安装的版本。</p><p><strong>识别</strong></p><p>如果提交时间戳是单调的，它们可以用来识别过时的版本。所有在最老的活动事务开始之前提交的版本都可以被安全回收。  当活跃的事务被管理在一个有序的数据结构中时，如全局txn列表或txn地图，最老的活跃事务的开始时间戳可以在静态时间内确定。</p><p>由于纯粹的基于时间戳的方法错过了第2.1节中讨论的中间版本，像HANA和Steam这样的系统用更精细的基于时间间隔的方法来补充它。虽然这种方法使版本链的长度最小，但实施起来也更复杂。这些系统必须跟踪所有活跃的交易，并对每个版本链进行基于时间间隔的交叉分析。HANA通过使用参考计数列表（”全球STS跟踪器”）跟踪所有在同一时间开始的交易来实现这一点。在第4.3节中，我们提出了一个使用本地txn列表的更可扩展的替代实现。</p><p>为了实现更粗略的垃圾收集，也可以控制版本的寿命，以纪元为单位。这在本质上接近于其他系统所使用的更精确的基于时间戳的水印。然而，在数据库系统中，基于历时的内存管理是一种很有吸引力的技术，因为它可以用来控制所有类型的对象的回收，而不仅仅是版本。当一个事务开始时，它通过输入纪元将自己注册在当前的纪元中。这将导致纪元保护器推迟事务所做的所有内存去分配/版本删除，直到所有其他线程离开这个纪元，从而不再访问它们。虽然在历时中管理版本限制了GC的精度，但它允许系统在执行事务时不会出现单调增加的事务时间戳。例如，在基于时间戳排序的MVCC系统中，如Deuteronomy或BOHM，版本的创建或访问顺序可能与它们的逻辑时间戳显示的顺序不同。</p><p>与所选择的数据结构无关，识别哪些版本是过时的，既可以由后台（BG）线程来完成，也可以在前台（FG）主动完成。</p><p><strong>清除</strong></p><p>在HANA中，整个GC工作是由一个专门的后台线程完成的，该线程会定期触发。Hekaton在事务处理过程中即时清理所有版本。每当一个线程遍历一个过时的版本，它就会从链上删除它。注意，这只适用于O2N，当过时的（旧的）版本被存储在开始时，因此总是被事务所遍历。为了清理不经常访问的图元，Hekaton运行一个后台线程，扫描整个数据库，以寻找迄今为止错过的版本。然后，后台线程将清除这些版本的工作分配给工人线程，工人线程将GC工作与常规事务处理穿插进行。</p><p>在基于历时的系统中，一个常见的模式是将已提交的版本与当前的历时信息一起添加到一个自由列表中。当一个事务需要一个新的版本时，它会检查它是否能从基于当前纪元的自由列表中回收一个旧版本。因此，版本重新移动基本上是与正常的交易处理穿插进行的。然而，纪元保护应该周期性地释放超过新需要的版本。另外，随着时间的推移，版本的总体数量只能上升，因为所有重复使用的版本最终都会再次进入自由列表。通过限制版本的最大数量来解决这个问题。当达到硬性限制时，就不允许再创建版本了，线程会被联合起来执行GC，直到版本的数量再次得到控制。</p><p>HyPer和Steam也在前台执行整个GC工作，将GC任务穿插在事务执行过程中。如果有过时的版本，工人线程会在每次提交后直接回收这些版本。因此，GC成为事务处理的一个自然部分，不需要额外的后台线程。这使得系统可以自我调节，并对高峰期保持稳定，但代价是提交延迟略有增加。此外，每当Steam将一个新版本插入到一个链中时，它都会在创建时修剪过时的版本。  因此，Steam确保 “污染者 “负责清除垃圾，从而减轻了（可能已经很慢的）读者的负担。</p><h2 id="4-Steam垃圾收集"><a href="#4-Steam垃圾收集" class="headerlink" title="4 Steam垃圾收集"></a>4 Steam垃圾收集</h2><p>版本的垃圾收集在MVCC系统中具有内在的重要性，因为它可以保持较低的内存占用率并减少昂贵的版本检索次数。在这一节中，我们为MVCC系统中的垃圾收集提出了一个高效和稳健的解决方案。我们主要针对三个方面：可扩展性、长期运行的事务和内存效率设计。</p><h3 id="4-1-基本设计"><a href="#4-1-基本设计" class="headerlink" title="4.1 基本设计"></a>4.1 基本设计</h3><p>Steam以HyPer的MVCC实现为基础，并使其变得更加强大和可扩展。为了跟踪活动的和承诺的事务，HyPer使用两个链接列表，如图4所示。</p><p>虽然HANA和Hekaton使用不同的数据结构（一个参考计数的列表和一个地图），但高层属性是相同的。所有的实现都隐含地保持了交易行动的有序性，添加或删除一个交易可以在恒定的时间内完成。为了启动一个新的事务，系统将其添加到活动事务列表中。当一个活动事务提交时，系统会把它移到已提交的事务列表中，以保留其创建的版本。已完成的只读事务，如果没有创建任何元组版本，则直接被丢弃。</p><p>通过将新的或已承诺的交易追加到列表中，交易列表被隐含地按其时间戳排序。这种排序允许人们通过查看活动事务列表的第一个元素来有效地检索最小的startTs。已提交的交易中，commitId为min(startTs)的版本可以被安全回收。由于已提交的交易列表也是有序的，系统可以回收所有的交易，直到它遇到在最古老的活动交易之后提交的交易。</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210603193539.png" alt="图4"></p><h3 id="4-2-可扩展的同步化"><a href="#4-2-可扩展的同步化" class="headerlink" title="4.2 可扩展的同步化"></a>4.2 可扩展的同步化</h3><p>虽然前面描述的基本设计为GC操作提供了稳定的访问时间，但其可扩展性是有限的由全局事务列表组成。这两个列表都需要由一个全局突变器来保护。出于可扩展性的考虑，我们的目标是避免引入全局争用的数据结构。Hekaton通过使用一个无锁存器的交易行动图来避免全局突变的问题。  与此相反，Steam遵循的范式是，最好使用完全不需要同步的算法。对于GC，我们利用了一个特定领域的事实，即保留版本的时间稍长于必要的时间不会影响正确性—版本仍然可以在 “下一轮 “中被回收。Steam的实施根本不需要任何同步通信。Steam中的每个线程都管理着一个不相连的事务子集，而不是使用全局列表。一个线程只在全局范围内分享其线程本地最小值的信息，通过使用一个原子性的64位整数将其公开。这个线程本地的startTs可以被其他线程读取，以确定全球最小值。</p><p>本地最小值总是对应于第一个活跃的交易。如果没有活跃的交易，它被设置为可能的最高值（264 1）。在图中，本地最小值是4、3和12。为了确定GC的全局最小值，每个线程都扫描了其他线程的局部最小值。虽然这种设计不需要任何锁存，但全局最小值仍然可以在O(线程)内确定。更新线程的本地最小值也不会引入任何写入竞争，因为每个线程只更新自己的minStartTs。</p><p>在线程本地数据结构中管理所有事务可以减少争论。但缺点是，当一个线程由于缺乏工作而变得不活跃时，这可能会导致问题的出现。因为每个线程在处理事务的过程中都会清理其过时的版本，如果线程变得闲置，GC就会被延迟。为了避免这个问题，调度器会定期检查线程是否变得不活跃，并在必要时触发GC。</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210603213953.png" alt="图5"></p><h3 id="4-3-急于修剪过时的版本"><a href="#4-3-急于修剪过时的版本" class="headerlink" title="4.3 急于修剪过时的版本"></a>4.3 急于修剪过时的版本</h3><p>在最初的测试中，我们注意到在混合工作负载中出现了明显的性能下降。缓慢的OLAP查询阻碍了垃圾的收集，因为只要一个长期运行的查询处于活动状态，全局最小值就不会提前。根据分析查询的复杂性，这可能会使GC暂停很长时间。在并发的更新事务中，版本的数量会在查询的生命周期内迅速增加。这很容易导致1节所述的恶性循环。在实践中，这种影响会被倾斜的更新所进一步放大，从而导致更长的版本链。图3显示了一个元组的版本如何形成一个长链，其中大部分的版本对活动事务来说是无用的。无用的版本拖慢了长期运行的事务的速度，因为它们必须穿越整个链来检索最终需要的版本。因此，我们设计了Eager Pruning of Obsolete Versions (EPO)，删除了所有不被任何活动事务所需要的版本。为了识别过时的版本，每个线程定期检索当前活动事务的开始时间戳，并将其存储在一个排序的列表中。如第4.3.1节所述，活动时间戳的获取是有效的，无需额外的同步。在整个交易处理过程中，线程识别并删除所有当前活动交易不需要的版本。每当一个线程接触到一个版本链时，它就会应用以下算法来修剪所有过时的版本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">input : active timestamps A ( sorted )</span><br><span class="line">output : pruned version chain</span><br><span class="line">v_current &lt;-  getFirstVersion(chain)</span><br><span class="line">for ai in A</span><br><span class="line">v_visible &lt;- retrieveVisibleVersion(a_i; chain)</span><br><span class="line">&#x2F;&#x2F; prune obsolete in-between versions</span><br><span class="line">for v in (v_current; v_visible )</span><br><span class="line">&#x2F;&#x2F; ensure that the final version covers all attributes</span><br><span class="line">if attrs(v) not in attrs(v_visible)</span><br><span class="line">merge ( v , v_visible )</span><br><span class="line">chain.remove ( v )</span><br><span class="line">&#x2F;&#x2F; update current version iterator</span><br><span class="line">v_current &lt;- v_visible</span><br></pre></td></tr></table></figure><p>我们只在版本记录中存储改变的属性，以节省内存。由于这个原因，我们必须检查v的所有属性是否被vvisible覆盖。如果有额外的属性，我们就把它们合并到最终版本中。存储整个元组的系统不需要这种检查，可以直接丢弃中间的版本。</p><p>图6显示了从时间戳20开始的一个活动事务的版本链的修剪情况。它显示了相对简单的情况，即所有的属性都被vvisible覆盖，以及更复杂的情况，即中间的版本包含额外的属性。  在这种情况下，我们将缺失的版本添加到最终版本中。  当一个属性被多次更新时，当我们在接近可见版本vvisble时发现它的旧版本，我们就会覆盖它。在我们的例子中，A50被A25覆盖了。  在修剪之后，vcurrent被设置为vvisible的当前值，vvisible被推进到下一个较旧的（较小的）活动id可见的版本。由于我们的例子中只有一个活动事务，我们可以在这一点上停止。</p><p>由于版本链和活动时间戳都是经过排序的，没有重复，所以每个版本只被算法触及一次。</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210603220014.png" alt="image-20210603220013966"></p><h3 id="4-3-1-短暂的事务"><a href="#4-3-1-短暂的事务" class="headerlink" title="4.3.1 短暂的事务"></a>4.3.1 短暂的事务</h3><p>EPO是为混合工作负载设计的，其中一些交易（主要是OLAP查询）明显比其他的慢。如果所有的交易都一样快，它就没有帮助，因为提交的时间戳与最古老的活动交易的ID几乎没有差别。</p><p>一个使用全局最小值的标准GC在这里已经工作得非常好。因此，创建一个活跃的交易集几乎不会有什么回报，因为可还原的版本链的数量很少。理想情况下，我们可以避免重新计算当前交易时间戳的开销。</p><p>然而，一般来说，数据库系统不可能知道工作负载的特点，而且会随着时间的推移而改变。因此，我们不是关闭EPO，而是减少其开销，而不影响其在混合工作负载中的有效性。</p><p>该方法的唯一可测量的开销是创建当前活动事务的排序列表。列表的创建只给每个事务的处理增加了几个周期（对于一个使用10个工作线程的系统来说，有10条负载指令2并对其进行排序），但在高容量的微观测试中，它仍然是明显的。</p><p>为了减少这种开销，每个线程都会重复使用其有效交易列表，如果它仍然是合理的最新的。因此，成本被分摊到多个短暂的交易中，开销变得可以忽略不计。对于运行时间超过1毫秒的交易，获取活动交易时间戳的成本变得微不足道。EPO的质量不会受到影响，因为长期运行的交易集的变化频率明显低于活动交易列表的更新。</p><p>在使用廉价键值更新事务的微观测试中，我们注意到，更新周期可以被设置为低至5毫秒，而不会造成任何可衡量的开销。这个更新周期仍然明显小于甚至是 “短的长期运行 “事务的生命时间。</p><h3 id="4-3-2-HANA的基于区间的GC"><a href="#4-3-2-HANA的基于区间的GC" class="headerlink" title="4.3.2 HANA的基于区间的GC"></a>4.3.2 HANA的基于区间的GC</h3><p>HANA的间隔GC建立在类似的技术基础上，以缩短不必要的长版本链，但它在重要的方面有区别，总结在表2。最大的区别是如何访问版本链进行修剪。  在Steam中，修剪发生在一个元组的每次更新期间，也就是说，每当版本链被一个新的版本扩展时。因此，版本链永远不会增长到比当前活动事务数量更多的版本，也不会包含过时的版本。</p><p>相反，在HANA中，修剪是由一个专门的后台线程完成的，该线程每隔10天才会被触发。当HANA的GC线程被触发时，它扫描了在最古老的活动事务开始后提交的版本集。  对于这些版本中的每一个，它都会使用与我们类似的基于合并的算法来检查它在其相应的版本链中是否已经过时。这将导致额外的链访问，而Steam可以在正常处理中 “回溯 “这项工作。由于HANA只是周期性地调用基于间隔的GC，版本链不会被修剪，并在GC再次被调用之前不断增长。</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210603215712.png" alt="image-20210603215712265"></p><h3 id="4-4-版本记录的布局"><a href="#4-4-版本记录的布局" class="headerlink" title="4.4 版本记录的布局"></a>4.4 版本记录的布局</h3><p>版本记录的设计应该在空间和com-putation上是有效的。所有涉及版本的操作（插入、更新、删除、查找和回滚）都应该尽可能有效。此外，布局应该有利于GC本身，特别是我们的修剪中间版本的算法。</p><p>表3显示了一个版本记录的基本布局。它有一个类型（插入/更新/删除）和在版本中编码的可见性信息。在提交时，版本被设置为提交的时间戳，这使得该版本对所有未来的事务都是可见的。为了保证原子提交，版本包括一个锁位，当一个事务同时提交多个版本时，它就会被使用。</p><p>当一个事务被回滚时，它使用RelationId和TupleId来识别和恢复关系中的元组。  这些字段在GC期间也被用来识别拥有版本链的元组。版本链本身被实现为一个使用Next Pointer字段的链接列表。下一个指针要么指向链中的下一个版本记录，要么在没有记录的情况下指向NULL。</p><p>对于所有类型的版本记录，除了删除，我们需要一些额外的字段或变化。对于删除，只需要来存储一个元组由于被删除而变得不可见的时间戳。</p><p>对于插入，我们通过重新解释属性TupleId和Next Pointer来调整数据布局，以维护一个插入元组ID的列表。这使我们能够更有效地处理批量插入，因为我们可以对同一关系的所有插入元组使用一个版本记录。共享插入的版本记录减少了内存占用（以前每个插入的元组都需要一个自己的版本记录）并改善了提交延迟。我们现在可以通过只更新一个版本来原子地提交多个版本。这种优化是可能的，因为新的元组只能被插入到以前的空槽中。  因此，我们可以重新使用<em>下一个指针</em>字段来维护插入的图元ID的列表。对于MVCC，我们只需要插入的图元变得可见时的信息。  元组ID列表可以通过存储后续元组的范围来进一步压缩，用于批量插入。</p><p>更新版本记录需要最多的字段，因为它们包含元组以前的版本（BeforeImages）。为了节省空间，我们只存储改变了的at-tributes的版本，而不是元组的完整副本。因此，版本记录需要明确指出它包含哪些属性。因此，对于所有少于64个属性的关系，我们使用一个64位的属性掩码，其中每个改变的属性都用一个位来标记。当关系有更多的列时，我们使用所有改变的属性的id的列表来表示改变的属性。</p><p>虽然与列表相比，属性掩码节省了空间，但它也允许我们使用单一的位智或操作来执行检查一个版本记录是否被另一个版本记录所覆盖（参见算法第9行）。  如果vx和vy的属性掩码的位智或等于vx的属性掩码，那么vy的所有属性都被vx覆盖。</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210603215606.png" alt="image-20210603215606140"></p><h2 id="5-结论"><a href="#5-结论" class="headerlink" title="5 结论"></a>5 结论</h2><p>在本文中，我们展示了在现代多核系统上的内存MVCC系统的垃圾收集的重要性。我们发现，GC应该基于线程本地数据结构和异步通信以获得最佳性能。此外，对于HTAP的工作负载来说，保持尽可能低的活动版本数量是非常重要的，因为它是短命的写和长命的读。在传统的基于高水印的方法中，一个长期运行的事务会在其生命周期内阻碍GC的进展。我们新颖的、可扩展的GC Steam通过每当有新版本加入时急切地修剪所有过时的版本来加速事务处理和垃圾清除。因此，Steam有效地将链的长度限制在活动事务的数量上。除了HTAP工作负载，我们的实验结果表明，Steam有利于所有类型的工作负载，从只写到只读。与其他先进的GC方法相比，Steam在交易处理中的无缝集成使其性能更加优越。来自交易处理的GC。</p>]]></content>
      
      
      <categories>
          
          <category> 阅读 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第5章 指令级并行及其开发</title>
      <link href="2021/04/30/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84_todo/%E7%AC%AC5%E7%AB%A0-%E6%8C%87%E4%BB%A4%E7%BA%A7%E5%B9%B6%E8%A1%8C%E5%8F%8A%E5%85%B6%E5%BC%80%E5%8F%91/"/>
      <url>2021/04/30/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84_todo/%E7%AC%AC5%E7%AB%A0-%E6%8C%87%E4%BB%A4%E7%BA%A7%E5%B9%B6%E8%A1%8C%E5%8F%8A%E5%85%B6%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h2 id="指令级并行的基本概念"><a href="#指令级并行的基本概念" class="headerlink" title="指令级并行的基本概念"></a>指令级并行的基本概念</h2><h3 id="什么是指令级并行"><a href="#什么是指令级并行" class="headerlink" title="什么是指令级并行"></a>什么是指令级并行</h3><p>指令级并行：指令之间可以实现重叠执行</p><p>两种开发方法：</p><ol><li>依靠硬件来实现动态发现和开发并行</li><li>依靠软件技术在编译时静态发现并行</li></ol><span id="more"></span><p>$CPI_{流水线}=CPI_{理想}+停顿_{结构冲突}+停顿_{数据冲突}+停顿_{控制冲突}$</p><p>理想CPI是衡量流水线最高性能的一个指标</p><p><em>基本程序块</em>：一个程序块，除了出口和入口不包含其他分支</p><p>循环级并行：使一个循环中的不同循环体并行执行</p><p>最基本的开发循环级并行的技术</p><ul><li>循环展开技术</li><li>采用向量处理器和图形处理器（GPU）中的SIMD</li></ul><h3 id="数据相关和冒险"><a href="#数据相关和冒险" class="headerlink" title="数据相关和冒险"></a><strong>数据相关和冒险</strong></h3><p>相关：两条指令之间存在某种依赖关系</p><p>三种类型：数据相关/真数据相关、名称相关、控制相关</p><p><em>数据相关</em></p><p>指令i，j相关满足下述条件之一</p><ol><li>指令j使用指令i产生的结果</li><li>指令j与指令k数据相关，而指令k又与指令i数据相关</li></ol><ul><li>从两个方面解决相关问题<ul><li>保持相关，避免发生冒险</li><li>通过代码变换，消除相关</li></ul></li></ul><p><em>名称相关</em></p><p>名称：指令所访问的寄存器或存储单元的名称</p><p>如果两条指令使用相同的名称，但是它们之间并没有数据流动，则称这两条指令存在名称相关。</p><p>换名技术</p><p>数据冒险：只要指令间存在名称相关或数据相关，当相关的指令靠的足够近时，它们在流水线中的重叠执行或者重新排序会改变指令读/写操作数顺序，使之不同于它们非流水实现时的顺序，则发生了数据冒险。</p><p>程序顺序：由源程序确定的在完全串行方式下指令的执行顺序。</p><p>必须保持源程序顺序</p><p>三种类型的数据冒险</p><ul><li>写后读</li><li>写后写</li><li>读后写冲突</li></ul><h3 id="控制相关"><a href="#控制相关" class="headerlink" title="控制相关"></a><strong>控制相关</strong></h3><p>控制相关是由分支指令引起的相关</p><p>对于正确执行程序来说，必须保持的最关键的两个属性是：数据流和异常行为</p><p>保持程序的数据相关和控制相关就能保持前两者</p><h2 id="基本流水线调度和循环展开"><a href="#基本流水线调度和循环展开" class="headerlink" title="基本流水线调度和循环展开"></a>基本流水线调度和循环展开</h2><p>充分开发指令之间存在的并行性，找出不相关的指令序列，让它们在流水线上重叠并行执行。</p><p>最常用的方法：</p><ol><li>开发循环级并行性——循环的不同迭代之间存在的并行性。</li><li>在把循环展开后，通过重命名和指令调度来开发更多的并行性。</li></ol><h2 id="用高级分支预测降低分支成本"><a href="#用高级分支预测降低分支成本" class="headerlink" title="用高级分支预测降低分支成本"></a>用高级分支预测降低分支成本</h2><h3 id="竞赛预测器"><a href="#竞赛预测器" class="headerlink" title="竞赛预测器"></a>竞赛预测器</h3><p>采用多个预测器，通常是一个基于全局信息的预测器和一个基于局部信息的预测器，用选择器将它们结合起来。</p><h3 id="Intel-Core-i7分支预测器"><a href="#Intel-Core-i7分支预测器" class="headerlink" title="Intel Core i7分支预测器"></a>Intel Core i7分支预测器</h3><ul><li>使用一个两级预测器</li><li>每个预测器都组合了3个不同的预测器</li></ul><h2 id="用动态调度克服数据冒险"><a href="#用动态调度克服数据冒险" class="headerlink" title="用动态调度克服数据冒险"></a>用动态调度克服数据冒险</h2><h3 id="动态调度"><a href="#动态调度" class="headerlink" title="动态调度"></a>动态调度</h3><p>在程序执行过程中，依靠专门硬件对代码进行调度，减少数据相关导致的停顿。</p><h3 id="Tomasulo算法"><a href="#Tomasulo算法" class="headerlink" title="Tomasulo算法"></a>Tomasulo算法</h3><p>见<a href="https://ryan377.github.io/2021/05/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/Tomasulo%E7%AE%97%E6%B3%95/">Tomasulo算法</a></p><h2 id="基于硬件的推测"><a href="#基于硬件的推测" class="headerlink" title="基于硬件的推测"></a>基于硬件的推测</h2><p>基本思想：对分支指令的结果进行猜测，并假设这个猜测总是对的，然后按这个猜测结果继续取、流出和执行后续的指令。只是执行指令的结果不是写回到寄存器或存储器，而是放到一个称为ROB的缓冲器中。等到相应的指令得到“确认”之后，才将结果写入寄存器或存储器。</p><h2 id="以多发射和静态调度来开发ILP"><a href="#以多发射和静态调度来开发ILP" class="headerlink" title="以多发射和静态调度来开发ILP"></a>以多发射和静态调度来开发ILP</h2><h2 id="以动态调度、多发射和推测来开发ILP"><a href="#以动态调度、多发射和推测来开发ILP" class="headerlink" title="以动态调度、多发射和推测来开发ILP"></a>以动态调度、多发射和推测来开发ILP</h2><h2 id="用指令传送和推测的高级技术"><a href="#用指令传送和推测的高级技术" class="headerlink" title="用指令传送和推测的高级技术"></a>用指令传送和推测的高级技术</h2><h2 id="ILP局限性研究"><a href="#ILP局限性研究" class="headerlink" title="ILP局限性研究"></a>ILP局限性研究</h2><h2 id="交叉问题：ILP方法与存储器系统"><a href="#交叉问题：ILP方法与存储器系统" class="headerlink" title="交叉问题：ILP方法与存储器系统"></a>交叉问题：ILP方法与存储器系统</h2><h2 id="多线程：开发线程级并行提高单处理器吞吐量"><a href="#多线程：开发线程级并行提高单处理器吞吐量" class="headerlink" title="多线程：开发线程级并行提高单处理器吞吐量"></a>多线程：开发线程级并行提高单处理器吞吐量</h2><h2 id="Intel-Core-i7和ARM-Cortex-A8"><a href="#Intel-Core-i7和ARM-Cortex-A8" class="headerlink" title="Intel Core i7和ARM Cortex-A8"></a>Intel Core i7和ARM Cortex-A8</h2>]]></content>
      
      
      <categories>
          
          <category> 计算机体系结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>软件工程 第13章 软件测试</title>
      <link href="2021/04/26/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B-%E7%AC%AC13%E7%AB%A0-%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
      <url>2021/04/26/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B-%E7%AC%AC13%E7%AB%A0-%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h2 id="软件测试基础"><a href="#软件测试基础" class="headerlink" title="软件测试基础"></a>软件测试基础</h2><p><strong>软件测试的目的</strong></p><ul><li>测试是一个为了发现错误而执行程序的过程</li><li>一个好的测试用例是指很可能找到迄今为止尚未发现的错位的测试用例</li><li>一个成功的测试是指揭示了迄今为止尚未发现的错误的测试</li></ul><p><strong>软件测试的基本原则</strong></p><span id="more"></span><p><strong>白盒测试和黑盒测试</strong></p><p>白盒测试又称结构测试，检查程序中的所有逻辑路径是否都按照预定的要求正确地工作；</p><p>黑盒测试又称行为测试，只依据程序的需求规格说明书，检查程序的功能是否符合它的功能需求</p><h2 id="白盒测试"><a href="#白盒测试" class="headerlink" title="白盒测试"></a>白盒测试</h2><p><strong>逻辑覆盖测试</strong></p><p>主要考察使用测试数据运行被测试程序时对程序逻辑的覆盖程度</p><p>包括语句覆盖、判定覆盖、条件覆盖、判定/条件覆盖、条件组合覆盖、路径覆盖</p><p><strong>逻辑表达式错误敏感的测试</strong></p><p>当逻辑变量比较多的时候，对发现逻辑表达式错误比较敏感的组合条件进行测试，以较少的测试用例来发现逻辑表达式中的绝大多数错误。</p><p><strong>基本路径测试</strong></p><p>根据程序或设计图画出控制流图，并计算其区域数，然后确定一组独立的程序执行路径（称为基本路径），最后为每一条基本路径设计一个测试用例。</p><p><strong>数据流测试</strong></p><p>根据程序中变量的定义（即赋值）和引用位置来设计测试用例，以发现变量赋值和引用方面的错误。</p><p><strong>循环测试</strong></p><p>包括简单循环、嵌套循环、串接循环、非结构循环</p><h2 id="黑盒测试"><a href="#黑盒测试" class="headerlink" title="黑盒测试"></a>黑盒测试</h2><p><strong>等价类划分</strong></p><p>将所有可能的输入数据划分成若干个等价类，然后在每个等价类中选取一个代表性的数据作为测试数据。</p><p><strong>边界值分析</strong></p><p>利用程序在输入或输出范围的边界情况时出错可能性较大的性质设计测试用例。</p><p><strong>比较测试</strong></p><p>比较两个版本结果是否相同。</p><p><strong>错误猜测</strong></p><p>凭借直觉和经验推断可能存在的错误。</p><p><strong>因果图</strong></p><p>一种帮助人们系统地选择一组高效测试用例的方法，既考虑了输入条件的组合关系，又考虑了输出条件对输入条件的依赖关系，即因果关系。</p><h2 id="测试策略"><a href="#测试策略" class="headerlink" title="测试策略"></a>测试策略</h2><p>软件测试策略把软件测试用例的设计方法集成到一系列经周密计划的步骤中去，从而使得软件的测试得以成功地完成。</p><p><strong>V模型</strong></p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210517222749.png" alt="V模型"></p><p><strong>单元测试</strong></p><p>又称模块测试，着重对软件设计的最小单元——软件构件或模块进行测试。</p><p><strong>集成测试</strong></p><p>又称组装测试，经单元测试后的模块须集成为软件系统，集成测试是对集成后的软件系统进行测试，主要用来揭示设计阶段产生的错误。</p><p><strong>确认测试</strong></p><p>经集成测试后的软件需经过确认测试方能交付使用，确认测试通常采用黑盒测试。</p><p><strong>系统测试</strong></p><p>将软件与计算机系统的其他元素集成起来，检查它是否符合系统工程中对软件的要求，能否与计算机系统中的其他元素协调地工作。</p><h2 id="面向对象测试"><a href="#面向对象测试" class="headerlink" title="面向对象测试"></a>面向对象测试</h2><p>面向对象软件的性质改变了测试的策略和测试战术。</p><p><strong>面向对象测语境对测试的影响</strong></p><p>主要是封装、继承、多态性和基于消息通信这些性质带来的影响。</p><p><strong>面向对象测试策略</strong></p><p>把类看成单元</p><p><strong>面向对象测试用例设计</strong></p><h2 id="测试完成标准"><a href="#测试完成标准" class="headerlink" title="测试完成标准"></a>测试完成标准</h2><p>一种方法是观察测试过程中单位时间内发现错误数目的软件</p><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>测试的目的是发现错误，当测试发现错误后需要进行调试，确定错误的原因和位置，并加以纠正。</p><p><strong>调试过程</strong></p><p><strong>调试方法</strong></p><ul><li>蛮力法</li><li>回溯法</li><li>原因排除法</li></ul><p><strong>纠正错误</strong></p>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>查询处理</title>
      <link href="2021/04/25/%E6%95%B0%E6%8D%AE%E5%BA%93_todo(1)/%E6%9F%A5%E8%AF%A2%E5%A4%84%E7%90%86/"/>
      <url>2021/04/25/%E6%95%B0%E6%8D%AE%E5%BA%93_todo(1)/%E6%9F%A5%E8%AF%A2%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="外排序"><a href="#外排序" class="headerlink" title="外排序"></a>外排序</h2><p>排序操作是数据库中常用的操作、由于数据库中的数据量经常超过内存大小，所以需要用外部排序</p><span id="more"></span><h3 id="简单的两路Merge排序"><a href="#简单的两路Merge排序" class="headerlink" title="简单的两路Merge排序"></a><strong>简单的两路Merge排序</strong></h3><ul><li>使用三个页的内存排序</li><li>基本思想<ul><li>将大的文件转换成小的块</li><li>对这些块进行排序</li><li>使用最小空间进行Merge排序</li></ul></li><li>每个排过序的小文件为一个run</li><li>在内存中可以用各种排序算法</li></ul><p>总开销为：$2N*(\lceil log_2{N}\rceil + 1)$</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210511113138.png" alt="image-20210511113138096"></p><h3 id="外部Merge排序"><a href="#外部Merge排序" class="headerlink" title="外部Merge排序"></a><strong>外部Merge排序</strong></h3><p>若有B个page</p><ul><li>在page0一次性读入B个页的数据进行排序</li><li>在page1,2…一次性读入B个页的数据进行排序，利用B-1个Buffer页作为输入，将最后一个Buffer页作为输出的缓冲区，进行B-1路的Merge排序</li></ul><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210511113346.png" alt="image-20210511113346036"></p><h3 id="提高性能的几点考虑"><a href="#提高性能的几点考虑" class="headerlink" title="提高性能的几点考虑"></a><strong>提高性能的几点考虑</strong></h3><ul><li><p>如何减少run的次数</p></li><li><p>减少I/O代价的优化</p></li><li>双缓冲区</li></ul><h3 id="利用B-树排序"><a href="#利用B-树排序" class="headerlink" title="利用B+树排序"></a><strong>利用B+树排序</strong></h3><ul><li>聚集索引：由于磁盘上的数据已经排序，而且上层有一个索引结构，所以查询和排序操作性能均很高</li><li>非聚集索引：Data entry中的数据是排序的，但数据在磁盘上的存储层次是杂乱无章的，计算量为(f+p)*N</li></ul><h2 id="关系操作的执行"><a href="#关系操作的执行" class="headerlink" title="关系操作的执行"></a>关系操作的执行</h2><p>查询操作是查询执行的基本组成部分，包括选择、投影、连接，查询优化根据数据库的实际情况选择查询操作的执行方法</p><h3 id="查询过程简介"><a href="#查询过程简介" class="headerlink" title="查询过程简介"></a><strong>查询过程简介</strong></h3><p>影响因素：数据库表的大小、索引、排序情况、缓冲区大小和置换策略</p><p>各个操作实现时常用的基本技术：</p><ol><li>Iteration</li><li>Indexing</li><li>Partitioning</li></ol><p><strong>访问路径</strong></p><ul><li>各路从关系表中访问记录的方法</li><li>方式<ul><li>文件扫描</li><li>索引加上选择匹配条件</li></ul></li></ul><h3 id="选择操作"><a href="#选择操作" class="headerlink" title="选择操作"></a><strong>选择操作</strong></h3><ul><li>没有索引、数据不排序：需要扫描全表，选择率差，代价大</li><li>没有索引、数据排序：折半查找</li><li>B+索引：先找到约束数据所在位置，从相应的data entry开始向后逐个检测知道找到所有满足条件的data entry，根据data entry找到相应的元组</li><li>Hash索引、相等选择：先找到相应的bucket，在bucket中数据进行检测，从数据文件中找到对应的元组</li></ul><h3 id="General-Selection操作"><a href="#General-Selection操作" class="headerlink" title="General Selection操作"></a><strong>General Selection操作</strong></h3><p>一般的查询条件是一个逻辑表达式，通过逻辑连接符连接的项表达式</p><p>CNF（conjunctive normal form）</p><p><strong>不包括disjunction的选择操作的执行</strong></p><p>可以进行文件扫描，或先对选择率最高的primary conjuncts通过索引进行查询，然后利用非primary key对结果进行筛选</p><p><strong>包括disjunction的选择操作的执行</strong></p><p>如果有一个项需要对整个文件进行扫描，则需要对整个文件进行扫描</p><h3 id="投影操作"><a href="#投影操作" class="headerlink" title="投影操作"></a><strong>投影操作</strong></h3><p>主要功能：去除不需要的属性、删除重复元组</p><p><strong>基于排序的投影方法</strong></p><p>基本思路：扫描关系R，生成只包含需要属性的数据集，对数据集进行排序，扫描排好序的结果，通过前后比较去除重复元组</p><p>改进：</p><ol><li>将第一步同排序操作的pass 0结合在一起</li><li>每次做merge的时候去除重复元组</li></ol><p><strong>基于Hashing的投影方法</strong></p><p>主要思路：</p><ul><li>分区阶段</li><li>重复数据删除</li></ul><p>两种方法的比较：基于排序的方法总体性能比较好，产生的结果是排序的，特别适合内存比较小和数据分布不均匀的情况，一般排序和重复元组删除两部分是分开的；基于Hashing的方法当B&gt;$T^{1/2}$的时候两者性能相差不大。</p><h3 id="Join操作"><a href="#Join操作" class="headerlink" title="Join操作"></a><strong>Join操作</strong></h3><p>相当于一个叉乘操作加上一个选择和投影操作，所以Join操作的结果一般比叉乘操作的结果小</p><p>实现方法</p><ul><li>需要扫描整表<ul><li>嵌套循环join</li><li>块嵌套循环join</li></ul></li><li>不需要扫描整表<ul><li>Sort-merge join方法</li><li>Hash join方法</li></ul></li></ul><h3 id="集合操作"><a href="#集合操作" class="headerlink" title="集合操作"></a><strong>集合操作</strong></h3><p>$R\bigcap S，R\bigcup S，R \times S， R - S$</p><p>$R\bigcap S,R \times S$ 可以认为是特殊的join操作</p><p>$R\bigcup S,R-S$ 原理类似，均是发现两个关系中相同的元组，实现</p><ul><li>通过排序</li><li>通过Hash</li></ul><h3 id="聚集操作"><a href="#聚集操作" class="headerlink" title="聚集操作"></a><strong>聚集操作</strong></h3><p>AVG MIN MAX SUM COUNT</p><p>基本实现方法是对整个表进行扫描，对每个元组将所需要的信息收集起来</p><p>GROUP BY，需要对rating属性进行分组</p><h3 id="缓冲区的影响"><a href="#缓冲区的影响" class="headerlink" title="缓冲区的影响"></a><strong>缓冲区的影响</strong></h3><p>如果几个操作并行执行，则每个操作占用的空间将减少，如果索引是非簇聚的，则通过data entry访问物理页时，需要多次从磁盘调用数据，缓冲区将很快就被装满，需要有好的调度策略。</p><h2 id="查询优化"><a href="#查询优化" class="headerlink" title="查询优化"></a>查询优化</h2><p>每个查询均有多种实现方法，DBMS需要选出其中最好的访问方法查询优化器用于解决这个问题</p><h3 id="查询优化概述"><a href="#查询优化概述" class="headerlink" title="查询优化概述"></a><strong>查询优化概述</strong></h3><p>查询处理过程</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210511183245.png" alt="image-20210511183245435"></p><p>查询优化包括两步：</p><ol><li>列出表达式的各种执行方案（一般只列出一部分）</li><li>计算每种代价，选择代价最小的</li></ol><p>查询访问计划：由一颗扩充的关系代数树构成，在每个节点将注明对关系的访问方法和关系操作的执行方法。</p><p>Piplined Evaluation：如果一个查询操作的结果直接传入下一个操作，而不生成一个中间表，则称为Piplined的方式，标为on-the-fly，如果一个查询的结果先生成一个中间表，则称为物化的。</p><p><strong>System R的优化器</strong></p><p>第一个数据库管理系统，其查询优化器具有指导意义，主要特点为：</p><ol><li>使用数据库中数据对象的统计信息估测查询的代价</li><li>只考虑两个关系的Join，其中inner关系为原始表，用启发式方法减少可能的访问计划数量</li><li>不考虑嵌套查询的优化</li><li>投影操作中一般不进行重复元组的删除</li><li>代价模型同时考虑CPU和IO的代价</li></ol><h3 id="关系数据库关系系统中的数据字典"><a href="#关系数据库关系系统中的数据字典" class="headerlink" title="关系数据库关系系统中的数据字典"></a><strong>关系数据库关系系统中的数据字典</strong></h3><p>数据字典提供对数据库中各种对象的描述，称为System catalog，catalog或数据字典，这些数据存储在很多表中称为Catalog表</p><ul><li><p>对每个关系，系统信息包括：关系名、属性名、属性类型、索引名、约束描述</p></li><li><p>对每个索引</p></li><li>对每个视图</li><li>关系和索引的统计信息也存放在系统中</li><li>这些数据字典本身也存成为数据库表的形式</li></ul><h3 id="各种访问方法"><a href="#各种访问方法" class="headerlink" title="各种访问方法"></a><strong>各种访问方法</strong></h3><p>使用索引提高查询性能</p><p>少量查询结果的处理</p><h2 id="一个典型的关系查询优化器"><a href="#一个典型的关系查询优化器" class="headerlink" title="一个典型的关系查询优化器"></a>一个典型的关系查询优化器</h2><ul><li>一个查询被分成若干个块，每个块被翻译成一个查询代数表达式</li><li>查询代数表达式的优化包括：<ul><li>列出查询代数表达式对应的各种访问计划</li><li>对每个计划估算其执行代价，从中选出最好的访问计划</li><li>估算时要考虑每个查询操作的执行代价和操作执行结果的特性</li></ul></li></ul><h3 id="SQL查询到代数表达式的转换"><a href="#SQL查询到代数表达式的转换" class="headerlink" title="SQL查询到代数表达式的转换"></a><strong>SQL查询到代数表达式的转换</strong></h3><p>首先将查询分解为块，然后将每一块转换成查询代数，再进行后续的转换</p><p><strong>查询块</strong></p><p>定义：一个没有嵌套的查询语句，有唯一的Select、From、Where、Group和Having子句</p><p>例子：</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210511202815.png" alt="image-20210511202815536"></p><h3 id="访问计划的代价估计"><a href="#访问计划的代价估计" class="headerlink" title="访问计划的代价估计"></a><strong>访问计划的代价估计</strong></h3><p>一个查询块的访问计划的代价估算包括</p><ul><li>估算每个操作的代价，代价应该包括查询结果是Pipelining的方式输入还是用临时表的方式。这两点有较大的差距</li><li>估算每个操作产生的结果长度，是否排序，这对其父节点的实现有影响</li><li>这些估算利用的信息记录在数据库管理系统的数据字典中</li></ul><p><strong>结果大小的估算</strong></p><p>包括两个因素：返回属性的类型长度和返回元组的个数（其数目由Where带来的Reduction Factor决定）</p><h3 id="查询代数的等价变换"><a href="#查询代数的等价变换" class="headerlink" title="查询代数的等价变换"></a><strong>查询代数的等价变换</strong></h3><p>依据查询代数表达式间的等价关系进行变换，两个查询代数表达式是等价的当且仅当它们产生的结果是相同的</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210511203419.png" alt="image-20210511203418961"></p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210511203506.png" alt="image-20210511203506511"></p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210511203538.png" alt="image-20210511203538060"></p><h3 id="生成各种访问计划"><a href="#生成各种访问计划" class="headerlink" title="生成各种访问计划"></a><strong>生成各种访问计划</strong></h3><p>将利用前面提到的代数表达式对查询的代数表达式进行变换得到各种访问计划，但不是利用所有的变换，否则优化时间会过长</p><p><strong>单个关系查询</strong></p><p>关键在于索引的使用和选择、投影算法实现方法的选择</p><p><strong>多个关系的查询</strong></p><p>最主要的问题是如何在一定的时间内找到好的联接次序</p><p>两种联接树</p><p>Left-deep tree和bushy tree</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210511203917.png" alt="image-20210511203917589"></p><h3 id="嵌套子查询"><a href="#嵌套子查询" class="headerlink" title="嵌套子查询"></a><strong>嵌套子查询</strong></h3><p>实际的关系数据库管理系统中均提供了对嵌套查询的处理方法</p><h3 id="其他查询优化方法"><a href="#其他查询优化方法" class="headerlink" title="其他查询优化方法"></a><strong>其他查询优化方法</strong></h3><p>启发式的方法最大的问题是在关系比较多的情况下，搜索空间太大，为此出现了一些新的方法</p><ul><li>基于规则的方法</li><li>随机访问计划生成方法</li><li>带参数的查询优化</li><li>多查询优化</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>图书馆管理系统</title>
      <link href="2021/04/24/%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/%E5%9B%BE%E4%B9%A6%E9%A6%86%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
      <url>2021/04/24/%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/%E5%9B%BE%E4%B9%A6%E9%A6%86%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="基本情况"><a href="#基本情况" class="headerlink" title="基本情况"></a>基本情况</h2><p><code>LibraryManagementSystem</code>实现了一个网上图书馆的功能，可以对图书进行借阅以及管理。实现了管理员和用户两种权限，具体功能请参考”功能设计“。</p><span id="more"></span><h2 id="开发环境和运行"><a href="#开发环境和运行" class="headerlink" title="开发环境和运行"></a>开发环境和运行</h2><h3 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h3><p>Spring+SpringMVC+MyBatis、Bootstrap</p><h3 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h3><p>Win10、IntelliJ IDEA 2020.3.3、mysql 8.0.21、Jetty 9.4.40.v20210413</p><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><ol><li><p>运行library.sql创建本项目所需数据库</p></li><li><p>将项目导入IntelliJ IDEA中，修改<code>dp.properties</code>中的<code>password</code>以配置与本地mysql数据库的连接，配置好Jetty运行即可（或者在根目录下运行<code>mvn Jetty:run</code>）</p></li></ol><p>注：如果使用的mysql和Jetty版本不一样请在<code>pom.xml</code>中修改</p><h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><h3 id="数据表"><a href="#数据表" class="headerlink" title="数据表"></a>数据表</h3><p>一共设计了6张表：</p><ul><li><p>admin：存储管理员信息</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210430112206.png" alt="image-20210430112206620"></p></li><li><p>book_info：存储图书信息</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210430125857.png" alt="image-20210430125857278"></p></li><li><p>lend_list：存储借书信息</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210430130035.png" alt="image-20210430130035170"></p></li><li><p>reader_card：存储借书卡信息</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210430130020.png" alt="image-20210430130020162"></p></li><li><p>reader_info：存储读者信息</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210430125958.png" alt="image-20210430125958780"></p></li><li><p>class_info：存储图书类型信息</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210430125923.png" alt="image-20210430125923248"></p></li></ul><h3 id="ER图"><a href="#ER图" class="headerlink" title="ER图"></a>ER图</h3><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210430111937.jpg" alt="图书管理系统ER图"></p><h2 id="功能设计"><a href="#功能设计" class="headerlink" title="功能设计"></a>功能设计</h2><h3 id="管理员"><a href="#管理员" class="headerlink" title="管理员"></a>管理员</h3><ul><li>查看、编辑用户信息</li><li>查看、检索、编辑图书信息</li><li>查看、编辑借阅情况</li><li>修改密码</li></ul><h3 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h3><ul><li>查看个人信息</li><li>查看、检索图书信息、借阅归还图书</li><li>查看个人借阅情况</li><li>修改密码</li></ul>]]></content>
      
      
      <categories>
          
          <category> 项目记录 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第13章 红黑树</title>
      <link href="2021/04/16/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA_todo(4)/%E7%AC%AC13%E7%AB%A0-%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
      <url>2021/04/16/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA_todo(4)/%E7%AC%AC13%E7%AB%A0-%E7%BA%A2%E9%BB%91%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="红黑树的性质"><a href="#红黑树的性质" class="headerlink" title="红黑树的性质"></a>红黑树的性质</h2><p>在二叉搜索树的基础上增加一位表示结点是红色或黑色。</p><span id="more"></span><p>定义：红黑树是满足下列条件的二叉搜索树</p><ol><li>每个结点是红色或者黑色</li><li>根节点是黑色</li><li>每个叶子节点（NIL）是黑色</li><li>如果一个结点是红色，则其两个子节点是黑色</li><li>对每个结点，从该结点到其所有后代结点的简单路径上，均包含相同数目的黑色节点</li></ol><p>设置一个哨兵结点代表NIL，所有指向NIL的指针都用哨兵结点替换</p><p>黑高bh(x)：从某个结点出发到叶结点的任意一条简单路径上，黑色结点个数，红黑树的黑高定义为根节点的黑高</p><p>引理：一颗有n个内部节点的红黑树高度至多为$2\lg(n+1)$</p><h2 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h2><p>进行插入和删除操作可能会破坏红黑树的性质，需要旋转操作来维护。</p><p><img src="C:\Users\87670\AppData\Roaming\Typora\typora-user-images\image-20210421135539585.png" alt="image-20210421135539585"></p><p>右旋转和左旋转对称，时间复杂度都为$O(1)$</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210421135908.png" alt="image-20210421135908430"></p><h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><p>见文后</p><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>见文后</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法导论 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第12章 二叉搜索树</title>
      <link href="2021/04/14/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA_todo(4)/%E7%AC%AC12%E7%AB%A0-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
      <url>2021/04/14/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA_todo(4)/%E7%AC%AC12%E7%AB%A0-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是二叉搜索树"><a href="#什么是二叉搜索树" class="headerlink" title="什么是二叉搜索树"></a>什么是二叉搜索树</h2><p>中序遍历递增，执行一次中序遍历耗费的时间是O(n)</p><span id="more"></span><h2 id="查询二叉搜索树"><a href="#查询二叉搜索树" class="headerlink" title="查询二叉搜索树"></a>查询二叉搜索树</h2><p><em>查找</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">TREE-SEARCH(x,k)</span><br><span class="line"><span class="keyword">if</span> x == NIL or k == x.key</span><br><span class="line"><span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">if</span> k &lt; x.key</span><br><span class="line">    <span class="keyword">return</span> TREE-SEARCH(x.left, k)</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> TREE-SEARCH(x.right, k)</span><br></pre></td></tr></table></figure><p><em>最大关键字元素和最小关键字元素</em></p><p>见后文</p><p><em>后继和前驱</em></p><p>见后文</p><p>以上操作在高度为h的二叉树上都能在O(h)的时间内完成</p><h2 id="插入和删除"><a href="#插入和删除" class="headerlink" title="插入和删除"></a>插入和删除</h2><p><em>插入</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">TREE-INSERT(T,z)</span><br><span class="line">y &#x3D; NIL</span><br><span class="line">x &#x3D; T.root</span><br><span class="line">while x !&#x3D; NIL</span><br><span class="line">y &#x3D; x</span><br><span class="line"> if z.key &lt; x.key</span><br><span class="line"> x &#x3D; x.left</span><br><span class="line">        else x &#x3D; x.right</span><br><span class="line">    z.p &#x3D; y</span><br><span class="line">    if y &#x3D;&#x3D; NIL</span><br><span class="line">    T.root &#x3D; x &#x2F;&#x2F; 空树</span><br><span class="line">    elseif z.key &lt; y.key</span><br><span class="line">    y.left &#x3D; z</span><br><span class="line">    else y.right &#x3D; z</span><br></pre></td></tr></table></figure><p>运行时间同样为O(h)，因为这些操作都是在二叉搜索树上从上往下进行一次遍历</p><p><em>删除</em></p><p>首先定义一个子过程TRANSPLANT，用另一棵子树替换一棵子树并成为其双亲的孩子节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BST</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Node root;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BST</span><span class="params">(Node root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.root = root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TreeWalk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TreeWalk(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">TreeWalk</span><span class="params">(Node x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x != <span class="keyword">null</span>) &#123;</span><br><span class="line">            TreeWalk(x.left);</span><br><span class="line">            System.out.println(x.key);</span><br><span class="line">            TreeWalk(x.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">TreeSearch</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> TreeSearch(root, k);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">TreeSearch</span><span class="params">(Node x, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ( x == <span class="keyword">null</span> || k == x.key) &#123;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (k &lt; x.key) &#123;</span><br><span class="line">            <span class="keyword">return</span> TreeSearch(x.left, k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> TreeSearch(x.right, k);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">TreeMinimum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> TreeMinimum(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">TreeMinimum</span><span class="params">(Node x)</span> </span>&#123;</span><br><span class="line">        Node y = x;</span><br><span class="line">        <span class="keyword">while</span> (y.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">            y = y.left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">TreeMaximum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> TreeMaximum(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">TreeMaximum</span><span class="params">(Node x)</span> </span>&#123;</span><br><span class="line">        Node y = x;</span><br><span class="line">        <span class="keyword">while</span> (y.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">            y = y.right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">TreeSuccessor</span><span class="params">(Node x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> TreeMinimum(x.right);</span><br><span class="line">        &#125;</span><br><span class="line">        Node y = x.p;</span><br><span class="line">        <span class="keyword">while</span> (y != <span class="keyword">null</span> &amp;&amp; x == y.right) &#123;</span><br><span class="line">            x = y;</span><br><span class="line">            y = y.p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">TreePreDecessor</span><span class="params">(Node x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> TreeMaximum(x.left);</span><br><span class="line">        &#125;</span><br><span class="line">        Node y = x.p;</span><br><span class="line">        <span class="keyword">while</span> (y != <span class="keyword">null</span> &amp;&amp; x == y.left) &#123;</span><br><span class="line">            x = y;</span><br><span class="line">            y = y.p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TreeInsert</span><span class="params">(Node z)</span> </span>&#123;</span><br><span class="line">        Node y = <span class="keyword">null</span>;</span><br><span class="line">        Node x = root;</span><br><span class="line">        <span class="comment">// x占据的位置就是z要插入的位置</span></span><br><span class="line">        <span class="keyword">while</span> (x != <span class="keyword">null</span>) &#123;</span><br><span class="line">            y = x;</span><br><span class="line">            <span class="keyword">if</span> (z.key &lt; x.key) &#123;</span><br><span class="line">                x = x.left;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                x = x.right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        z.p = y;</span><br><span class="line">        <span class="keyword">if</span> (y == <span class="keyword">null</span>) &#123;</span><br><span class="line">            root = z;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (z.key &lt; y.key) &#123;</span><br><span class="line">            y.left = z;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            y.right = z;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除</span></span><br><span class="line">    <span class="comment">// 1.没有孩子节点直接删除，修改其父节点的孩子节点为null</span></span><br><span class="line">    <span class="comment">// 2.只有一个孩子，将孩子换到它原来的位置，并修改其父节点</span></span><br><span class="line">    <span class="comment">// 3.有两个孩子，用其后继占据其位置</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        q           q</span></span><br><span class="line"><span class="comment">        |           |</span></span><br><span class="line"><span class="comment">        z     -&gt;    r</span></span><br><span class="line"><span class="comment">       / \</span></span><br><span class="line"><span class="comment">     null r</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        q           q</span></span><br><span class="line"><span class="comment">        |           |</span></span><br><span class="line"><span class="comment">        z     -&gt;    l</span></span><br><span class="line"><span class="comment">       / \</span></span><br><span class="line"><span class="comment">      l  null</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        q           q</span></span><br><span class="line"><span class="comment">        |           |</span></span><br><span class="line"><span class="comment">        z     -&gt;    y</span></span><br><span class="line"><span class="comment">       / \         / \</span></span><br><span class="line"><span class="comment">      l   y       l   x</span></span><br><span class="line"><span class="comment">         / \</span></span><br><span class="line"><span class="comment">       null x</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        q           q               q</span></span><br><span class="line"><span class="comment">        |           |               |</span></span><br><span class="line"><span class="comment">        z     -&gt;    z    y   -&gt;     y</span></span><br><span class="line"><span class="comment">       / \         /    / \        / \</span></span><br><span class="line"><span class="comment">      l   r       l  null  r      l   r</span></span><br><span class="line"><span class="comment">         / \              / \        / \</span></span><br><span class="line"><span class="comment">        y   ...          x  ...     x  ...</span></span><br><span class="line"><span class="comment">       / \</span></span><br><span class="line"><span class="comment">    null  x</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把v换到u的位置上，同时修改u的父节点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TransPlant</span><span class="params">(Node u, Node v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (u.p == <span class="keyword">null</span>)</span><br><span class="line">            root = v;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (u == u.p.left)</span><br><span class="line">            u.p.left = v;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            u.p.right = v;</span><br><span class="line">        <span class="keyword">if</span> (v != <span class="keyword">null</span>)</span><br><span class="line">            v.p = u.p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TreeDelete</span><span class="params">(Node z)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (z.left == <span class="keyword">null</span>)</span><br><span class="line">            TransPlant(z, z.right);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (z.right == <span class="keyword">null</span>)</span><br><span class="line">            TransPlant(z, z.left);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Node y = TreeMaximum(z.right);</span><br><span class="line">            <span class="keyword">if</span> (y.p != z) &#123;</span><br><span class="line">                TransPlant(y, y.right);</span><br><span class="line">                y.right = z.right;</span><br><span class="line">                y.right.p = y;</span><br><span class="line">            &#125;</span><br><span class="line">            TransPlant(z, y);</span><br><span class="line">            y.left = z.left;</span><br><span class="line">            y.left.p = y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法导论 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>存储结构</title>
      <link href="2021/04/13/%E6%95%B0%E6%8D%AE%E5%BA%93_todo(1)/%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/"/>
      <url>2021/04/13/%E6%95%B0%E6%8D%AE%E5%BA%93_todo(1)/%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h2 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h2><h3 id="存储层次"><a href="#存储层次" class="headerlink" title="存储层次"></a>存储层次</h3><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210601141955.png" alt="物理存储层次"></p><span id="more"></span><p><strong>存储介质层次</strong></p><p>（CPU）、第一级存储器（高速缓存、内存）、第二级存储器（快闪存、磁盘存储器）、第三级存储器（光存储器、磁带存储器）</p><p>分级存储的原因：</p><ol><li>价格因素：主存是磁盘的100倍</li><li>寻址的问题：32位主存大小小于$2^{32}$</li><li>数据需要永久保存</li></ol><p><strong>磁盘</strong></p><p>基本概念</p><ul><li>硬件上的最小单位是sector，是硬件的不可变属性</li><li>Block是数据存储的最小单元，由若干sector组成</li><li>磁盘上的同心圆构成track</li><li>相同半径的同心圆构成Cylinder</li><li>存放数据的盘片为Platter</li><li>每个面有一个读头，通过磁盘臂进行移动</li><li>磁盘转动，读头不动</li></ul><p>其他概念：</p><ul><li><p>磁盘容量= 记录盘面数×每记录盘面的磁道数×每次到的盘快数×每个盘块的字节数</p></li><li><p>数据由柱面号、磁头号、盘块号定位</p></li><li><p>性能指标：容量、存取时间、传输速度、可靠性</p></li></ul><p>读写：</p><ul><li><p>一般系统不支持读头间读取数据的并行性</p></li><li><p>磁盘控制器负责实现对磁盘的基本操作，如移动读头，定位传输数据等等</p></li><li><p>Checksum用于检测数据是否正确地读写，读写时各算一遍</p></li><li><p>记录存取方式有不跨块和跨块两种</p></li></ul><p>磁盘结构对性能的影响</p><ul><li>DBMS在操作时数据在内存中</li><li>磁盘和内存间数据交换的单位是Block，一次传输为一次IO操作</li><li>为了提高速度，最好把数据放在接近的地方</li></ul><p><strong>第三级存储器</strong></p><p>光盘（CD DVD WORM）、磁带（价格便宜，存储量大，顺序读取）、胶片</p><h3 id="RAID磁盘系统"><a href="#RAID磁盘系统" class="headerlink" title="RAID磁盘系统"></a>RAID磁盘系统</h3><p>磁盘是数据库管理系统提高性能的瓶颈！</p><p><strong>磁盘阵列</strong></p><p>通过数据条带将多个磁盘变成一个整体，提高并行性和可靠性</p><p>数据条带：数据分成等长区域，分布在多个盘上，每个分区的大小为一个条带单元（提高性能）</p><p>数据冗余：通过增加数据冗余check disk提高数据可靠性，方式有海明码等</p><p><strong>RAID LEVEL</strong></p><p>RAID：将磁盘分成组，每个组有若干数据盘和一些校验盘构成，校验盘的个数由RAID Level决定</p><p>LEVEL 0：没有冗余数据、可靠性差、写性能最优，读性能不是最优、空间利用率100%</p><p>LEVEL 1：最昂贵，每个磁盘都进行一个备份，每次写两遍，同一块数据可并行读，空间利用率50%</p><p>LEVEL 1+0：以1为基础，增加数据分布条带化</p><p>LEVEL 2    LEVEL 3    LEVEL 4    LEVEL 5（性能最好）    LEVEL 6</p><p>选择</p><ul><li>0代价最小</li><li>0 + 1适合小型系统或大量写系统</li><li>3适合大规模连续读写，优于2</li><li>5各项性能均不错，优于4</li><li>6适合高可靠性系统</li></ul><h3 id="磁盘空间管理"><a href="#磁盘空间管理" class="headerlink" title="磁盘空间管理"></a>磁盘空间管理</h3><p>基本情况：</p><ul><li><p>DBMS结构最底层</p></li><li><p>以页为单位组织数据，主要操作包括读、写、申请、释放</p></li><li><p>经常访问的数据可放在连续空间中</p></li><li><p>隔离上层模块和底层的软、硬平台</p></li></ul><p>管理空闲块：空间块链表或空闲块位图</p><p>实现：操作系统文件系统管理或者自己实现</p><h3 id="缓冲区管理"><a href="#缓冲区管理" class="headerlink" title="缓冲区管理"></a>缓冲区管理</h3><p><strong>缓冲区管理器</strong>：</p><p>负责将磁盘上的数据读入内存并写回磁盘的软件层</p><ul><li>管理的内存空间叫Buffer Pool</li><li>每个页叫Frame，有替换策略</li></ul><p>Frame数据结构：</p><ul><li>pin_count：正在访问该frame的事务个数</li><li>dirty：已经被修改过的frame</li></ul><p>请求处理的流程：</p><ol><li>查看Buffer Pool是否包含此页，如果没有则<ol><li>找到一个pin_count为0的frame，pin_count++</li><li>将dirty写为true，写入磁盘</li><li>相应的页读入此frame</li></ol></li><li>将frame地址返回</li></ol><p>替换策略：LRU、Clock</p><p>BufferPool和virtual memory的区别在于Buffer Pool能够发现页访问模式</p><h3 id="文件和索引"><a href="#文件和索引" class="headerlink" title="文件和索引"></a>文件和索引</h3><p>每个页有若干记录，每个文件有若干页，每个记录有唯一标识符rid，包括页号和在页中的位置，不同的数据管理系统的rid的定义略有不同。</p><p>堆文件：数据在文件中以记录为单位无序存储，提供创建、删除文件、插入、删除记录，用页的链表或页字典维护文件空闲区域位置。</p><p>顺序文件：根据查找键的值的顺序存储记录的文件，每个记录有一个指针，按键值大小创建链表，通过自由空间管理，管理空闲空间。</p><p>聚集文件：一个文件中存储多个关系中的元组，根据键属性进行数据组织</p><p><strong>代价模型</strong></p><p>用于估算不同的查询操作的代价</p><p>基本符号有：</p><ol><li>B：数据库中数据页的数量</li><li>R：每页中记录的个数</li><li>D：读写一页的时间</li><li>C：处理一条记录的时间</li><li>H：对一条记录执行Hash函数的时间</li></ol><p><strong>三种文件组织方式</strong></p><p>堆文件、排序文件、Hash文件（后两者有Search Key）</p><p>基本操作的代价</p><div class="table-container"><table><thead><tr><th>操作</th><th>Scan</th><th>Search with equality selection</th><th>Search with range selection</th><th>Insert</th><th>Delete</th></tr></thead><tbody><tr><td>堆文件</td><td>B(D+RC)</td><td>若实现知道只有一个结果为Scan的一半，否则同Scan</td><td>同Scan</td><td>2D+C</td><td>D+C（数据已在内存中，可通过rid中的page id访问）</td></tr><tr><td>排序文件</td><td>B(D+RC)</td><td>$Dlog_2B+Clog_2R$</td><td>同上</td><td>B(D+RC)</td><td>B(D+RC)</td></tr><tr><td>Hashed的文件</td><td>1.25B(D+RC)</td><td>H+D+0.5RC</td><td>同Scan</td><td>2D</td><td>C+D</td></tr></tbody></table></div><h3 id="页格式"><a href="#页格式" class="headerlink" title="页格式"></a>页格式</h3><p>页由一系列记录构成，每个记录为一个Slot，记录的id为(page id,slot number)</p><h3 id="记录格式"><a href="#记录格式" class="headerlink" title="记录格式"></a>记录格式</h3><p><strong>定长记录</strong>：</p><p>每条记录的长度是固定的，一个页存放记录的数量和位置也是确定的</p><p>删除：</p><ol><li>（Packed）每次删除记录就将该页的最后一条记录移到被删除的位置，所有空闲空间均在页的下部，但rid会不断调整</li><li>（Unpacked）每次删除了记录不做移动，所有空闲空间的信息记录在页的尾部</li></ol><p><strong>变长记录</strong>：</p><p>记录中包含变长字段，记录长度可变，无法分配定长的slot，为了避免大量的零碎空间，每次删除后需要对页上的空间进行调整。但要保证rid不变。</p><p>对一个列的修改需要移动其他列的位置。</p><h2 id="文件组织和索引"><a href="#文件组织和索引" class="headerlink" title="文件组织和索引"></a>文件组织和索引</h2><p>文件组织是当前文件存储在磁盘上时在文件中组织记录的方法，索引是查询操作的性能的工具。</p><h3 id="索引简介"><a href="#索引简介" class="headerlink" title="索引简介"></a>索引简介</h3><p>索引是加速查询操作的辅助文件结构，包括树形索引和Hash索引，一个索引可认为是一个data entry的集合， 通过它可快速地找到相应的记录所在的位置</p><p>考虑的问题</p><ol><li>为了方便查询如何组织data entry</li><li>data entry的构成</li><li>如何适应存储介质的特点</li></ol><p>三种data entry</p><ul><li>k*：包含整个记录</li><li><k, rid>search key为k的记录</li><li><k, rid-list>search key为k的记录集合</li></ul><h3 id="索引特性"><a href="#索引特性" class="headerlink" title="索引特性"></a>索引特性</h3><p><strong>聚集索引和非聚集索引</strong></p><p>如果文件中记录顺序同索引中data entry顺序相同，则这个索引是Clustered（聚集/聚簇）的，否则非聚集，k*是聚集的，后两种只有记录的顺序用索引对应的属性排序时，才是聚集的。</p><p>聚集索引：</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210601151926.png" alt="image-20210601151926761"></p><p>非聚集索引：</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210601152010.png" alt="image-20210601152010138"></p><p><strong>密集索引和稀疏索引</strong></p><p>如果表在该属性上出现的所有值在索引文件中至少有一个data entry与之相对应则为dense（密集）索引，sparse（稀疏）索引每个页只有一个data entry，稀疏索引一定是聚集索引。</p><p>如图：</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210601152336.png" alt="image-20210601152335773"></p><p><strong>pirmary and secondary indexes</strong></p><p>索引建在包含primary key的属性上则为primary key，其它的为secondary index</p><p><strong>composite search key索引</strong></p><p>包含多个属性的索引是composite search key索引</p><h2 id="树结构索引"><a href="#树结构索引" class="headerlink" title="树结构索引"></a>树结构索引</h2><h3 id="索引序列访问方法（ISAM）"><a href="#索引序列访问方法（ISAM）" class="headerlink" title="索引序列访问方法（ISAM）"></a>索引序列访问方法（ISAM）</h3><p>一种静态索引结构，适用于数据库变化不大的情况</p><p><strong>ISAM</strong></p><p>对每一层二级文件均建立相应二级文件结构</p><p>构造方法：</p><ul><li>在最底层使用溢出链表</li><li>索引中一结点的大小同一个物理页的大小相同</li><li>关系中所有数据均存放在叶子结点</li><li>也可以在实际数据上层增加一个第二种类型的data entry</li><li>树结构静态，只有叶结点中溢出结点会变化</li></ul><p>如图：</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210511110725.png" alt="image-20210511110724884"></p><p>操作</p><ul><li>搜索：从树的根节点开始，每次找下层的结点，知道找到结果，取出所有结果，复杂度$\log_F{N}$，F是每个结点中data entry数量，N为关系中记录数</li><li>插入：找到相应位置，插入数据，如果页满了，则增加溢出页</li><li>删除：找到相应位置，删除数据，如果溢出页空了，则删除溢出页</li></ul><h3 id="B-树：一种动态索引结构"><a href="#B-树：一种动态索引结构" class="headerlink" title="B+树：一种动态索引结构"></a>B+树：一种动态索引结构</h3><p>静态方法缺点在于插入删除过多时造成溢出链过长，影响效率，也不支持连续存放</p><p>B+树一种动态结构，适用于各种情况</p><p><strong>M阶B+树</strong></p><ul><li>每个结点之多有m棵子树，至少有[m/2]棵子树</li><li>根节点或为叶结点，或至少有两个子树</li><li>在insert、delete操作中树保持平衡</li><li>搜索时只需要访问树的高层次</li><li>所有叶结点在同一层次，data entry层用双向链表连接，便于访问</li></ul><p>B+树结构：</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210511111010.png" alt="image-20210511111009926"></p><p>B+树索引结点的结构：</p><ol><li>每个结点由n个数值和n+1个指针构成</li><li>pi指向子树上的结点的值k，有ki&lt;=k&lt;=ki+1</li><li>通常用第二种或第三种data entry</li><li>data entry本身可以看成为是记录的文件，如果data entry包含整个记录，则文件就是数据本身，否则是一个单独的文件</li></ol><p><strong>操作</strong></p><ul><li>搜索</li><li>插入<ol><li>首先从根节点出发向下，找到插入数据所在位置</li><li>将数据插入到相应位置</li><li>当结点满时，进行分解操作</li><li>逐层向上分解直到不需要分解的时候</li><li>当结点满时另一种方案是：当该结点的兄弟节点不满时，也可以重新分配，以减少分解的数量</li></ol></li><li>删除<ol><li>首先从根节点出发向下，找到删除数据所在位置</li><li>将数据相应的位置删除</li><li>当结点过空的时候，进行合并操作</li><li>逐层向上合并直到不需要合并的时候</li><li>当该结点的兄弟节点不空时，可以考虑重新分配，以减少合并的数量</li></ol></li></ul><p>如果有重复数据</p><ul><li>若采用第二种data entry，修改相应的查询算法，找到最右边的同值记录</li><li>若采用第三种data entry，是一种比较直接的处理方法，但重复数据较多的时候，要考虑修改相应的查询和修改算法</li></ul><h2 id="基于Hash的索引结构"><a href="#基于Hash的索引结构" class="headerlink" title="基于Hash的索引结构"></a>基于Hash的索引结构</h2><p>基于Hash的索引结构适用于相等查询操作，基本想法是将数据映射成一个bucket，bucket对应相应数据的存储位置，有各种不同的基于Hash的索引结构，不适合区间查询。</p><h3 id="静态Hash"><a href="#静态Hash" class="headerlink" title="静态Hash"></a>静态Hash</h3><p>包含数据的页构成一系列的bucket，每个bucket由一个primary bucket page和一串overflow page构成，overflow page中的数据可以进行排序</p><p>查询过程首先对查询数据进行Hash函数运算，找到对应的primary page，然后在primary page和overflow page中找到相应的记录</p><p>主要问题在于primary bucket page不变，数据增加overflow page会越来越长，数据减少会浪费空间</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210511111855.png" alt="image-20210511111855580"></p><h3 id="可扩充的Hash"><a href="#可扩充的Hash" class="headerlink" title="可扩充的Hash"></a>可扩充的Hash</h3><p>通过一个directory来记录每个bucket所处的位置，随着数据的增加，bucket将分解，而不是增加overflow页，随着bucket的分解，相应的directory会增长；利用Hash函数结果最后若干位作为确定bucket的依据，在directory和bucket上分别标有global depth和local depth作为判断的长度。</p><h3 id="线性Hash"><a href="#线性Hash" class="headerlink" title="线性Hash"></a>线性Hash</h3><p>一种动态Hashing，由一个bucket序列构成，每个bucket还附带一串overflow page；克服可扩充Hashing在数据倾斜情况下过于频繁的特点，没有directory，每次只对一个bucket进行分解，激发分解的条件是数据库中有一个bucket进行了分解或增加了新的bucket page。</p><h3 id="可扩充Hash和线性Hash的比较"><a href="#可扩充Hash和线性Hash的比较" class="headerlink" title="可扩充Hash和线性Hash的比较"></a>可扩充Hash和线性Hash的比较</h3><ul><li>两者都依赖于Hash函数的好坏</li><li>当Hash函数比较均衡的时候，两者相差不大，线性Hash少了一次读取directory的时间</li><li>不均衡时<ul><li>线性的primary bucket增长较慢，由于overflow串较长，所以查询性能较差，但空间少；</li><li>可扩展的Hashing的primary bucket增长较快，由于overflow串较短，所以查询性能好，但占用空间大，如果采用NULL指针，有可能减少空间。</li></ul></li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>多建索引、分区散列技术、R_树，K-D树</p><p>索引结构构建的主要思路：结合用户查询和数据的分布，结合存储结构的层次，分析数据的语义层次，尽快实现搜索空间的裁剪。</p><p>图数据索引、时间序列索引</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>高并发秒杀系统</title>
      <link href="2021/04/12/%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F/"/>
      <url>2021/04/12/%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<p>参考自：<a href="https://github.com/codingXiaxw/seckill">https://github.com/codingXiaxw/seckill</a></p><h3 id="1-业务流程描述"><a href="#1-业务流程描述" class="headerlink" title="1. 业务流程描述"></a>1. 业务流程描述</h3><p><strong>用户成功秒杀商品，系统需要做的事：</strong></p><p>1、减库存；</p><p>2、记录用户的购买明细。（1.谁购买成功了。2.购买成功的时间/有效期。3.付款/发货信息）<br><span id="more"></span></p><p><strong>为什么我们的系统需要事务:</strong></p><p>1.用户成功秒杀商品我们记录了其购买明细却没有减库存，导致超卖。</p><p>2.减了库存却没有记录用户的购买明细，导致少卖。</p><p><strong>如何在保证事务的情况下，实现高并发？</strong></p><h3 id="2-环境搭建"><a href="#2-环境搭建" class="headerlink" title="2.环境搭建"></a>2.环境搭建</h3><h4 id="2-1-添加依赖"><a href="#2-1-添加依赖" class="headerlink" title="2.1 添加依赖"></a>2.1 添加依赖</h4><p>单元测试、日志、数据库相关依赖、servlet web相关、mybatis、Spring核心依赖、Spring-dao、spring-web依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--单元测试--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--日志--&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--实现slf4j接口整合--&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!--数据库连接池--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--数据库驱动--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--servlet web相关依赖--&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>standard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0-alpha-1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!--SSM框架--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!--spring 依赖--&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--spring核心依赖--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!--spring-dao依赖--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!--spring web依赖--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--spring test依赖--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-Dao层"><a href="#3-Dao层" class="headerlink" title="3. Dao层"></a>3. Dao层</h3><h4 id="3-1-创建数据库和表"><a href="#3-1-创建数据库和表" class="headerlink" title="3.1 创建数据库和表"></a>3.1 创建数据库和表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database seckill;</span><br><span class="line"></span><br><span class="line">use seckill;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> `seckill`(</span><br><span class="line">`seckill_id` <span class="type">bigint</span> <span class="keyword">not</span> <span class="keyword">null</span> auto_increment comment <span class="string">&#x27;商品库存ID&#x27;</span>,</span><br><span class="line">`name` <span class="type">varchar</span>(<span class="number">120</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;商品名称&#x27;</span>,</span><br><span class="line">`number` <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;库存数量&#x27;</span>,</span><br><span class="line">`start_time` <span class="type">timestamp</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;秒杀开始时间&#x27;</span>,</span><br><span class="line">`end_time` <span class="type">timestamp</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;秒杀结束时间&#x27;</span>,</span><br><span class="line">`create_time` <span class="type">timestamp</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="built_in">current_timestamp</span> comment <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line"><span class="keyword">primary</span> key (seckill_id),</span><br><span class="line">key idx_start_time(start_time),</span><br><span class="line">key idx_end_time(end_time),</span><br><span class="line">key idx_create_time(create_time)</span><br><span class="line">)engine<span class="operator">=</span>innodb auto_increment<span class="operator">=</span><span class="number">1000</span> <span class="keyword">default</span> charset<span class="operator">=</span>utf8 comment<span class="operator">=</span><span class="string">&#x27;秒杀库存表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> seckill(name,number,start_time,end_time)</span><br><span class="line"><span class="keyword">values</span></span><br><span class="line">(<span class="string">&#x27;1000元秒杀iphone12&#x27;</span>, <span class="number">100</span>, <span class="string">&#x27;2020-10-30 00:00:00&#x27;</span>,<span class="string">&#x27;2020-10-31 00:00:00&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;800元秒杀ipad pro&#x27;</span>, <span class="number">200</span>, <span class="string">&#x27;2020-10-30 00:00:00&#x27;</span>,<span class="string">&#x27;2020-10-31 00:00:00&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;6600元秒杀iMac&#x27;</span>, <span class="number">100</span>, <span class="string">&#x27;2020-10-30 00:00:00&#x27;</span>,<span class="string">&#x27;2020-10-31 00:00:00&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;7000元秒杀macbook pro&#x27;</span>, <span class="number">100</span>, <span class="string">&#x27;2020-10-30 00:00:00&#x27;</span>,<span class="string">&#x27;2020-10-31 00:00:00&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">--秒杀成功明细表</span></span><br><span class="line"><span class="comment">--用户登录认证相关信息：简化为手机号</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> success_killed(</span><br><span class="line">`seckill_id` <span class="type">bigint</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;秒杀商品ID&#x27;</span>,</span><br><span class="line">`user_phone` <span class="type">bigint</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;用户手机号&#x27;</span>,</span><br><span class="line">`state` tinyint <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="number">-1</span> comment <span class="string">&#x27;状态标识：-1:无效 0:成功 1:已付款 2:已发货&#x27;</span>,</span><br><span class="line">`create_time` <span class="type">timestamp</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="built_in">current_timestamp</span> comment <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line"><span class="keyword">primary</span> key(seckill_id, user_phone),<span class="comment">/*联合主键？*/</span></span><br><span class="line">key idx_create_time(create_time)</span><br><span class="line">)engine<span class="operator">=</span>innodb <span class="keyword">default</span> charset<span class="operator">=</span>utf8 comment<span class="operator">=</span><span class="string">&#x27;秒杀成功明细表&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="3-2-创建实体类"><a href="#3-2-创建实体类" class="headerlink" title="3.2 创建实体类"></a>3.2 创建实体类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Seckill</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> seckill_id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number;</span><br><span class="line">    <span class="keyword">private</span> Date start_time;</span><br><span class="line">    <span class="keyword">private</span> Date end_time;</span><br><span class="line">    <span class="keyword">private</span> Date create_time;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Seckill</span><span class="params">(<span class="keyword">long</span> seckill_id, String name, <span class="keyword">int</span> number, Date start_time, Date end_time, Date create_time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.seckill_id = seckill_id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.number = number;</span><br><span class="line">        <span class="keyword">this</span>.start_time = start_time;</span><br><span class="line">        <span class="keyword">this</span>.end_time = end_time;</span><br><span class="line">        <span class="keyword">this</span>.create_time = create_time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Seckill</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Seckill&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;seckill_id=&quot;</span> + seckill_id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, number=&quot;</span> + number +</span><br><span class="line">                <span class="string">&quot;, start_time=&quot;</span> + start_time +</span><br><span class="line">                <span class="string">&quot;, end_time=&quot;</span> + end_time +</span><br><span class="line">                <span class="string">&quot;, create_time=&quot;</span> + create_time +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getSeckill_id</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seckill_id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSeckill_id</span><span class="params">(<span class="keyword">long</span> seckill_id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.seckill_id = seckill_id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNumber</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.number = number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getStart_time</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> start_time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStart_time</span><span class="params">(Date start_time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.start_time = start_time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getEnd_time</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> end_time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEnd_time</span><span class="params">(Date end_time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.end_time = end_time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getCreate_time</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> create_time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCreate_time</span><span class="params">(Date create_time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.create_time = create_time;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuccessKilled</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> seckill_id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> user_phone;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">short</span> state;</span><br><span class="line">    <span class="keyword">private</span> Date create_time;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SuccessKilled</span><span class="params">(<span class="keyword">long</span> seckill_id, <span class="keyword">long</span> user_phone, <span class="keyword">short</span> state, Date create_time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.seckill_id = seckill_id;</span><br><span class="line">        <span class="keyword">this</span>.user_phone = user_phone;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">        <span class="keyword">this</span>.create_time = create_time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SuccessKilled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;SuccessKilled&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;seckill_id=&quot;</span> + seckill_id +</span><br><span class="line">                <span class="string">&quot;, user_phone=&quot;</span> + user_phone +</span><br><span class="line">                <span class="string">&quot;, state=&quot;</span> + state +</span><br><span class="line">                <span class="string">&quot;, create_time=&quot;</span> + create_time +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getSeckill_id</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seckill_id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSeckill_id</span><span class="params">(<span class="keyword">long</span> seckill_id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.seckill_id = seckill_id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getUser_phone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user_phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser_phone</span><span class="params">(<span class="keyword">long</span> user_phone)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.user_phone = user_phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">short</span> <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(<span class="keyword">short</span> state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getCreate_time</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> create_time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCreate_time</span><span class="params">(Date create_time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.create_time = create_time;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-3-创建dao接口"><a href="#3-3-创建dao接口" class="headerlink" title="3.3 创建dao接口"></a>3.3 创建dao接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SeckillMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 减库存的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> seckill_id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> kill_time</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  表示更新库存的记录行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reduceNumber</span><span class="params">(<span class="meta">@Param(&quot;seckillId&quot;)</span> <span class="keyword">long</span> seckill_id,<span class="meta">@Param(&quot;killTime&quot;)</span> Date kill_time)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询秒杀的商品信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> seckill_id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Seckill <span class="title">queryById</span><span class="params">(<span class="meta">@Param(&quot;seckillId&quot;)</span> <span class="keyword">long</span> seckill_id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据偏移量查询秒杀商品列表（什么偏移量？）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> off</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> limit</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Seckill&gt; <span class="title">queryAll</span><span class="params">(<span class="meta">@Param(&quot;offset&quot;)</span> <span class="keyword">int</span> off,<span class="meta">@Param(&quot;limit&quot;)</span> <span class="keyword">int</span> limit)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.yucaihuang.pojo.SuccessKilled;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SuccessKilledMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入购买明细，可过滤重复</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> seckill_id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user_phone</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  插入的行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insertSuccessKilled</span><span class="params">(<span class="meta">@Param(&quot;seckillId&quot;)</span> <span class="keyword">long</span> seckill_id,<span class="meta">@Param(&quot;userPhone&quot;)</span> <span class="keyword">long</span> user_phone)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">SuccessKilled <span class="title">queryByIdWithSeckill</span><span class="params">(<span class="meta">@Param(&quot;seckillId&quot;)</span> <span class="keyword">long</span> seckill_id,<span class="meta">@Param(&quot;userPhone&quot;)</span> <span class="keyword">long</span> user_phone)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-4-动态代理实现dao接口"><a href="#3-4-动态代理实现dao接口" class="headerlink" title="3.4 动态代理实现dao接口"></a>3.4 动态代理实现dao接口</h4><p>mybatis全局配置文件<code>mybatis-config.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置全局属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--使用jdbc的getGenerateKeys获取自增主键值--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useGenerateKeys&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--使用列别名替换列名</span></span><br><span class="line"><span class="comment">        开启后mybatis会自动帮我们把表中name的值赋到对应的实体的title属性中</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useColumnLabel&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.yucaihuang.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.yucaihuang.dao.SeckillMapper&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.yucaihuang.dao.SuccessKilledMapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>映射配置，必须与接口同名，但是这个Mapper文件存放的位置有两种形式：</p><ul><li><p>XxxMapper.xml和XxxMapper.java接口文件放在同个包下，即都放在<code>com.yucaihuang.dao</code>下：</p><p><img src="https://hyc-pic.oss-cn-hangzhou.aliyuncs.com/image-20201031150351335.png" alt="image-20201031150351335"></p><p>那么需要在pom.xml下加入以下配置，处理静态资源：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在mybatis-config.xml主配置文件中配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.yucaihuang.dao.SeckillMapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.yucaihuang.dao.SuccessKilledMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或者在后面的spring-dao.xml配置文件中配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--绑定mybatis配置文件，交给Spring管理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:Mapper/*.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>或者直接在resources目录下存放XxxMapper.xml文件：</p><p>然后在mybatis-config.xml主配置文件中配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;Mapper/SeckillMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;Mapper/SuccessKilledMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或者在后面的spring-dao.xml配置文件中配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--绑定mybatis配置文件，交给Spring管理--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:Mapper/*.xml&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p><code>SeckillMapper.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.yucaihuang.dao.SeckillMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;reduceNumber&quot;</span>&gt;</span></span><br><span class="line">        update seckill.seckill</span><br><span class="line">        set number = number-1</span><br><span class="line">        where seckill_id=#&#123;seckillId&#125;</span><br><span class="line">        and start_time &lt;![CDATA[ &lt;= ]]&gt; #&#123;killTime&#125;</span><br><span class="line">        and end_time &gt;= #&#123;killTime&#125;</span><br><span class="line">        and number &gt; 0;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Seckill&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;long&quot;</span>&gt;</span></span><br><span class="line">        select * from seckill.seckill</span><br><span class="line">        where seckill_id=#&#123;seckillId&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Seckill&quot;</span>&gt;</span></span><br><span class="line">        select * from seckill.seckill</span><br><span class="line">        order by create_time desc</span><br><span class="line">        limit #&#123;offset&#125;,#&#123;limit&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>SuccessKilledMapper.xml</code>:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="line">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;mapper namespace=<span class="string">&quot;com.yucaihuang.dao.SuccessKilledMapper&quot;</span>&gt;</span><br><span class="line">    &lt;insert id=<span class="string">&quot;insertSuccessKilled&quot;</span> parameterType=<span class="string">&quot;long&quot;</span>&gt;</span><br><span class="line">        &lt;!--当出现主键冲突时（即重复秒杀时），会报错；不想让程序报错，就加入ignore???--&gt;</span><br><span class="line">        insert ignore into seckill.success_killed(seckill_id, user_phone,state)</span><br><span class="line">        values (#&#123;seckillId&#125;,#&#123;userPhone&#125;,0);</span><br><span class="line">    &lt;/insert&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=<span class="string">&quot;queryByIdWithSeckill&quot;</span> resultType=<span class="string">&quot;SuccessKilled&quot;</span>&gt;</span><br><span class="line">        select</span><br><span class="line">        sk.seckill_id,</span><br><span class="line">        sk.user_phone,</span><br><span class="line">        sk.create_time,</span><br><span class="line">        sk.state,</span><br><span class="line">        s.seckill_id <span class="string">&quot;seckill.seckill_id&quot;</span>,</span><br><span class="line">        s.name <span class="string">&quot;seckill.name&quot;</span>,</span><br><span class="line">        s.number <span class="string">&quot;seckill&quot;</span>,</span><br><span class="line">        s.start_time <span class="string">&quot;seckill.start_time&quot;</span>,</span><br><span class="line">        s.end_time <span class="string">&quot;seckill.end_time&quot;</span>,</span><br><span class="line">        s.create_time <span class="string">&quot;seckill.create_time&quot;</span></span><br><span class="line">        from seckill.success_killed sk</span><br><span class="line">        inner join seckill.seckill s on sk.seckill_id=s.seckill_id</span><br><span class="line">        where sk.seckill_id=#&#123;seckillId&#125;</span><br><span class="line">        and sk.user_phone=#&#123;userPhone&#125;;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><h4 id="3-5-整合spring和mybatis"><a href="#3-5-整合spring和mybatis" class="headerlink" title="3.5 整合spring和mybatis"></a>3.5 整合spring和mybatis</h4><p>编写<code>spring-dao.xml</code>，让Spring管理数据库连接池和dao接口的动态注入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--关联数据库配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--c3p0私有属性--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;30&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--关闭连接后不自动commit--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;autoCommitOnClose&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--获取连接超时时间--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;checkoutTimeout&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1000&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--当获取连接失败重试次数--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;acquireRetryAttempts&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--绑定mybatis配置文件，交给Spring管理--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;typeAliasesPackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.yucaihuang.pojo&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:Mapper/*.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--实现dao接口动态注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.yucaihuang.dao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-6-dao层测试"><a href="#3-6-dao层测试" class="headerlink" title="3.6 dao层测试"></a>3.6 dao层测试</h4><p>测试SeckillMapper.java接口方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * junt整合spring</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="comment">//告诉junit spring的配置文件</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:spring-dao.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeckillMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> SeckillMapper seckillMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reduceNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = seckillMapper.reduceNumber(<span class="number">1001</span>, <span class="keyword">new</span> Date());</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> seckillId = <span class="number">1001</span>;</span><br><span class="line">        Seckill seckill = seckillMapper.queryById(seckillId);</span><br><span class="line">        System.out.println(seckill);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Seckill&gt; seckills = seckillMapper.queryAll(<span class="number">0</span>, <span class="number">100</span>);</span><br><span class="line">        <span class="keyword">for</span> (Seckill seckill : seckills) &#123;</span><br><span class="line">            System.out.println(seckill);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三个方法均测试通过。</p><p>测试SuccessKilledMapper.java接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:spring-dao.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuccessKilledMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SuccessKilledMapper successKilledMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertSuccessKilled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        successKilledMapper.insertSuccessKilled(<span class="number">1001</span>,<span class="number">12855555</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryByIdWithSeckill</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SuccessKilled successKilled = successKilledMapper.queryByIdWithSeckill(<span class="number">1001</span>, <span class="number">12855555</span>);</span><br><span class="line">        System.out.println(successKilled);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个方法均测试通过。</p><h3 id="4-Service层"><a href="#4-Service层" class="headerlink" title="4. Service层"></a>4. Service层</h3><h4 id="4-1-创建业务层接口"><a href="#4-1-创建业务层接口" class="headerlink" title="4.1 创建业务层接口"></a>4.1 创建业务层接口</h4><p>编写业务层接口，有两个重要的方法：1、暴露秒杀接口的地址。2、处理秒杀</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 业务层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SeckillService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询全部的秒杀记录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Seckill&gt; <span class="title">getSeckillList</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按ID查询秒杀记录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Seckill <span class="title">getSeckillById</span><span class="params">(<span class="keyword">long</span> seckillId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//往下是我们最重要的行为的一些接口</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在秒杀开启时输出秒杀接口的地址，否则输出系统时间和秒杀时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> seckillId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Exposer <span class="title">exportSeckillUrl</span><span class="params">(<span class="keyword">long</span> seckillId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行秒杀操作，有可能失败，有可能成功，所以要抛出我们允许的异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> seckillId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userPhone</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> md5</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SeckillException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> RepeatKillException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SeckillCloseException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">SeckillExecution <span class="title">executeSeckill</span><span class="params">(<span class="keyword">long</span> seckillId, <span class="keyword">long</span> userPhone, String md5)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> SeckillException, RepeatKillException, SeckillCloseException</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-2-dto封装类"><a href="#4-2-dto封装类" class="headerlink" title="4.2 dto封装类"></a>4.2 dto封装类</h4><p>建立一个包dto，用于封装业务层给web传输的数据，其中包括上面两个重要方法的返回值封装：<code>Exposer</code>和<code>SeckillExecution</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 暴露秒杀地址(接口)DTO</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exposer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否开启秒杀</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> exposed;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对秒杀地址加密的措施</span></span><br><span class="line">    <span class="keyword">private</span> String md5;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//id为seckillId的商品的秒杀地址</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> seckillId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//系统当前时间（毫秒）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> now_time;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//秒杀的开启时间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> start_time;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//秒杀的结束时间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> end_time;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Exposer</span><span class="params">(<span class="keyword">boolean</span> exposed, String md5, <span class="keyword">long</span> seckillId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.exposed = exposed;</span><br><span class="line">        <span class="keyword">this</span>.md5 = md5;</span><br><span class="line">        <span class="keyword">this</span>.seckillId = seckillId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Exposer</span><span class="params">(<span class="keyword">boolean</span> exposed, <span class="keyword">long</span> seckillId, <span class="keyword">long</span> now_time, <span class="keyword">long</span> start_time, <span class="keyword">long</span> end_time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.exposed = exposed;</span><br><span class="line">        <span class="keyword">this</span>.seckillId = seckillId;</span><br><span class="line">        <span class="keyword">this</span>.now_time = now_time;</span><br><span class="line">        <span class="keyword">this</span>.start_time = start_time;</span><br><span class="line">        <span class="keyword">this</span>.end_time = end_time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Exposer</span><span class="params">(<span class="keyword">boolean</span> exposed, <span class="keyword">long</span> seckillId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.exposed = exposed;</span><br><span class="line">        <span class="keyword">this</span>.seckillId = seckillId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isExposed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> exposed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setExposed</span><span class="params">(<span class="keyword">boolean</span> exposed)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.exposed = exposed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMd5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> md5;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMd5</span><span class="params">(String md5)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.md5 = md5;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getSeckillId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seckillId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSeckillId</span><span class="params">(<span class="keyword">long</span> seckillId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.seckillId = seckillId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getNow_time</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> now_time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNow_time</span><span class="params">(<span class="keyword">long</span> now_time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.now_time = now_time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getStart_time</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> start_time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStart_time</span><span class="params">(<span class="keyword">long</span> start_time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.start_time = start_time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getEnd_time</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> end_time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEnd_time</span><span class="params">(<span class="keyword">long</span> end_time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.end_time = end_time;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 封装执行秒杀后的结果：是否秒杀成功</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeckillExecution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> seckillId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//秒杀执行结果的状态</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> state;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//状态的明文标识</span></span><br><span class="line">    <span class="keyword">private</span> String stateInfo;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当秒杀成功时，需要传递秒杀成功的对象回去</span></span><br><span class="line">    <span class="keyword">private</span> SuccessKilled successKilled;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 秒杀成功返回所有信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> seckillId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> seckillStatEnum</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stateInfo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> successKilled</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SeckillExecution</span><span class="params">(<span class="keyword">long</span> seckillId, SeckillStatEnum seckillStatEnum, String stateInfo, SuccessKilled successKilled)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.seckillId = seckillId;</span><br><span class="line">        <span class="keyword">this</span>.state = seckillStatEnum.getState();</span><br><span class="line">        <span class="keyword">this</span>.stateInfo = stateInfo;</span><br><span class="line">        <span class="keyword">this</span>.successKilled = successKilled;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 秒杀失败</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> seckillId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> seckillStatEnum</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stateInfo</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SeckillExecution</span><span class="params">(<span class="keyword">long</span> seckillId, SeckillStatEnum seckillStatEnum, String stateInfo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.seckillId = seckillId;</span><br><span class="line">        <span class="keyword">this</span>.state = seckillStatEnum.getState();</span><br><span class="line">        <span class="keyword">this</span>.stateInfo = stateInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getSeckillId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seckillId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSeckillId</span><span class="params">(<span class="keyword">long</span> seckillId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.seckillId = seckillId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStateInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stateInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStateInfo</span><span class="params">(String stateInfo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.stateInfo = stateInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SuccessKilled <span class="title">getSuccessKilled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> successKilled;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSuccessKilled</span><span class="params">(SuccessKilled successKilled)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.successKilled = successKilled;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-异常处理类"><a href="#4-3-异常处理类" class="headerlink" title="4.3 异常处理类"></a>4.3 异常处理类</h4><p>创建一个exception包，用于处理异常，主要有两个异常：1、重复秒杀异常；2、秒杀结束异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeckillException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SeckillException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SeckillException</span><span class="params">(String message, Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 重复秒杀异常，是一个运行时异常，不需要我们手动try catch</span></span><br><span class="line"><span class="comment"> * mysql只支持运行时异常的回滚操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RepeatKillException</span> <span class="keyword">extends</span> <span class="title">SeckillException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RepeatKillException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RepeatKillException</span><span class="params">(String message, Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 秒杀关闭异常，当秒杀结束时，用户还要进行秒杀，就会出现这个异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeckillCloseException</span> <span class="keyword">extends</span> <span class="title">SeckillException</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SeckillCloseException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SeckillCloseException</span><span class="params">(String message, Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-4-业务层接口的实现"><a href="#4-4-业务层接口的实现" class="headerlink" title="4.4 业务层接口的实现"></a>4.4 业务层接口的实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeckillServiceImpl</span> <span class="keyword">implements</span> <span class="title">SeckillService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//日志对象</span></span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加入一个混淆字符串（秒杀接口）的salt，为了避免用户猜出我们的md5值，值任意给，越复杂越好</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String salt=<span class="string">&quot;safjlvllj`asdl.kn&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SeckillMapper seckillMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SuccessKilledMapper successKilledMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSeckillMapper</span><span class="params">(SeckillMapper seckillMapper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.seckillMapper = seckillMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSuccessKilledMapper</span><span class="params">(SuccessKilledMapper successKilledMapper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.successKilledMapper = successKilledMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Seckill&gt; <span class="title">getSeckillList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seckillMapper.queryAll(<span class="number">0</span>,<span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Seckill <span class="title">getSeckillById</span><span class="params">(<span class="keyword">long</span> seckillId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seckillMapper.queryById(seckillId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据seckillId来验证此产品是否在秒杀商品信息中，如果存在就判断当前时间是否在秒杀时间段内</span></span><br><span class="line"><span class="comment">     * 如果二者都成立，就生成一个加密后的md5，返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> seckillId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Exposer <span class="title">exportSeckillUrl</span><span class="params">(<span class="keyword">long</span> seckillId)</span> </span>&#123;</span><br><span class="line">        Seckill seckill = seckillMapper.queryById(seckillId);</span><br><span class="line">        <span class="comment">//说明查不到这个秒杀产品的记录</span></span><br><span class="line">        <span class="keyword">if</span>(seckill == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Exposer(<span class="keyword">false</span>,seckillId);</span><br><span class="line">        &#125;</span><br><span class="line">        Date start_time = seckill.getStart_time();</span><br><span class="line">        Date end_time = seckill.getEnd_time();</span><br><span class="line">        Date now_time = <span class="keyword">new</span> Date();</span><br><span class="line">        <span class="comment">//若是当前时间不在秒杀时间段内</span></span><br><span class="line">        <span class="keyword">if</span>(start_time.getTime() &gt; now_time.getTime() || end_time.getTime() &lt; now_time.getTime())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Exposer(<span class="keyword">false</span>, seckillId, now_time.getTime(), start_time.getTime(),end_time.getTime());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//秒杀开启，返回秒杀商品的id、用给接口加密的md5</span></span><br><span class="line">        String md5 = getMD5(seckillId);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Exposer(<span class="keyword">true</span>, md5, seckillId);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getMD5</span><span class="params">(<span class="keyword">long</span> seckillId)</span></span>&#123;</span><br><span class="line">        String base = seckillId + <span class="string">&quot;/&quot;</span> + salt;</span><br><span class="line">        String md5 = DigestUtils.md5DigestAsHex(base.getBytes());</span><br><span class="line">        <span class="keyword">return</span> md5;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 秒杀是否成功，若成功：减库存，增加明细；失败：抛出异常，mysql自动事务回滚</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> seckillId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userPhone</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> md5</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SeckillException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> RepeatKillException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SeckillCloseException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SeckillExecution <span class="title">executeSeckill</span><span class="params">(<span class="keyword">long</span> seckillId, <span class="keyword">long</span> userPhone, String md5)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> SeckillException, RepeatKillException, SeckillCloseException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(md5 == <span class="keyword">null</span> || !md5.equals((getMD5(seckillId))))&#123;</span><br><span class="line">            <span class="comment">//md5不匹配，说明秒杀数据被重写了，抛出异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SeckillException(<span class="string">&quot;seckill data has been rewrite&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Date now_time = <span class="keyword">new</span> Date();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//减库存</span></span><br><span class="line">            <span class="keyword">int</span> updateCount = seckillMapper.reduceNumber(seckillId, now_time);</span><br><span class="line">            <span class="keyword">if</span>(updateCount &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//没有更新库存记录，说明秒杀结束</span></span><br><span class="line">                <span class="keyword">throw</span>  <span class="keyword">new</span> SeckillCloseException(<span class="string">&quot;seckill is closed&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//成功更新了库存</span></span><br><span class="line">                <span class="keyword">int</span> insertCount = successKilledMapper.insertSuccessKilled(seckillId, userPhone);</span><br><span class="line">                <span class="comment">//是否该明细被重复插入，即用户是否重复秒杀</span></span><br><span class="line">                <span class="keyword">if</span>(insertCount &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RepeatKillException(<span class="string">&quot;seckill repeated&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    SuccessKilled successKilled = successKilledMapper.queryByIdWithSeckill(seckillId, userPhone);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> SeckillExecution(seckillId, SeckillStatEnum.SUCCESS,<span class="string">&quot;秒杀成功&quot;</span>,successKilled);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (SeckillCloseException e1)&#123;</span><br><span class="line">            <span class="keyword">throw</span> e1;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (RepeatKillException e2)&#123;</span><br><span class="line">            <span class="keyword">throw</span> e2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            logger.error(e.getMessage(),e);</span><br><span class="line">            <span class="comment">//编译期异常转化为运行期异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SeckillException(<span class="string">&quot;seckill inner error :&quot;</span>+e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>由于我们返回的数据是交给前端的，所以秒杀是否成功的状态我们封装到一个枚举类中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span>  <span class="title">SeckillStatEnum</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    SUCCESS(<span class="number">1</span>,<span class="string">&quot;秒杀成功&quot;</span>),</span><br><span class="line">    END(<span class="number">0</span>,<span class="string">&quot;秒杀结束&quot;</span>),</span><br><span class="line">    REPEAT_KILL(-<span class="number">1</span>,<span class="string">&quot;重复秒杀&quot;</span>),</span><br><span class="line">    INNER_ERROR(-<span class="number">2</span>,<span class="string">&quot;系统异常&quot;</span>),</span><br><span class="line">    DATE_REWRITE(-<span class="number">3</span>,<span class="string">&quot;数据篡改&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> state;</span><br><span class="line">    <span class="keyword">private</span> String info;</span><br><span class="line"></span><br><span class="line">    SeckillStatEnum(<span class="keyword">int</span> state, String info) &#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">        <span class="keyword">this</span>.info = info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SeckillStatEnum <span class="title">stateOf</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (SeckillStatEnum state : values()) &#123;</span><br><span class="line">            <span class="keyword">if</span>(state.getState() == index)&#123;</span><br><span class="line">                <span class="keyword">return</span> state;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-5-将Service层交给Spring管理"><a href="#4-5-将Service层交给Spring管理" class="headerlink" title="4.5 将Service层交给Spring管理"></a>4.5 将Service层交给Spring管理</h4><p>创建<code>spring-service.xml</code>，配置扫描包，注入service的bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span> <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/tx </span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.yucaihuang.service&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.yucaihuang.service.impl.SeckillServiceImpl&quot;</span> <span class="attr">id</span>=<span class="string">&quot;seckillServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;seckillMapper&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;seckillMapper&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;successKilledMapper&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;successKilledMapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--事务--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-6-使用Spring的声明式事务配置"><a href="#4-6-使用Spring的声明式事务配置" class="headerlink" title="4.6 使用Spring的声明式事务配置"></a>4.6 使用Spring的声明式事务配置</h4><p>声明式事务的使用方式:</p><ol><li>早期使用的方式:ProxyFactoryBean+XMl.</li><li>tx:advice+aop命名空间，这种配置的好处就是一次配置永久生效。</li><li>注解@Transactional的方式。</li></ol><p>在实际开发中，建议使用第三种对我们的事务进行控制。继续在<code>spring-service.xml</code>中配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置基于注解的声明式事务--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>然后在Service实现类方法中，在需要进行事务声明的方法上加上事务的注解：<code>@Transactional</code></p><p>使用注解控制事务方法的优点：</p><ul><li>开发团队达成一致约定，明确标注事务方法的编程风格；</li><li>保证事务方法的执行时间尽可能短，不要穿插其他网络操作RPC/HTTP请求或者剥离到事务方法外部；</li><li>不是所有的方法都需要事务，如果只有一条修改操作、只读操作不需要事务控制。</li></ul><h4 id="4-7-Service逻辑的集成测试"><a href="#4-7-Service逻辑的集成测试" class="headerlink" title="4.7 Service逻辑的集成测试"></a>4.7 Service逻辑的集成测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:ApplicationContext.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeckillServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    SeckillService seckillService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getSeckillList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Seckill&gt; seckillList = seckillService.getSeckillList();</span><br><span class="line">        <span class="keyword">for</span> (Seckill seckill : seckillList) &#123;</span><br><span class="line">            System.out.println(seckill);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getSeckillById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Seckill seckillById = seckillService.getSeckillById(<span class="number">1001</span>);</span><br><span class="line">        System.out.println(seckillById);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exportSeckillUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Exposer exposer = seckillService.exportSeckillUrl(<span class="number">1002</span>);</span><br><span class="line">        System.out.println(exposer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeSeckill</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SeckillExecution seckillExecution = seckillService.executeSeckill(<span class="number">1002</span>, <span class="number">1506779719</span>, <span class="string">&quot;80267e7716eeec0135c23d6a4a61add4&quot;</span>);</span><br><span class="line">        System.out.println(seckillExecution);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当重复运行<code>executeSeckill</code>方法时，出现异常</p><p>这是因为用户进行了重复秒杀，我们应该在该测试方法中添加try catch,将程序允许的异常包起来而不去向上抛给junit。</p><p>由上分析可知，第四个方法只有拿到了第三个方法暴露的秒杀商品的地址后才能进行测试，也就是说只有在第三个方法运行后才能运行测试第四个方法，而实际开发中我们不是这样的，需要将第三个测试方法和第四个方法合并到一个方法从而组成一个完整的逻辑流程:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSeckillSeckillLogic</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="keyword">long</span> seckillId = <span class="number">1002</span>;</span><br><span class="line">    <span class="keyword">long</span> userPhone = <span class="number">15067729719L</span>;</span><br><span class="line">    Exposer exposer = seckillService.exportSeckillUrl(seckillId);</span><br><span class="line">    <span class="keyword">if</span>(exposer.isExposed())&#123;</span><br><span class="line">        System.out.println(exposer);</span><br><span class="line">        String md5 = exposer.getMd5();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            seckillService.executeSeckill(seckillId,userPhone,md5);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (RepeatKillException e1)&#123;</span><br><span class="line">            <span class="keyword">throw</span> e1;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (SeckillCloseException e2)&#123;</span><br><span class="line">            <span class="keyword">throw</span> e2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//秒杀未开启</span></span><br><span class="line">        System.out.println(exposer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-mvc层"><a href="#5-mvc层" class="headerlink" title="5.mvc层"></a>5.mvc层</h3><h4 id="5-1-整合spring"><a href="#5-1-整合spring" class="headerlink" title="5.1 整合spring"></a>5.1 整合spring</h4><p>创建<code>spring-mvc.xml</code>配置文件，并开启注解模式、配置静态资源、扫描包、视图解析器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启SpringMVC注解模式</span></span><br><span class="line"><span class="comment">    a. 自动注册DefaultAnnotationHanderMapping, AnnotationMethodHandlerAdapter</span></span><br><span class="line"><span class="comment">    b. 默认提供一系列的功能：数据绑定，数字和日期的format @NumberFormat, @DateTimeFormat</span></span><br><span class="line"><span class="comment">    c. xml, json的默认读写支持</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--静态资源默认servlet配置--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    1. 加入对静态资源的处理：js, gif, png</span></span><br><span class="line"><span class="comment">    2. 允许使用&quot;/&quot;做整体映射</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--扫描Controller--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.yucaihuang.controller&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;viewClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.springframework.web.servlet.view.JstlView&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>写一个Controller先测试一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/seckill&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeckillController</span></span>&#123;</span><br><span class="line">  <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求：<code>localhost:8080/seckill/hello</code>测试成功。</p><h4 id="5-2-导入静态资源"><a href="#5-2-导入静态资源" class="headerlink" title="5.2 导入静态资源"></a>5.2 导入静态资源</h4><p>将web目录下的文件拷贝到自己的web目录下。</p><h4 id="5-3-结果封装类"><a href="#5-3-结果封装类" class="headerlink" title="5.3 结果封装类"></a>5.3 结果封装类</h4><p>在dto包下创建<code>SeckillResult.java</code>类，用于封装md5地址和秒杀结果，给前端传值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将所有的ajax请求返回类型全部封装成json数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeckillResult</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> success;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line">    <span class="keyword">private</span> String error;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SeckillResult</span><span class="params">(<span class="keyword">boolean</span> success, T data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.success = success;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SeckillResult</span><span class="params">(<span class="keyword">boolean</span> success, String error)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.success = success;</span><br><span class="line">        <span class="keyword">this</span>.error = error;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSuccess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> success;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSuccess</span><span class="params">(<span class="keyword">boolean</span> success)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.success = success;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getError</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> error;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setError</span><span class="params">(String error)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.error = error;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="5-4-编写Controller方法"><a href="#5-4-编写Controller方法" class="headerlink" title="5.4 编写Controller方法"></a>5.4 编写Controller方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/seckill&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeckillController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SeckillService seckillService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 展示秒杀列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        List&lt;Seckill&gt; seckillList = seckillService.getSeckillList();</span><br><span class="line">        model.addAttribute(<span class="string">&quot;seckillList&quot;</span>,seckillList);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;list&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 秒杀商品详情页</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> seckillId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;seckillId&#125;/detail&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">detail</span><span class="params">(<span class="meta">@PathVariable(&quot;seckillId&quot;)</span> Long seckillId, Model model)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(seckillId == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;redirect:/seckill/list&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Seckill seckill = seckillService.getSeckillById(seckillId);</span><br><span class="line">        <span class="keyword">if</span>(seckill == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;forward:/seckill/list&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;seckill&quot;</span>,seckill);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;detail&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回一个JSON数据，数据中封装了我们商品的秒杀地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> seckillId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/&#123;seckillId&#125;/exposer&quot;, produces = &#123;&quot;application/json;charset=UTF-8&quot;&#125;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SeckillResult&lt;Exposer&gt; <span class="title">exposer</span><span class="params">(<span class="meta">@PathVariable(&quot;seckillId&quot;)</span> Long seckillId)</span></span>&#123;</span><br><span class="line">        SeckillResult&lt;Exposer&gt; result;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Exposer exposer = seckillService.exportSeckillUrl(seckillId);</span><br><span class="line">            <span class="comment">//成功取到了暴露的地址</span></span><br><span class="line">            result = <span class="keyword">new</span> SeckillResult&lt;Exposer&gt;(<span class="keyword">true</span>, exposer);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="comment">//取地址失败了，封装异常信息</span></span><br><span class="line">            result = <span class="keyword">new</span> SeckillResult&lt;Exposer&gt;(<span class="keyword">false</span>,e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于封装用户是否秒杀成功的信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> secKillId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> md5</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/&#123;seckillId&#125;/&#123;md5&#125;/execution&quot;,</span></span><br><span class="line"><span class="meta">    produces = &#123;&quot;application/json;charset=UTF-8&quot;&#125;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SeckillResult&lt;SeckillExecution&gt; <span class="title">execute</span><span class="params">(<span class="meta">@PathVariable(&quot;seckillId&quot;)</span> Long secKillId,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                   <span class="meta">@PathVariable(&quot;md5&quot;)</span> String md5,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                   <span class="meta">@CookieValue(value = &quot;userPhone&quot;, required = false)</span> Long userPhone)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(userPhone == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SeckillResult&lt;SeckillExecution&gt;(<span class="keyword">false</span>,<span class="string">&quot;未注册&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        SeckillResult&lt;SeckillExecution&gt; result;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SeckillExecution execution = seckillService.executeSeckill(secKillId, userPhone, md5);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SeckillResult&lt;SeckillExecution&gt;(<span class="keyword">true</span>,execution);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (RepeatKillException e1)&#123;</span><br><span class="line">            SeckillExecution execution = <span class="keyword">new</span> SeckillExecution(secKillId, SeckillStatEnum.REPEAT_KILL);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SeckillResult&lt;SeckillExecution&gt;(<span class="keyword">true</span>,execution);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (SeckillCloseException e2)&#123;</span><br><span class="line">            SeckillExecution execution = <span class="keyword">new</span> SeckillExecution(secKillId, SeckillStatEnum.END);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SeckillResult&lt;SeckillExecution&gt;(<span class="keyword">true</span>,execution);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            SeckillExecution execution = <span class="keyword">new</span> SeckillExecution(secKillId, SeckillStatEnum.INNER_ERROR);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SeckillResult&lt;SeckillExecution&gt;(<span class="keyword">true</span>,execution);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回系统当前时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/time/now&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SeckillResult&lt;Long&gt; <span class="title">time</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SeckillResult&lt;Long&gt;(<span class="keyword">true</span>, date.getTime());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><code>@ResponseBody</code>注解表示该方法的返回结果直接写入 HTTP 响应正文中，一般在异步获取数据时使用；</li></ul><ul><li>在使用<code>@RequestMapping</code>后，返回值通常解析为跳转路径，加上<code>@Responsebody</code>后返回结果不会被解析为跳转路径，而是直接写入HTTP 响应正文中。例如，异步获取<code>json</code>数据，加上<code>@Responsebody</code>注解后，就会直接返回<code>json</code>数据。</li><li><code>@RequestBody</code>注解则是将 HTTP 请求正文插入方法中，使用适合的<code>HttpMessageConverter</code>将请求体写入某个对象。</li></ul><h4 id="5-5-测试"><a href="#5-5-测试" class="headerlink" title="5.5 测试"></a>5.5 测试</h4><p>秒杀商品列表：</p><p><img src="https://raw.githubusercontent.com/KolinHuang/seckill/master/Drawings/seckill_list.png" alt="seckill_list"></p><p>秒杀商品详情信息：</p><p><img src="https://raw.githubusercontent.com/KolinHuang/seckill/master/Drawings/seckill_countdown.png" alt="seckill_countdown"></p><p><img src="https://raw.githubusercontent.com/KolinHuang/seckill/master/Drawings/seckill_start.png" alt="seckill_start"></p><p>秒杀成功：</p><p><img src="https://raw.githubusercontent.com/KolinHuang/seckill/master/Drawings/seckill_success.png" alt="seckill_success"></p><p>重复秒杀：</p><p><img src="https://raw.githubusercontent.com/KolinHuang/seckill/master/Drawings/seckill_repeat.png" alt="seckill_repeat"></p><h3 id="6-添加Redis缓存"><a href="#6-添加Redis缓存" class="headerlink" title="6. 添加Redis缓存"></a>6. 添加Redis缓存</h3><h4 id="6-1-整合Dao层"><a href="#6-1-整合Dao层" class="headerlink" title="6.1 整合Dao层"></a>6.1 整合Dao层</h4><p>在dao包中创建一个RedisMapper.java文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisMapper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JedisPool jedisPool;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedisMapper</span><span class="params">(String ip, <span class="keyword">int</span> port)</span></span>&#123;</span><br><span class="line">        jedisPool = <span class="keyword">new</span> JedisPool(ip,port);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这是序列化吗</span></span><br><span class="line">    <span class="keyword">private</span> RuntimeSchema&lt;Seckill&gt; schema = RuntimeSchema.createFrom(Seckill.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Seckill <span class="title">getSeckill</span><span class="params">(<span class="keyword">long</span> seckillId)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getSeckill(seckillId,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从redis里读数据，如果不存在就返回null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> seckillId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jedis</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Seckill <span class="title">getSeckill</span><span class="params">(<span class="keyword">long</span> seckillId, Jedis jedis)</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> hasJedis = jedis != <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(!hasJedis)&#123;</span><br><span class="line">                jedis = jedisPool.getResource();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                String key = getSeckillRedisKey(seckillId);</span><br><span class="line">                <span class="comment">//根据key查询</span></span><br><span class="line">                <span class="keyword">byte</span>[] bytes = jedis.get(key.getBytes());</span><br><span class="line">                <span class="comment">//如果查到了，说明redis里有这个key的缓存，就反序列化，返回seckill对象</span></span><br><span class="line">                <span class="keyword">if</span>(bytes != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    Seckill seckill = schema.newMessage();</span><br><span class="line">                    ProtostuffIOUtil.mergeFrom(bytes, seckill,schema);</span><br><span class="line">                    <span class="keyword">return</span> seckill;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(!hasJedis)&#123;</span><br><span class="line">                    jedis.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getSeckillRedisKey</span><span class="params">(<span class="keyword">long</span> seckillId)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;seckill:&quot;</span> + seckillId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从redis中先读数据，如果没有，就从数据库中读</span></span><br><span class="line"><span class="comment">     * 这个Function挺有意思的，学习一下！</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> seckillId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> getDataFromDb</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Seckill <span class="title">getOrPutSeckill</span><span class="params">(<span class="keyword">long</span> seckillId, Function&lt;Long, Seckill&gt; getDataFromDb)</span></span>&#123;</span><br><span class="line">        String lockKey = <span class="string">&quot;seckill:locks:getSeckill:&quot;</span>+seckillId;</span><br><span class="line">        String lockRequestId = UUID.randomUUID().toString();</span><br><span class="line">        Jedis jedis = jedisPool.getResource();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//循环争用锁，直到拿到了锁</span></span><br><span class="line">            <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">                Seckill seckill = getSeckill(seckillId, jedis);</span><br><span class="line">                <span class="keyword">if</span>(seckill != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> seckill;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//尝试获取锁</span></span><br><span class="line">                <span class="keyword">boolean</span> getLock = JedisUtils.tryGetDistributedLock(jedis,lockKey,lockRequestId,<span class="number">1000</span>);</span><br><span class="line">                <span class="keyword">if</span> (getLock)&#123;</span><br><span class="line">                    <span class="comment">//获取到了锁,从数据库拿数据，存redis</span></span><br><span class="line">                    seckill = getDataFromDb.apply(seckillId);</span><br><span class="line">                    putSeckill(seckill, jedis);</span><br><span class="line">                    <span class="keyword">return</span> seckill;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//无论如何都要把锁释放</span></span><br><span class="line">            JedisUtils.releaseDistributedLock(jedis, lockKey, lockRequestId);</span><br><span class="line">            jedis.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">putSeckill</span><span class="params">(Seckill seckill)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> putSeckill(seckill, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将Seckill对象序列化后，存入redis</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">putSeckill</span><span class="params">(Seckill seckill, Jedis jedis)</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> hasJedis = jedis != <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(!hasJedis)&#123;</span><br><span class="line">                jedis = jedisPool.getResource();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                String key = getSeckillRedisKey(seckill.getSeckill_id());</span><br><span class="line">                <span class="keyword">byte</span>[] bytes = ProtostuffIOUtil.toByteArray(seckill, schema, LinkedBuffer.allocate(LinkedBuffer.DEFAULT_BUFFER_SIZE));</span><br><span class="line">                <span class="comment">//超时缓存1小时</span></span><br><span class="line">                <span class="keyword">int</span> timeout = <span class="number">60</span> * <span class="number">60</span>;</span><br><span class="line">                String result = jedis.setex(key.getBytes(), timeout, bytes);</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(!hasJedis)&#123;</span><br><span class="line">                    jedis.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>需要用到分布式锁，所以创建一个工具类<code>JedisUtils</code>，利用<code>set lock:xx true ex 5 nx</code>原子操作实现锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String LOCK_SUCESS = <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Long RELEASE_SUCESS = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 尝试获取分布式锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jedis</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lockKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> requestId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expireTime</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">tryGetDistributedLock</span><span class="params">(Jedis jedis, String lockKey,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                String requestId, <span class="keyword">int</span> expireTime)</span></span>&#123;</span><br><span class="line">        SetParams setParams = <span class="keyword">new</span> SetParams();</span><br><span class="line">        setParams.nx();</span><br><span class="line">        setParams.ex(expireTime);</span><br><span class="line"></span><br><span class="line">        String result = jedis.set(lockKey,requestId,setParams);</span><br><span class="line">        <span class="keyword">return</span> LOCK_SUCESS.equals(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放分布式锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jedis</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lockKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> requestId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">releaseDistributedLock</span><span class="params">(Jedis jedis, String lockKey, String requestId)</span></span>&#123;</span><br><span class="line">        String script = <span class="string">&quot;if redis.call(&#x27;get&#x27;, KEYS[1]) == ARGV[1] then return redis.call(&#x27;del&#x27;, KEYS[1]) else return 0 end&quot;</span>;</span><br><span class="line">        Object result = jedis.eval(script, Collections.singletonList(lockKey), Collections.singletonList(requestId));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> RELEASE_SUCESS.equals(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在<code>spring-dao.xml</code>中配置bean:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--redis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.yucaihuang.dao.cache.RedisMapper&quot;</span> <span class="attr">id</span>=<span class="string">&quot;redisMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;118.31.103.27&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;6379&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="6-2-整合Service层"><a href="#6-2-整合Service层" class="headerlink" title="6.2 整合Service层"></a>6.2 整合Service层</h4><p>注入<code>redisMapper</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> RedisMapper redisMapper;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRedisMapper</span><span class="params">(RedisMapper redisMapper)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.redisMapper = redisMapper;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改查询逻辑，优先查询Redis：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Seckill <span class="title">getSeckillById</span><span class="params">(<span class="keyword">long</span> seckillId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> redisMapper.getOrPutSeckill(seckillId, <span class="keyword">new</span> Function&lt;Long, Seckill&gt;() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Seckill <span class="title">apply</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> seckillMapper.queryById(id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更新Service层依赖注入</p><p>测试：点击链接后，在redis中查询到了相应的键值。</p>]]></content>
      
      
      <categories>
          
          <category> 项目记录 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>软件工程 第7章 面向对象方法基础</title>
      <link href="2021/04/12/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B-%E7%AC%AC7%E7%AB%A0-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
      <url>2021/04/12/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B-%E7%AC%AC7%E7%AB%A0-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%B3%95%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>面向对象方法是一种把面向对象的思想应用于软件开发过程中，指导开发活动的系统方法，是建立在对象概念基础上的方法，简称为OO方法。</p><h2 id="面向对象的基本概念"><a href="#面向对象的基本概念" class="headerlink" title="面向对象的基本概念"></a>面向对象的基本概念</h2><p>面向对象=对象+分类+继承+通过消息的通信</p><h2 id="面向对象分析和设计过程"><a href="#面向对象分析和设计过程" class="headerlink" title="面向对象分析和设计过程"></a>面向对象分析和设计过程</h2><p><strong>面向对象分析过程OOA</strong></p><span id="more"></span><p><strong>面向对象设计过程OOD</strong></p><p>面向对象设计是将OOA所创建的分析模型转化为设计模型。</p><p><strong>设计模式</strong></p><h2 id="UML概述"><a href="#UML概述" class="headerlink" title="UML概述"></a>UML概述</h2><p><strong>UML发展历史</strong></p><p><strong>UML简介</strong></p><p><strong>视图</strong></p><ul><li>结构化域：描述系统中的结构成员及其相互关系，包括静态试图、设计视图和用况视图；</li><li>动态域：描述了系统的行为或其他随时间变化的行为，包括状态机图、活动视图和交互视图；</li><li>物理域：描述了系统中的计算资源及其总体结构上的部署，包括部署视图；</li><li>模型管理域：描述层次结构中模型自身的组织，包括模型管理视图和剖面</li></ul><p><strong>图</strong></p><p>类图、内部结构图、协作图、构件图、用况图、状态机图、活动图、顺序图、通信图、部署图、包图</p>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>同时多线程结构上操作系统的行为分析</title>
      <link href="2021/04/11/%E9%98%85%E8%AF%BB/%E5%90%8C%E6%97%B6%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BB%93%E6%9E%84%E4%B8%8A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%A1%8C%E4%B8%BA%E5%88%86%E6%9E%90/"/>
      <url>2021/04/11/%E9%98%85%E8%AF%BB/%E5%90%8C%E6%97%B6%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BB%93%E6%9E%84%E4%B8%8A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%A1%8C%E4%B8%BA%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>作者：Joshua A. Redstone, Susan J. Eggers and Henry M. Levy University of Washington</p><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本论文首次分析了操作系统在同步多线程(SMT)处理器上的执行情况。虽然SMT在过去六年得到了广泛的研究，但这些研究大都集中在用户模式执行上。然而，许多最适合多线程技术的应用程序都将很大一部分时间都花在内核代码上。因此，要完全理解这种工作负载的行为，需要执行和测量操作系统以及应用程序本身。</p><p>为了进行这项研究，我们做了以下工作：<br>1.修改Digital Unix 4.0d操作系统以运行在SMT CPU上<br>2.将我们的SMT Alpha指令集模拟器集成到SimOS模拟器种以提供一个执行环境</p><p>对于操作系统密集型工作负载，我们在SMT上运行多线程Apache Web服务器。我们将Apache的用户模式和内核模式行为与标准SPECInt工作负载进行了比较。总的来说，我们的结果展示了SMT处理器上操作系统密集型工作负载的微架构影响，并提供了对Apache Web服务器操作系统需求的深入了解。SMT处理器与Web和OS软件之间的协同作用产生了比以前检查过了任何工作负载（包括商业数据库和显示并行程序）上更大的吞吐量增益。</p><span id="more"></span><h1 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h1><p>同步多线程（SMT）是一种延迟容忍的CPU体系结构，它在每个周期中从多个线程执行多个指令。SMT的工作原理是将线程级并行转换为指令级并行，有效地将来自不同线程的指令送入大问题、无序超标标量处理器的功能单元。在过去的六年里，SMT得到了广泛的研究。康柏最近宣布Alpha 21464将包括SMT。作为一种通用的吞吐量增强机制。同步多线程特别适合于天生是多线程的应用程序，例如作为数据库和Web服务器，以及多程序和平行的科学工作负载。</p><p>本文首次检查了：<br>1.SMT架构上的操作系统行为<br>2.Web服务器SM应用程序，对于基于服务器的环境，操作系统是工作负载的关键组件。<br>以前的研究表明，数据库系统在内核中花费了30%到40%的执行事件，而我们的测量表明，Apache Web服务器在内核中花费了75%以上的时间。因此，对它们行为的任何分析都应该包括操作系统活动。<br>由于几个原因，操作系统对处理器的要求比典型的用户代码更高。<br>首先，操作系统是巨大的程序，由于代码和数据的大小，它们会淹没缓存和TLB。<br>其次，由于频繁的分支和不频繁的循环，操作系统可能会影响分支预测性能。<br>第三，操作系统的执行通常是短暂的和间歇的，由中断、异常或系统调用调用，并可能导致替换有用的缓存、TLB和分支预测状态，但好处很少或没有。<br>第四，操作系统可能执行自旋等待、显式缓存/TLB失效和其他用户模式代码中不常见的操作。由于这些原因，忽略操作系统（在架构模拟中通常是这样做的）可能会导致对系统级性能的误导性描述。即使对操作系统不密集的应用程序，与操作系统执行的指令数量相比，操作系统的性能影响也可能不成比例地大。<br>对于SMT，功能处理器和操作系统还不存在。相反，我们扩展了SimOS-Alpha基础设施，添加了一个基于alpha的SMT核心作为指令执行引擎。SimOS是一个模拟器，足够详细的引导和执行一个完整的操作系统，在康柏Alpha的情况下，SimOS也执行PAL代码。我们还修改了Digital Unix 4.0d操作系统以支持SMT。这种修改非常简单，因为Digital Unix的目标是在传统的共享内存处理器上运行，因为已经为多线程操作同步了。<br>作为SMT环境中操作系统行为的首次研究，我们的目标是回答几个基本问题<br>1.当操作系统添加到工作负载中时，以前报告的结果会发生什么变化（如果有的话）？特别是，我们希望核实之前研究的IPC结果，看看他们排除OS是否过于乐观。对于这些研究我们使用了一个由多个SPECInt基准组成的多程序工作负载。<br>2.也是更重要的，操作系统密集型工作负载和传统的工作负载都执行SMT在体系结构级别上的主要行为差异是什么？例如，操作系统如何改变微体系结构级别的资源利用率，对于具有细粒度资源共享（如SMT）的处理器，它会导致什么特殊问题（如果有的话）？对于这个问题，我们研究了一个操作系统密集型的应用程序，即广泛使用的Apache Web服务器，它是由SPECWeb基准测试驱动的。我们比较了Apache工作负载和SPECInt工作负载，以研究高操作系统和低操作系统使用的擦会议。<br>3.像Apache这样的Web服务器如何从SMT中获益，从软件的角度看，它将时间花在哪里？这个分析本身就很有趣，因为Web服务器和类似的应用程序越来越重要。因此我们给出了无序超标量和SMT上Apache的结果。<br>总定来说，我们的结果描述了操作系统密集型工作负载的架构行为和关键应用程序（Apache Web服务器）的软件行为（在操作系统内）。<br>本文组织如下。第二节详细介绍了我们的测量方法、模拟环境和我们使用的工作负载。第三节给出了我们在SMT上的两种工作负载（包括操作系统执行）的测量结果。第三节的前半部分介绍了由SPECInt应用程序组成的多编程工作负载，而后半部分主要关注Apache工作负载。第四节描述了以前的工作及其与我们研究的关系。我们在第五节做总结。</p><h1 id="2-方法"><a href="#2-方法" class="headerlink" title="2. 方法"></a>2. 方法</h1><p>本节描述在我们基于模拟的实验中使用的方法。我们首先描述SMT处理器和模拟硬件配置的西结。然后，我们从硬件和软件两个层面描述操作系统仿真环境。最后，我们描述评估的两个工作负载：一个是SPECInt95基准测试的多编程工作负载；另一个是Apache Web服务器。</p><h2 id="2-1-SMT和超标量处理器模型"><a href="#2-1-SMT和超标量处理器模型" class="headerlink" title="2.1 SMT和超标量处理器模型"></a>2.1 SMT和超标量处理器模型</h2><p>SMT是一种延迟容忍的CPU体系结构，它在每个周期中执行来自多个线程的多个指令。通过线程级并行转换为指令级并行，从不同线程发出指令的能力可以更好地利用执行资源。以前的研究已经证实，SMT可以有效地提高各种工作负载上的吞吐量，同时仍然为单线程应用程序提供良好的性能。<br>在硬件层面，SMT是现代无序超标量（如MIPS R10000或Alpha 21264）的直接扩展。SMT复制了一个超标量的寄存器文件、程序计数器、子程序堆栈和内部处理器寄存器，以保存多个线程的转台（我们将包含线程状态的硬件资源集称为上下文）。除了复制线程状态以外，SMT还具有用于管道刷新、指令退出、子例程返回预测和捕获的每上下文机制。康柏估计，对支持SMT所需的无序超标量进行修改，只会使芯片面积增加10%。<br>表一列出了模拟的SMT处理器和存储系统的参数，这些参数使选择作为近期处理器的特性。我们评估的无序超标量提供了与SMT相同的硬件资源，除了它缺少额外的硬件上下文，并且由于它的寄存器文件更小，它有更少的两个流水线阶段。<br><img src="https://img-blog.csdnimg.cn/2020122014505387.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjMzMzQw,size_16,color_FFFFFF,t_70" alt="表一：SMT参数"></p><h2 id="2-2-操作系统执行"><a href="#2-2-操作系统执行" class="headerlink" title="2.2 操作系统执行"></a>2.2 操作系统执行</h2><h3 id="2-2-1-操作系统仿真环境"><a href="#2-2-1-操作系统仿真环境" class="headerlink" title="2.2.1 操作系统仿真环境"></a>2.2.1 操作系统仿真环境</h3><p>在某种程度上，操作系统只是一个大程序；然而，它在访问低级硬件资源时（例如，I/O设备寄存器和内部CPU寄存器）和响应低级硬件事件（例如，异常和中断）方面是独特的。因此，要模拟操作系统，就需要模拟这些资源和事件。在本工作中，我们构建了SimOS-alpha硬件仿真框架。将我们的SMT CPU模拟器集成到SimOS中。这允许我们在模拟器上引导和运行操作系统，并在我们的模拟器中包含将在实际CPU上运行的每条指令，有特权的或无特权的。SimOS环境也执行Alpha PAL代码—存在于操作系统本身之下的一层软件。例如，PAL代码用于响应TLB丢失和处理操作系统内的同步（SETIPL）。我们还对几乎所有影响内存层次结构的操作系统/硬件交互进行建模，比如DMA操作和缓存刷新指令。一个例外是来自网络接口的DMA操作；尽管包含与网络相关的DMA将使Apache工作负载的内存总线事务数加倍（SPECInt工作负载不使用网络），但平均内存总线延迟仍然微不足道，因为它目前每个总线事务只有0.25个周期。<br>我们的研究集中在CPU和内存性能瓶颈上。为了节省模拟时间，我们模拟了一个零延迟磁盘。使用大型、快速磁盘阵列子系统对机器进行建模。但是，将执行所有操作磁盘的操作系统代码，包括磁盘驱动程序和DMA操作。对磁盘绑定及其进行建模可能会改变系统行为，特别是在缓存层次结构中。</p><h3 id="2-2-2-操作系统修改"><a href="#2-2-2-操作系统修改" class="headerlink" title="2.2.2 操作系统修改"></a>2.2.2 操作系统修改</h3><p>我们执行康柏digital Unix 4.0d操作系统，这是一个（共享内存）多处理器感知的操作系统。通过允许SMT在操作系统中显示为共享内存多处理器（SMP），只需在SMT和SMP体系结构不同的地方对操作系统进行更改。在Alpha的情况下，这些差异是SMT的共享TLB和L1缓存，而Alpha SMP的每个处理器的TLB和L1缓存，而Alpha SMP的每个处理器的TLB和L1缓存。在这两种差异中，只有与tlb相关的OS代码需要修改。<br>Alpha TLB在TLB条目上包含一个地址空间号（ASN）标记，它允许多个地址空间共享TLB，并减少上下文切换时的TLB刷新。由于多个线程可以同时访问SMT处理器的共享TLB，操作这些asn需要在上下文切换期间进行适当的互斥。因此，我们对tlb相关的代码做了一些更改。首先，我们修改了ASN分配算法以覆盖多个执行线程。其次，我们在每个上下文基础上复制了用于修改TLB条目的内部处理器寄存器；这样就删除了竞态条件，并允许多个上下文并行处理TLB miss。第三，我们删除了TLB击落代码，这在单处理器SMT中是不必要的。<br>尽管SMT处理器和MP的缓存架构接口不同，但这并不需要对操作系统进行修改。该接口提供了刷新L1指令和数据缓存的命令，在SMT中，这会导致刷新线程共享缓存，而不是线程本地缓存。由于缓存是软状态，因此结果的额外刷新可能是不必要的，但绝对不会是错误的。<br>我们执行的操作系统包含在SMT上运行Digital Unix所需的最小更改集，但没有探索大量的优化机会。例如，操作系统结构（如空闲循环和自旋锁定）是不必要的，会浪费SMT上的资源。（然而，在本文实验中，空闲周期栈稳定状态CPU比例不超过0.7%，旋转锁定在SPECInt工作负载中占不到1.2%，在Apache工作负载中占不到4.5%）。另一个可能的优化是用smt优化的调度器替换MP OS进程调度器。我们计划研究操作系统优化为未来的工作，但令人鼓舞的是，可以直接修改支持smp的操作系统，以便在SMT处理器上工作。</p><h2 id="2-3-模拟工作负载"><a href="#2-3-模拟工作负载" class="headerlink" title="2.3 模拟工作负载"></a>2.3 模拟工作负载</h2><p>在这项研究中，我们检查了两种不同的工作负载。第一个是多程序工作负载，由SPEC95Int的所有8个应用程序组成，我们对该套件模拟了6.5亿条指令。选择SEPCInt95有两个原因，首先，由于它通常用于架构评估，包括SMT的研究，我们希望了解在以前的工作中没有包含OS活动遗漏了什么。其次，由于Apache也是一个interger程序，SPECInt的性能可以作为基线，帮助了解Apache的性能。<br>第二个工作负载是Apache（版本1.3.4），这是一个流行的公共域Web服务器，由大多数Web站点运行。因为它大量使用OS服务（我们的测量显示75%的执行周期是在内核中度过的），所以它是一个用于检查OS性能的丰富环境（本文中介绍的大多数Apache数据都是基于对超过10亿条指令的模拟，从服务器空闲时开始）。然而，第3.2节中的超标量实验是在大约7亿条指令的模拟上进行的，受到模拟时间的限制。<br>我们使用SPECWeb96驱动Apache，这是一个Web服务器性能基准测试。我们配置Apache64个服务器进行，配置了SPECWeb 128个提供请求的客户端。为了支持使Apache饱和的请求速率。为了支持使Apache饱和所需的请求速率，我们将SPECWeb基准作为两个驱动进程执行，每个驱动程序有64个客户端。如果驱动程序运行在一个本地Alpha，然后网络代码将无法正常运行，消息被TCP丢弃。因此，我们构建了一个框架，在这个框架中，我们在单个Alpha上运行三个SimOS副本。结果是SPECWeb96客户端出现了与Apache完全相同的减速。客户端以Apache可以处理的速度生成数据包，并且双方的OS代码可以正确地管理网络接口和协议。在这三个SimOS环境之间，我们模拟了一个直接的网络连接，该连接传输数据包不存在丢失和延迟。模拟的网卡以10毫秒的时间粒度中断CPU，并且网络模拟器每隔10毫秒强制跨所有机器执行屏障同步。这个屏障使模拟器保持同步运行，并保证我们实验的可重复性的模拟的确定性执行。</p><h3 id="2-3-1-只模拟应用程序代码"><a href="#2-3-1-只模拟应用程序代码" class="headerlink" title="2.3.1 只模拟应用程序代码"></a>2.3.1 只模拟应用程序代码</h3><p>为了更精确地描述操作系统对性能的影响，我们将包含操作系统工作负载模拟与之模拟应用程序代码的工作负载模拟进行了比较。仅用于应用的模拟是通过一个单独的模拟器来完成的，该模拟器源自以前SMT研究中使用的SMT模拟器。仅应用程序模拟器将所有系统调用和内核陷阱建模为立即完成，对硬件状态没有影响。</p><h1 id="3-结果"><a href="#3-结果" class="headerlink" title="3. 结果"></a>3. 结果</h1><p>本节介绍基于simos的操作系统行为测量结果及其对SMT处理器的影响，在3.1节中，我们考虑一个特定的多程序工作负载；第3.2节研究了Apache工作负载，并将其与SPECInt的结果进行了比较。</p><h2 id="3-1-对SPECInt工作负载的评估"><a href="#3-1-对SPECInt工作负载的评估" class="headerlink" title="3.1 对SPECInt工作负载的评估"></a>3.1 对SPECInt工作负载的评估</h2><p>传统上，架构师根据科学和程序开发工作负载的分析来决定处理器和内存子系统的设计，SPECInt基准套件就是典型的例子。然而，大多数这样的分析只检查用户模式代码。在本节中，我们将评估这种做法的适当性，同步多线程上下文中的方法学策略。我们希望特别回答两个问题。首先，在SMT上包括（或不包括）操作系统的影响是什么，即使对于SPECInt基准测试的多编程工作负载也是如此？虽然我们预计SPECInt的操作系统使用率较低，但之前的研究表明，忽略内核代码，即使在这样低操作系统环境中，也会导致对内存系统行为的不良估计。第二，操作系统代码对8-上下文SMT的影响与无序超标量的影响相比如何？SMT的独特之处在于它同时执行内核模式和用户模式指令。也就是说，在一个周期中，来自多个内核例程的指令可以与来自多个用户应用程序的指令一起执行，而所有这些指令都共享一个内存层次结构。相反，超标量可以将来自单个应用程序的用户指令长流与来自单个内核服务的内核指令长流交替使用。在两种体系结构中，这种差异可能会对内存系统性能产生不同的银杏果i昂。在3.2节中，我们将根据Apache（一种操作系统更密集的工作负载）研究类似的问题。</p><h3 id="3-1-1-传统的SPEC-interger工作负载在SMT处理器上执行的OS行为"><a href="#3-1-1-传统的SPEC-interger工作负载在SMT处理器上执行的OS行为" class="headerlink" title="3.1.1 传统的SPEC interger工作负载在SMT处理器上执行的OS行为"></a>3.1.1 传统的SPEC interger工作负载在SMT处理器上执行的OS行为</h3><p>图一显示了多程序SPECInt95基准测试的执行周期百分比，这些基准测试占用用户空间、内核空间，或者在SMT处理器上执行时空闲。在程序启动期间（如图虚线左侧所示），操作系统平均占执行周期的18%，一旦达到稳定状态，它就会下降到相当稳定的5%，在执行过程中至少要维持16亿次循环（图中只显示了一部分）。在程序初始化较高的OS活动主要是由于TLB未处理（占所有 执行周期的12%）和系统调用5%，如图二所示。大多数TLB活动集中在处理TLB在用户空间丢失的数据（大约95%）。TLB错过了对内核内存管理的调用，而页面分配占据了这些调用的大部分，如图三所示。大多数由应用程序发起的系统调用是针对文件系统的；特别是，读取输入文件占用3.5%的执行周期，这与读取源和/或配置文件的应用程序一致。进程创建和控制以及内核前导（识别并分派到特定的系统调用）占用了大部分剩余的系统调用时间。注意，内核活动使Alpha PAL代码的执行相形见绌。<br>一旦达到稳定状态，内核活动将下降到执行周期的5%，但是TLB处理和系统调用时间的比例与启动期间大致相同。唯一重要的变化是文件读取调用的减少，因为程序已经从初始化转向。<br>表2显示了内核中各主要指令类别的指令分布情况；这些值是证书应用程序的典型值，包括SPEC整数基准测试。内核指令与用户指令在三个方面不同，首先，大约一半的内存操作在程序启动时，三分之一的负载和三分之二的存储处于稳定状态，不适用TLB，即TLB。它们直接指定物理地址。其次，内核控制传输包括PAL入口/返回分支。第三，与用户代码相比，稳态内核代码的条件分支占有率只有用户代码的一般。但是，由于内核执行时间很少，所以这些差异的总体影响很小。</p><p><img src="https://img-blog.csdnimg.cn/20201223203038244.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjMzMzQw,size_16,color_FFFFFF,t_70#pic_center" alt="图一 SPECInt95在SMT上执行的执行周期分解，在内核中花费的周期占所有执行周期的百分比在顶部黑色部分"><br><img src="https://img-blog.csdnimg.cn/20201223182106203.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjMzMzQw,size_16,color_FFFFFF,t_70#pic_center" alt="图2：SPECInt的内核时间分解"></p><p><img src="https://img-blog.csdnimg.cn/20201223122255824.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjMzMzQw,size_16,color_FFFFFF,t_70#pic_center" alt="图3：内存内核管理代码"><br><img src="https://img-blog.csdnimg.cn/2020122312230790.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjMzMzQw,size_16,color_FFFFFF,t_70#pic_center" alt="图4：系统调用占总执行的百分比"><br><img src="https://img-blog.csdnimg.cn/20201223122319240.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjMzMzQw,size_16,color_FFFFFF,t_70#pic_center" alt="表2：按指令类型分列的动态指令在SPECInt工作负载中的百分比，内存操作的括号中的百分比表示加载和存储的物理地址的比例。还包括分支指令的百分比细分，对于条件分支，括号中的数字表示所采用的条件分支的百分比"></p><h3 id="3-1-2-为什么要在特定的工作负载上模拟操作系统"><a href="#3-1-2-为什么要在特定的工作负载上模拟操作系统" class="headerlink" title="3.1.2 为什么要在特定的工作负载上模拟操作系统"></a>3.1.2 为什么要在特定的工作负载上模拟操作系统</h3><p>表3上半部分显示了在SMT上模拟SPECInt95和操作系统时，几种硬件数据结构中的未命中率。总的结果反映了其他研究人员在单线程处理器研究中发现的情况，即操作系统表现出的性能比特殊应用程序要差。分支目标缓冲器的内核未命中率特别高，因为两个因素：操作系统执行其实很少，无法建立一个持久的分支目标状态；大多数内核未命中（78%）取代其他内核条目错误是由于重复的变化间跳转的目标地址。<br>表3下半部分的分布结果表明，除指令缓存外，应用程序线程内部或应用程序线程之间的冲突是造成绝大多数缺失的原因。内核引起的冲突缺失仅占BTB缺失的10%，数据缓存缺失的18%，L2缓存缺失的9%和数据TLB缺失的18%，相比之下，大多数指令缓存丢失（60%）是由内核引起的。强制缺失对于所有硬件结构都是微不足道的，除了L2缓存，在L2缓存中内核为应用程序预取数据，因此吸收了许多第一次引用缺失的成本。<br>在较高的层次上，多编程SPECInt工作负载的内核执行频率较低可以改善内核特定于硬件组件的性能，表4通过比较在SMT上有操作系统活动和没有操作系统活动时以稳定状态执行的SPECInt工作负载的几个体系结构度量，说明了这种影响。这些数字表明，指令吞吐量仅略有下降，原因是操作系统，除了少数例外，线程共享硬件资源利用率在包含内核时略有下降。我们观察到性能下降百分比较大的那些硬件组件并没有对性能底线造成很大影响，因为它们最初并没有表现出特别糟糕的行为。<br>最严重的变化是模拟内核造成的，依赖于fetch引擎的两个部分，分支预测硬件和指令缓存之间的交互。转移错误预测增加了15%，指令缓存丢失增加了1.9倍，很大程度上是由于内核执行的干扰。指令丢失主要是由指令页重映射引起的缓存刷新引起的，而不是由特定缓存位置的冲突引起的，指令缺失的增加反过来导致可获取上下文的数量减少的8%，例如，那些不为指令丢失或中断服务的上下文，由于模拟器内核减少了可取上下文的平均数量，因此选择了一个预测错误的上下文来更频繁地获取数据，从而获得更多错误路径指令。<br>令人惊讶的是，内核比SPECInt应用程序有更好的转移预测，尽管它缺乏基于循环的代码（当同时执行这两个操作时，用户代码中的错误率是9.3），内核代码中的大多数条件分支都用于菱形控件，在这种控件中，目标代码执行异常条件。虽然内核BTB漏失率很高，但是对一个漏失的默认预测执行直通代码，因此更多的内核预测往往是正确的。<br>综上所述，尽管内核内存子系统的转移预测漏失率很高，但SMT指令吞吐量仅受到轻微影响，因为SPECInt程序中的内核活动很小，SMT很好地隐藏了延迟，因此，对类似特殊科学应用的SMT基本性能感兴趣的研究人员可以放心地依赖于应用及模拟。然而，如果专注于特定硬件组件（比如数据TLB）的设计，或者特定硬件策略（比如推测何时取数据）的设计，那么包括操作系统的执行时间影响是很重要的。<img src="https://img-blog.csdnimg.cn/20201223122337781.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjMzMzQw,size_16,color_FFFFFF,t_70#pic_center" alt="表3：在SMT上模拟SPECInt95和操作系统时，在几种硬件数据结构种总的缺失率和缺失分布，缺失类别是所有用户内核缺失的百分比。粗体条目表示内核诱导干扰。用户内核冲突是指用户线程与某种类型的内核活动冲突"><br><img src="https://img-blog.csdnimg.cn/20201223122347629.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjMzMzQw,size_16,color_FFFFFF,t_70#pic_center" alt="表4：带有SMT和超标量的操作系统和不带操作系统的SPECInt95的体系结构度量"></p><h3 id="3-1-3-在评估大问题超标量模型时是否应该模拟操作系统？"><a href="#3-1-3-在评估大问题超标量模型时是否应该模拟操作系统？" class="headerlink" title="3.1.3 在评估大问题超标量模型时是否应该模拟操作系统？"></a>3.1.3 在评估大问题超标量模型时是否应该模拟操作系统？</h3><p>就总体执行周期而言，在执行SPECInt基准测试时，操作系统在无序超标量和SMT处理器上的行为类似。超标量处理器只花费稍微大一点的执行部分在操作系统中。对于两个处理器，处于稳定状态的操作系统周期的百分比是相同的。<br>同样，在超标量处理器和SMT处理器，在启动和稳定状态下OS周期的分布都类似。一个例外是超标量处理器数据TLB的内核缺失所花费的较大部分时间。而且，DTLB丢失的内核处理会显示出糟糕的指令缓存行为，这增加了花费在这段代码中的时间。内核指令缓存在超标量上的丢失率是13.8%，其中81%的丢失是由于内核DTLB错误处理代码造成的。<br>在微架构级别上，操作系统在无序超标量上扮演不同的角色。超标量上的指令吞吐量大约是SMT的一半，如表4所示。尽管超标量硬件数据结构中的缺失较少发生，因为一次只执行一个线程，但超标量缺乏SMT隐藏延迟的能力。在过去对非os工作负载的SMT的所有研究中，SMT延迟容错超过了内存子系统和分支硬件中额外的线程间的冲突的补偿，最明显的是操作系统缺乏超标量的延迟隐藏能力，在稳定状态下只能达到0.6IPC，相比之下，用户代码的IPC为3.0。此外，超标量按比例压缩的指令数量大约是SMT的两倍，因为超标量只有一个要获取的指令源。<br>总是，包括操作系统在SPECInt超标量体系结构模拟负载扰动底线性能超过SMT，因为超标量体系结构性能更容易受到指令延迟（在其他硬件组件中，性能下降幅度较小，或者反映了先前性能良好的组件的大幅退化）。这一结果表明，研究人员在评估超标量系统结构时，不应该对忽略操作系统的影响抱有信心。</p><h2 id="3-2-对Apache（一个操作系统密集型工作负载）的评估"><a href="#3-2-对Apache（一个操作系统密集型工作负载）的评估" class="headerlink" title="3.2 对Apache（一个操作系统密集型工作负载）的评估"></a>3.2 对Apache（一个操作系统密集型工作负载）的评估</h2><p>Apache是部署最广泛的Web服务器。它的作用很简单：响应客户端HTTP请求包，通常返回请求的HTML或其他对象。对象存储在面向文件的数据库中，如果没有缓存在服务器的内存中，则从磁盘读取。下面我们将检查基于apache的工作负载。</p><h3 id="3-2-1-操作系统在执行Apache时的作用"><a href="#3-2-1-操作系统在执行Apache时的作用" class="headerlink" title="3.2.1 操作系统在执行Apache时的作用"></a>3.2.1 操作系统在执行Apache时的作用</h3><p>图五展示了Apache工作负载在SMT上执行的内核和用户活动，这些数据在几个方面与SPECInt多道程序工作负载有显著的不同，首先，Apache起步时间短；这不奇怪，因为Apache的启动只是简单地接收第一个传入的请求并唤醒服务器线程。其次，一旦请求到达，我们看到Apache花费超过75%的时间在操作系统上，即，Apache的大部分执行是在操作系统中，而不是在应用程序代码中。<br>图六显示了Apache内核周期的分解，与SPECInt启动期和稳定状态期比较。对Apache来说，其内核时间的大部分都花在了执行系统调用上。也就是说，SPECInt工作负载由隐式操作系统使用主导，而Apache则更显式地使用操作系统。Apache还显示了通过网络中断的重要内核活动—SPECInt工作负载中没有响应活动，Apache花费了34%的内核周期在neister线程中处理中断请求或响应网络中断，neister线程是一组相同的线程，负责代表到达的消息管理网络协议栈。Apache中只有少量的内核活动是由于DTLB失误造成的，相比之下，SPECInt工作负载大部分内核时间与TLB丢失处理有关（稳定状态为82%，启动时为58%）<br>图7显示了Apache系统调用更详细的分解。在左边，我们看到由Apache执行的每个系统调用引起的执行周期的百分比。如果所示，大部分时间花在处理对I/O例程的调用上：例如，Apache在star例程（查询文件信息）中花费了10%的周期，在读/写中花费了19%的周期，在I/O控制操作（如打开）中花费10%的周期，图7的右侧显示了相同数据的不同细分。在这里，我们根据资源类型（网络或文件）以及操作类型限定执行时间。从图中我们可以看出，网络读/写是最大的时间消耗者，大约占所有周期的17%，占Apache内核周期的22%。如上所述，文件查询（star例程）是第二大消耗者，其次是文件控制操作，占所有周期6%，占内核周期的8%。总的来说，花费在网络和文件系统的系统调用上的时间几乎与network相同服务占所有内核周期的21%，文件服务占18%。<br><img src="https://img-blog.csdnimg.cn/20201223122411242.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjMzMzQw,size_16,color_FFFFFF,t_70#pic_center" alt="图五：在SMT上执行的Apache中的内核和用户活动"><br><img src="https://img-blog.csdnimg.cn/20201223122421736.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjMzMzQw,size_16,color_FFFFFF,t_70#pic_center" alt="图六：在SMT上Apache内核活动分解，SPECInt工作负载的启动阶段和稳定阶段被包括进来比较"><br><img src="https://img-blog.csdnimg.cn/20201223122432279.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjMzMzQw,size_16,color_FFFFFF,t_70#pic_center" alt="图7：在SMT处理器上处理内核系统调用所花费的执行时间分解"></p><h3 id="3-2-2-结构性能特点"><a href="#3-2-2-结构性能特点" class="headerlink" title="3.2.2 结构性能特点"></a>3.2.2 结构性能特点</h3><p>表5显示了Apache中内核和用户代码的指令类型细分。总体来说，这类似于相应的SPECInt表。Apache的稳定加载/存储百分比更接近SPECInt的启动加载/存储百分比。因为SPECInt的启动包括各种OS服务，而稳定状态SPECInt工作负载主要由tlb处理条例控制。总的来说，Apache中大约一半的内核内存访问操作绕过TLB，即，它们直接指定物理地址。<br>表6展示了Apache的架构性能特征，并将它们与稳定状态下的SPECInt工作负载进行了比较，该图还显示了运行在超标量上的Apache的统计信息。Apache工作负载在SMT上实现了每个周期4.6条指令的吞吐量（最多为6条），比SPECInt工作负载低18%，性能下降的原因分布在大多数主要硬件组件中，Apache的性能比SPECInt差得多。除了数据TLB之外，内存子系统的所有组件都经历了更多的冲突；例如Apache的L2 miss率是SPECInt的1.5倍，D-cache miss率是2.3倍，I-cache miss率是2.5倍。<br>与SPECInt相比，Apache在fetch单元也表现得更差，Apache的可获取上下文平均比SPECInt少20%，被压缩的指令更多。在充分利用6个缺失插槽的情况下，Apache也减少了33%的周期。然而，尽管内存和获取系统行为有这些巨大的差异，SMT仍然能很好地容忍延迟，通过处理更多的缺失，并与要求更高的工作负载并行（最后三行）。<br>SMT在Apache中隐藏延迟的能力导致平均指令吞吐量为4.6IPC—是标准吞吐量的4.2倍，并且是SMT研究的任何工作负载的最高相对增益。超标量处理器实现的IPC仅为1.1—仅为SPECInt的42%（相比之下，在SMT处理器上Apache的IPC是它为SPECInt实现的82%。）最能说明性能差异的是，超标量在超过60%的周期内无法获取或发出指令，并且由于分支错误预测，它将获得的指令的46%删除了。SMT压缩的指令更少，因为多线程减少了错误预测的分支路径在条件解决之前执行的距离。<br><img src="https://img-blog.csdnimg.cn/20201223122454416.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjMzMzQw,size_16,color_FFFFFF,t_70#pic_center" alt="表5：按指令类型执行Apache时动态指令的百分比"><br><img src="https://img-blog.csdnimg.cn/2020122312250543.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjMzMzQw,size_16,color_FFFFFF,t_70#pic_center" alt="表6：比较在SMT上执行的Apache、在SMT上执行的SPECInt95以及在超标量上执行的Apache的体系结构指标"></p><h3 id="3-2-3-线程间的竞争与合作"><a href="#3-2-3-线程间的竞争与合作" class="headerlink" title="3.2.3 线程间的竞争与合作"></a>3.2.3 线程间的竞争与合作</h3><p>如前所述，SMT可以在单个周期中发出来自多个内核线程的指令，这就为线程间冲突创造了新的可能性，表7给出了Apache miss行为了更多细节，重点关注冲突的原因。与SPECInt工作负载相比，最引人注目的是内核/内核和用户/内核冲突，用粗体显示。Apache中缓存丢失的最高原因是内核内部的冲突：65%的L1 Icache丢失，65%的L1 Dcache丢失，以及41%的L2缓存丢失是由于线程内或线程间的内核冲突造成的。除L2缓存之外，这两类缓存中的内核线程缺失几乎是线程内缺失的两倍。用户/内核冲突也是非常重要的：25%的L1 Icache丢失，10%的L1 Dcahce丢失，22%的L2缓存丢失是由于内核和用户代码或数据之间的冲突造成的。<br>在SMT上同时运行多个内核线程的影响还可以通过将其与超标量进行比较来观察，超标量中一次只能活动一个内核线程。在Apache（未显示数据）的超标量执行中，与SMT上的Apache相比，Icache、Dcache和L2缓存中由于内核线程间冲突而导致的丢失百分比分别要低24%、28%和38%<br>在BTB中，内核线程内冲突占主导地位，占所有BTB丢失的68%，而6%的丢失是由用户/引起的内核冲突。相反，用户代码要为两个TLB中的大部分丢失负责（53%的数据TLB丢失和86%的指令TLB丢失是由于用户/用户冲突造成的）。尽管用户代码只占执行周期的22%。<br>虽然上面提到的数据涉及冲突，但同时执行线程也可能导致建设性的线程间行为。具体来说，当一个线程接触到即将被第二个线程访问的数据时，就会发生预取；然后第二个线程将在缓存中找到数据，从而避免丢失数据。比较SMT上这种构造共享的数量和超标量上相同的行为是很有趣的。由于SMT上有更细粒度的并行性，因此这种预取活动有更多机会。表8显示了集中资源由于在Apache中进行建设性共享而避免丢失的百分比。例如，在SMT上，如果不是内核中也在执行的其他线程预加载一个内核线程的指令，L1 Icache的总体缺失率将会更高66%。相比之下，这种共享对运行Apache的超标量的影响只有28%。同样，差异是由于SMT同时执行多个内核线程，或者在比超标量上执行的更短的时间内执行。<br>对于L2缓存来说，内核-内核预取的影响甚至更大，在L2缓存中，避免了额外71%的丢失，12%的内核TLB失误也被避免了。<br><img src="https://img-blog.csdnimg.cn/20201223122518707.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjMzMzQw,size_16,color_FFFFFF,t_70#pic_center" alt="表7：在SMT上模拟Apache和操作系统时，几种硬件数据结构的缺失分布"><br><img src="https://img-blog.csdnimg.cn/20201223122630240.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjMzMzQw,size_16,color_FFFFFF,t_70#pic_center" alt="表8：Apache上由于线程间合作而避免缺失的百分比"></p><h3 id="3-2-4-操作系统对硬件的影响"><a href="#3-2-4-操作系统对硬件的影响" class="headerlink" title="3.2.4 操作系统对硬件的影响"></a>3.2.4 操作系统对硬件的影响</h3><p>与前面对SPECInt工作负载的分析类似，我们现在研究操作系统对缓存和转移预测硬件的影响。操作系统增加了所有硬件结构的冲突，从L1数据丢失率增加35%到L1指令丢失率增加超过5倍不等。这些增长大致对应表7的冲突缺失数据，即，由于内核引用的增加，硬件结构中的用户丢失率降低的程度大致与内核冲突导致的用户丢失比例成正比。<br>除了超标量指令缓存丢失率外，操作系统对硬件结构的影响更大，在SPECInt工作负载上执行Apache比在SPECInt工作负载上执行更少。出现这种差异主要是因为操作系统活动主导Apache的执行，但也因为它们更多样化，因此比SPECInt所需的地方更少（Apache工作负载执行各种OS服务，而SPECInt主要使用内存管理）。<br><img src="https://img-blog.csdnimg.cn/20201223122642688.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjMzMzQw,size_16,color_FFFFFF,t_70#pic_center" alt="表9：操作系统对特定硬件结构的影响"></p><h2 id="3-3-结果总结"><a href="#3-3-结果总结" class="headerlink" title="3.3 结果总结"></a>3.3 结果总结</h2><p>在本节中，我们测量和分析了SMT处理器的性能，包括其操作系统对于Apache Web服务器和多程序SPECInt工作负载的性能。我们的结果表明，对于SMT，操作系统的遗漏不会导致SPECInt的性能严重错误预测，尽管对于执行相同工作负载的超标量的影响更为显著。然而，在Apache工作负载上，操作系统负责执行大部分指令。Apache在响应文件系统和内核网络代码中的系统服务上花费了大量时间，大量执行OS代码的结果是增加了更重底层资源的压力，包括缓存和BTB。内核线程也会在这些资源中引起更多的冲突，包括与其他内核线程和用户线程的冲突；另一方面，也有线程间共享的效果。Apache给处理器带来了挑战性，这可以从它在超标量上的极低吞吐量（1.1IPC）看出。SMT能够隐藏Apache的大部分延迟，使其能够实现相对于超标量处理器的4.2倍速的吞吐量改进。</p><h1 id="4-结论"><a href="#4-结论" class="headerlink" title="4 结论"></a>4 结论</h1><p>在这篇文章中，我们报告了在一个同步多线程处理器上执行操作系统的第一次测量。对于这些测量，我们修改了康柏/DEC Unix 4.0d操作系统以在SMT CPU上执行，并通过将SMT指令级模拟器集成到Alpha SimOS环境中来执行操作系统及其应用程序。结果表明<br>1.对于SEPCInt95工作负载，模拟操作系统不会显著影响SMT的总体性能，尽管操作系统的执行会对超标量产生影响。<br>2.Apache大部分时间都花在操作系统内核上，执行文件系统和网络操作。<br>3.Apache os密集型的工作负载对处理器来说压力很大，与SPECInt相比，这会导致缓存丢失率显著增加。<br>4.从我们对冲突缺失的详细分析来看，SMT上的内核线程之间存在显著的干扰，因为SMT可以同时执行来自多个内核线程的指令。另一方面，存在从合作共享中获益的机会，正如我们在线程间预取分析中所展示的那样。<br>5.总的来说，操作系统代码在超标量上导致较差的指令吞吐量，这对Apache Web服务器有很大的影响，它的IPC仅为1.1。<br>6.SMT的延迟容忍能够补偿操作系统代码的许多要求，在执行Apache时，SMT的吞吐量比超标量高了四倍，这是迄今为止SMT工作负载的最高相对收益。<br>最后，我们展示了将支持SMP的操作系统修改为在同步多线程处理器上执行相对简单。未来，我们打算对操作系统结构进行实验，以优化操作系统以适应SMT的特殊特性。</p>]]></content>
      
      
      <categories>
          
          <category> 阅读 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>大数运算</title>
      <link href="2021/04/11/%E7%AE%97%E6%B3%95%E9%A2%98%E8%A7%A3_todo(1)/%E5%A4%A7%E6%95%B0%E8%BF%90%E7%AE%97/"/>
      <url>2021/04/11/%E7%AE%97%E6%B3%95%E9%A2%98%E8%A7%A3_todo(1)/%E5%A4%A7%E6%95%B0%E8%BF%90%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<p>高精度整数：使用vector/数组存储每一位数字</p><p>高精度加法/乘法：模拟加法和乘法的过程</p><p>示例：</p><span id="more"></span><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加法</span></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">add</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; n, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n.size() &lt; m.size()) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp = n;</span><br><span class="line">        n = m;</span><br><span class="line">        m = temp;</span><br><span class="line">        temp.clear();</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::size_type i = <span class="number">0</span>; i != m.size(); i++) &#123;</span><br><span class="line">        n[i] += m[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::size_type i = <span class="number">0</span>; i != n.size(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n[i] &gt; <span class="number">9</span>) &#123;</span><br><span class="line">            n[i] %= <span class="number">10</span>;</span><br><span class="line">            n[i + <span class="number">1</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n[n.size() - <span class="number">1</span>] &gt; <span class="number">9</span>) &#123;</span><br><span class="line">        n[n.size() - <span class="number">1</span>] %= <span class="number">10</span>;</span><br><span class="line">        n.push_back(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    m.clear();</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法题解 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第8章 线性时间排序</title>
      <link href="2021/04/10/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA_todo(4)/%E7%AC%AC8%E7%AB%A0%20%E7%BA%BF%E6%80%A7%E6%97%B6%E9%97%B4%E6%8E%92%E5%BA%8F/"/>
      <url>2021/04/10/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA_todo(4)/%E7%AC%AC8%E7%AB%A0%20%E7%BA%BF%E6%80%A7%E6%97%B6%E9%97%B4%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>归并排序、堆排序、快速排序各元素的次序依赖于它们之间的比较，称为比较排序。</p><h2 id="排序算法的下界"><a href="#排序算法的下界" class="headerlink" title="排序算法的下界"></a>排序算法的下界</h2><p><strong>决策树模型</strong></p><p>一个完全二叉树，可以表示在给定输入规模情况下，某一特定排序算法对所有元素的比较操作</p><span id="more"></span><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210331154254.png" alt="image-20210331154245815"></p><p><strong>最坏情况的下界</strong></p><p>在决策树中，从根节点到任意一个可达叶结点之间的最长简单路径长度，表示的是对应的排序算法中最坏情况下的比较次数。</p><p>定理：在最坏情况下，任何比较排序算法都需要做$\Omega(n\lg n)$次比较</p><p>排序的稳定性：相等元素排序前后顺序不变</p><p>稳定：插入排序、归并排序</p><p>不稳定：堆排序、快速排序</p><h2 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h2><p>n个0到k的输入元素，k=O(n)时，运行时间$\Theta(n)$</p><p>每输入一个元素x，确定小于x的元素个数，从而找到其在输出数组中的位置</p><p>伪代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">COUNTING-SORT(A,B,k)</span><br><span class="line">let C[0...k] be a new array</span><br><span class="line">for i &#x3D; 0 to k</span><br><span class="line">C[i] &#x3D; 0</span><br><span class="line">    for j &#x3D; 1 to A.length</span><br><span class="line">    C[A[j]] &#x3D; C[A[j]] + 1</span><br><span class="line">    &#x2F;&#x2F; C[i] now contains the number of elements equal to i</span><br><span class="line">    for i &#x3D; 1 to k</span><br><span class="line">    C[i] &#x3D; C[i] + C[i-1]</span><br><span class="line">    &#x2F;&#x2F; C[i] now contains the number of elements less or equal to i</span><br><span class="line">    for j &#x3D; A.lenght downto 1</span><br><span class="line">    &#x2F;&#x2F; 这里不太理解为什么要从后往前，从前往后应该不会影响结果</span><br><span class="line">    B[C[A[j]]] &#x3D; A[j]</span><br><span class="line">    C[A[j]] &#x3D; C[A[j]] - 1</span><br></pre></td></tr></table></figure><p>java程序及运行结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">int</span>[] A = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">30</span>];</span><br><span class="line">    <span class="keyword">int</span>[] B = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">30</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">        A[i] = (<span class="keyword">int</span>)(Math.random()*k);</span><br><span class="line">    &#125;</span><br><span class="line">    countingsort(A, B, k);</span><br><span class="line">    System.out.println(Arrays.toString(A));</span><br><span class="line">    System.out.println(Arrays.toString(B));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">countingsort</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span>[] B, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] C = <span class="keyword">new</span> <span class="keyword">int</span>[k];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; A.length; j++) &#123;</span><br><span class="line">        C[A[j]] = C[A[j]] + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; k; i++) &#123;</span><br><span class="line">        C[i] += C[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = A.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        B[C[A[i]] - <span class="number">1</span>] = A[i];</span><br><span class="line">        C[A[i]] = C[A[i]] - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210410135122.png" alt="image-20210410135115533"></p><h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><p>一种用在卡片排序机上的算法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RADIX-SORT(A,d)</span><br><span class="line">for i &#x3D; 1 to d</span><br><span class="line">use a stable sort to sort array A on digit i</span><br></pre></td></tr></table></figure><h2 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h2><p>将[0,1)区间划分为n个相同大小的子区间，或称为桶，然后将n个输入数分别放到各个桶中，然后，将n个输入数分别放到各个桶中。先对各个桶中的数进行排序，然后遍历每个桶，按照次序把各个桶中的元素列出来即可。（需要元素是均匀分布的，防止一个桶里面的元素太多）</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210410135732.png" alt="image-20210410135732520"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;Double&gt; <span class="title">bucketsort</span><span class="params">(<span class="keyword">double</span>[] A)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = A.length;</span><br><span class="line">    List&lt;Double&gt;[] B = <span class="keyword">new</span> List[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        B[i] = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        B[ (<span class="keyword">int</span>)(n * A[i]) ].add(A[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        Collections.sort(B[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    ArrayList&lt;Double&gt; ret = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Double j : B[i]) &#123;</span><br><span class="line">            ret.add(j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法导论 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第9章 中位数和顺序统计量</title>
      <link href="2021/04/10/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA_todo(4)/%E7%AC%AC9%E7%AB%A0-%E4%B8%AD%E4%BD%8D%E6%95%B0%E5%92%8C%E9%A1%BA%E5%BA%8F%E7%BB%9F%E8%AE%A1%E9%87%8F/"/>
      <url>2021/04/10/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA_todo(4)/%E7%AC%AC9%E7%AB%A0-%E4%B8%AD%E4%BD%8D%E6%95%B0%E5%92%8C%E9%A1%BA%E5%BA%8F%E7%BB%9F%E8%AE%A1%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="最小值和最大值"><a href="#最小值和最大值" class="headerlink" title="最小值和最大值"></a>最小值和最大值</h2><p>为了确定最小值/最大值，必须要进行n-1次比较</p><p>同时找到最大值/最小值，总的比较次数为至多是$3\lfloor n/2\rfloor$</p><p>方法：对输入元素成对处理，大的和最大值比，小的和最小值比</p><span id="more"></span><h2 id="期望为线性时间的选择算法"><a href="#期望为线性时间的选择算法" class="headerlink" title="期望为线性时间的选择算法"></a>期望为线性时间的选择算法</h2><p>返回数组A[p,r]中第i小的元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">RANDOMIZED-SELECT (A,p,r,i)</span><br><span class="line">if p &#x3D;&#x3D; r</span><br><span class="line">return A[p]</span><br><span class="line">q &#x3D; RANDOMIZED-PARTITION (A,p,r)</span><br><span class="line">k &#x3D; q - p + 1</span><br><span class="line">if i &#x3D;&#x3D; k</span><br><span class="line">return A[q]</span><br><span class="line">else if i &lt; k</span><br><span class="line">return RANDOMIZED-SELECT (A,p,q-1,i)</span><br><span class="line">else return RANDOMIZED-SELECT (A,q+1,r,i-k)</span><br></pre></td></tr></table></figure><h2 id="最坏情况为线性时间的选择算法"><a href="#最坏情况为线性时间的选择算法" class="headerlink" title="最坏情况为线性时间的选择算法"></a>最坏情况为线性时间的选择算法</h2><ol><li>将输入数组的n个元素划分为$\lceil n/5\rceil$组，每组5个元素，且至多只有一组由剩下的不足5个元素组成。</li><li>寻找这$\lceil n/5\rceil$组中每一组的中位数，首先对每组元素进行插入排序，然后确定每组有序元素中位数。</li><li>对第2步找出的$\lceil n/5\rceil$个中位数，递归调用SELECT以找出其中位数x（如果有偶数个中位数，为了方便，约定x是较小的数）</li><li>利用修改过的PARTITION版本，递归调用SELECT以找出其中位数x对输入数组进行划分。让k比划分的低区中的元素数目多1，因此x是第k小的元素，并且有n-k个元素在划分的高区。</li><li>如果i=k，则返回x，如果i<k，则在低区递归调用SELECT来找出第i小的元素。如果i>k，则在高区递归查找第i-k小的元素。</li></ol><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210410140135.png" alt="image-20210410140135127"></p>]]></content>
      
      
      <categories>
          
          <category> 算法导论 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第4章 存储器层次结构</title>
      <link href="2021/04/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84_todo/%E7%AC%AC4%E7%AB%A0-%E5%AD%98%E5%82%A8%E5%99%A8%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84/"/>
      <url>2021/04/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84_todo/%E7%AC%AC4%E7%AB%A0-%E5%AD%98%E5%82%A8%E5%99%A8%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h2 id="存储系统的基本知识"><a href="#存储系统的基本知识" class="headerlink" title="存储系统的基本知识"></a>存储系统的基本知识</h2><p>存储器的特性：</p><ul><li><p>速度越快，每位价格就越高</p></li><li><p>容量大，价格低</p></li><li><p>容量越大，速度越慢</p></li></ul><span id="more"></span><p>采用多种存储器技术，构成多级存储器结构层次，依据：局部性原理</p><p>两种层次结构：</p><p>Cache-主存：弥补主存速度的不足</p><p>主存-辅存：弥补主存容量不足</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210409102940.png" alt="image-20210409102940071"></p><p>四个问题：</p><ol><li>当把一个块调入高一层（靠近CPU）存储器时，可以放在哪些位置上？（映像规则）</li><li>当所要访问的块再高一层存储器中时，如何找到该块？（查找方法）</li><li>当发生不命中时，应替换哪一块？（替换算法）</li><li>当进行写访问时，应进行哪些操作？（写策略）</li></ol><h2 id="Cache基本知识"><a href="#Cache基本知识" class="headerlink" title="Cache基本知识"></a>Cache基本知识</h2><p>Cache是按块进行管理的，Cache和主存均被分割成大小相同的块。信息以块为单位调入Cache。</p><p>块地址+块内位移</p><p><em>映像规则</em></p><ul><li>全相联映像：主存中任一块可以被放置到Cache中的任意一个位置</li><li>直接映像：主存中的每一块只能被放置到Cache中唯一的一个位置</li><li>组相联映像：主存中的每一块可以被放置到Cache中唯一一个组的任何一个位置</li></ul><p><em>查找方法</em></p><p>通过查找目录表实现，在Cache中有一个目录表，该表共有M项，每一项对应于cache中的一个块，用于指出当前该块的信息是哪个主存块的。</p><p><em>替换算法</em></p><p>直接映像别无选择，组相联和全相联Cache中，则有多个块可供选择，主要的算法有三种：</p><ol><li>随机发</li><li>先进先出法FIFO</li><li>最近最少使用法LRU</li></ol><p><em>写策略</em></p><ul><li>写直达法：执行“写”操作时，不仅写入Cache，而且也写入下一级存储器。</li><li>写回法：执行“写”操作时，只写入Cache。仅当Cache中相应的块被替换时，才写回主存。</li></ul><h2 id="缓存性能分析"><a href="#缓存性能分析" class="headerlink" title="缓存性能分析"></a>缓存性能分析</h2><p>命中率H和不命中率F</p><p>平均访问时间$T_A$</p><p>CPU执行时间</p><h2 id="6种基本的缓存优化方法"><a href="#6种基本的缓存优化方法" class="headerlink" title="6种基本的缓存优化方法"></a>6种基本的缓存优化方法</h2><p>平均访问时间 = 命中时间 + 缺失率 * 缺失代价</p><p>可以从三个方面改进Cache性能：</p><ul><li>降低缺失率</li><li>减少缺失代价</li><li>减少Cache命中时间</li></ul><p>三种类型的缺失（3C）</p><ul><li>强制性缺失：当第一次访问一个块时，该块不在Cache中，需从下一级存储器中调入Cache。</li><li>容量缺失：如果程序执行所需的块不能全部调入Cache中，则当某些块被替换后，若又被重新访问，就会发生缺失。</li><li>冲突缺失：在组相联或直接映像中，若太多的块映像到同一组（块）中，则会出现该组中某个块被别的块替换，然后又被重新访问的情况。</li></ul><p><em>方法</em></p><p>降低缺失率</p><ul><li>增加Cache块的大小</li><li>增加Cache的容量</li><li>提高相联度</li></ul><p>降低缺失代价</p><ul><li>采用多级Cache</li><li>使读取缺失的优先级高于写入缺失</li></ul><p>缩短命中时间</p><ul><li>避免在索引Cache期间进行地址转换</li></ul><h2 id="10种高级的缓存优化方法"><a href="#10种高级的缓存优化方法" class="headerlink" title="10种高级的缓存优化方法"></a>10种高级的缓存优化方法</h2><p>分为五类</p><ul><li>缩短命中时间<ul><li>容量小、结构简单的第一级Cache以缩短命中时间降低功耗</li><li>采用路预测缩短命中时间</li></ul></li><li>增加缓存带宽<ul><li>实现缓存访问流水化</li><li>采用无阻塞Cache</li><li>采用多组Cache</li></ul></li><li>降低缺失代价<ul><li>关键字有限和提前启动</li><li>合并写缓冲区</li></ul></li><li><p>降低缺失率</p><ul><li>采用编译器优化</li></ul></li><li><p>通过并行降低缺失代价或缺失率</p><ul><li>对指令和数据进行硬件预取</li><li>用编译器控制预取</li></ul></li></ul><h2 id="存储器技术"><a href="#存储器技术" class="headerlink" title="存储器技术"></a>存储器技术</h2><p>对存储器的性能度量同时强调延迟和带宽</p><p>采用DRAM作为主存储器，采用SRAM作为缓存，在处理器芯片内集成一到三级缓存</p><h2 id="虚拟存储器和虚拟机"><a href="#虚拟存储器和虚拟机" class="headerlink" title="虚拟存储器和虚拟机"></a>虚拟存储器和虚拟机</h2><p>虚拟存储器是“主存-辅存”层次进一步发展的结果</p><p>可以分为页式和段式</p><p>映像规则：全相联</p><p>查找算法：页表、段表、TLB</p><p>替换算法：最近最少使用LRU</p><p>写策略：写回法</p>]]></content>
      
      
      <categories>
          
          <category> 计算机体系结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>软件工程 第8章 面向对象建模</title>
      <link href="2021/04/03/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B-%E7%AC%AC8%E7%AB%A0-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%BB%BA%E6%A8%A1/"/>
      <url>2021/04/03/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B-%E7%AC%AC8%E7%AB%A0-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%BB%BA%E6%A8%A1/</url>
      
        <content type="html"><![CDATA[<p>面向对象方法已经成为主流的软件开发方法，UML也成为主流的面向对象建模语言。在面向对象的开发过程中会从不同的视角建立多种不同的模型。</p><h2 id="用况建模"><a href="#用况建模" class="headerlink" title="用况建模"></a>用况建模</h2><p>用况建模是用于描述一个系统应该做什么的建模技术，用况建模不仅用新系统的需求来获取，还可用于已有系统的升级。</p><span id="more"></span><p>主要目标：</p><ul><li>确定和描述系统的功能要求</li><li>给出清晰和一致的关于系统做什么的描述</li><li>为验证系统所需要的测试提供基准</li><li>提供从功能需求到系统的实际类和操作的跟踪能力</li></ul><p><strong>用况建模步骤</strong></p><ol><li>确定执行者</li><li>确定用况</li><li>描述用况</li><li>定义用况之间的关系</li><li>确认模型</li></ol><p><strong>确定执行者</strong></p><p><strong>确定用况</strong></p><p><strong>用况描述</strong></p><p><strong>用况图中的关系</strong></p><p><strong>案例说明</strong></p><p><strong>用况建模实例</strong></p><h2 id="静态建模"><a href="#静态建模" class="headerlink" title="静态建模"></a>静态建模</h2><p>静态模型描述系统中包含的类以及类之间的关系，展示了软件系统的静态结构。可以用UML类图和对象图描述。</p><p><strong>类图和对象图</strong></p><p><strong>CRC技术</strong></p><p>一种标识类的技术，类-责任-协作者技术，一组表示类的索引卡片。</p><p><strong>类之间的关系</strong></p><ul><li>关联</li><li>依赖</li><li>泛化</li><li>实现</li></ul><p><strong>静态建模实例</strong></p><h2 id="动态建模"><a href="#动态建模" class="headerlink" title="动态建模"></a>动态建模</h2><p>动态建模用来描述系统的动态行为，显示对象在系统运行期间不同时刻的动态交互，UML中用状态机图、活动图、顺序图、通信图和协作图来建立动态模型。</p><p><strong>状态机图</strong></p><p>通常是对类描述的补充，说明该类的对象所有可能状态，以及哪些事件将导致状态改变。</p><p><strong>活动图</strong></p><p>展示整个计算步骤控制流的结点和流程的图。</p><p><strong>顺序图</strong></p><p>描述对象之间的交互行为。</p><p><strong>通信图</strong></p><p>展示了围绕着组合结构的各个部分或协作的各角色而组织的一种交互。顺序图清晰地展示了是时间顺序，通信图清晰地展示了对象间的关系。</p><p><strong>动态建模实例</strong></p><h2 id="物理体系结构建模"><a href="#物理体系结构建模" class="headerlink" title="物理体系结构建模"></a>物理体系结构建模</h2><p>物理体系结构涉及系统的详细描述（根据系统所包含的硬件和软件），显示了硬件的结构，包括不同的结点和结点之间如何连接，还表示了代码模块的物理结构和依赖关系，并展示了对进程、程序、构件等软件在运行时的物理分配。</p><p><strong>构件图</strong></p><p>显示构件类型的定义、内部结构和依赖。</p><p><strong>部署图</strong></p><p>展示了运行时处理结点和在结点上生存的制品的配置。</p>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>软件工程 第5章 结构化分析与设计</title>
      <link href="2021/04/01/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B-%E7%AC%AC5%E7%AB%A0-%E7%BB%93%E6%9E%84%E5%8C%96%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/"/>
      <url>2021/04/01/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B-%E7%AC%AC5%E7%AB%A0-%E7%BB%93%E6%9E%84%E5%8C%96%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<p>结构化分析（SA）、结构化设计（SD）、结构化程序设计（SP）构成了完整的结构化方法</p><h2 id="结构化分析方法的概述"><a href="#结构化分析方法的概述" class="headerlink" title="结构化分析方法的概述"></a>结构化分析方法的概述</h2><p>以数据流为中心构建软件的分析模型和设计模型</p><p>抽象、分解</p><span id="more"></span><p>结构化分析的过程：</p><ol><li>理解当前的现实环境，获得当前系统的具体模型（物理模型）</li><li>从当前系统的具体模型抽象出当前系统的逻辑模型</li><li>分析目标系统和当前系统逻辑上的差别，建立目标系统的逻辑模型</li><li>为目标系统的逻辑模型作补充</li></ol><p>描述形式：</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210517220415.png" alt="结构化分析模型的描述形式"></p><h2 id="数据流图（DFD）"><a href="#数据流图（DFD）" class="headerlink" title="数据流图（DFD）"></a>数据流图（DFD）</h2><p><strong>数据流图的图形表示</strong></p><p>基本元素：数据流、加工、文件、源或宿</p><p>扩充符号：与、或、异或</p><p>层次结构：一张图5~9个加工</p><p><strong>分层数据流的画法</strong></p><ol><li>画出系统输入输出</li><li>画出系统内部</li><li>画出加工内部</li><li>重复3，直到每个尚未分解的加工都足够简单</li></ol><h2 id="分层数据流图的审查"><a href="#分层数据流图的审查" class="headerlink" title="分层数据流图的审查"></a>分层数据流图的审查</h2><p><strong>分层数据流图的一致性和完整性</strong></p><p><strong>构造分层DFD时需要注意的问题</strong></p><p><strong>分解的程度</strong></p><h2 id="数据字典"><a href="#数据字典" class="headerlink" title="数据字典"></a>数据字典</h2><p>数据流图和数据字典结合起来构成软件的逻辑模型（分析模型）</p><p><strong>字典条目的种类及描述符号</strong></p><p><strong>字典条目</strong></p><p>DFD中每个元素对应一个数据字典的描述</p><p><strong>字典条目实例</strong></p><h2 id="描述基本加工的小说明"><a href="#描述基本加工的小说明" class="headerlink" title="描述基本加工的小说明"></a>描述基本加工的小说明</h2><p>DFD的每个基本加工都用一条小说明进行描述，小说明就是基本加工的加工规约</p><p><strong>结构化语言</strong></p><p>一种介于自然语言和形式语言之间的一种半形式语言。</p><p><strong>判定表</strong></p><p>描述加工逻辑包含多个条件，而不同的条件组合需做不同的动作。</p><p><strong>判定树</strong></p><p>判定表的变种</p><h2 id="结构化设计概述"><a href="#结构化设计概述" class="headerlink" title="结构化设计概述"></a>结构化设计概述</h2><p>结构化设计是将结构化分析得到的数据流图映射成软件体系结构的一种设计方法。</p><p>概要设计是对软件系统的总体设计，采用结构化设计方法；</p><p>详细设计是对模块实现细节的设计，采用结构化程序设计方法。</p><p><strong>结构图</strong></p><p>描述软件系统的体系结构，指出一个软件系统由哪些模块组成，以及模块之间的调用关系。</p><p><strong>启发式设计策略</strong></p><p><strong>结构化设计的步骤</strong></p><ol><li>建立初始结构图</li><li>对结构图改进</li><li>书写设计文档</li><li>设计评审</li></ol><h2 id="数据流图到软件体系结构的映射"><a href="#数据流图到软件体系结构的映射" class="headerlink" title="数据流图到软件体系结构的映射"></a>数据流图到软件体系结构的映射</h2><p>结构化设计是将结构化分析的结果（数据流图）映射成软件的体系结构（结构图）。</p><p><strong>信息流</strong></p><p>变换流和事务流</p><p><strong>数据流图映射到结构图的步骤</strong></p><p><strong>变换分析</strong></p><p><strong>事务分析</strong></p><p><strong>分层DFD的映射</strong></p><h2 id="初始结构图的改进"><a href="#初始结构图的改进" class="headerlink" title="初始结构图的改进"></a>初始结构图的改进</h2><p><strong>结构图改进实例</strong></p><p><strong>结构图改进技巧</strong></p>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>软件工程 第4章 设计工程</title>
      <link href="2021/04/01/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B-%E7%AC%AC4%E7%AB%A0-%E8%AE%BE%E8%AE%A1%E5%B7%A5%E7%A8%8B/"/>
      <url>2021/04/01/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B-%E7%AC%AC4%E7%AB%A0-%E8%AE%BE%E8%AE%A1%E5%B7%A5%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="软件设计工程概述"><a href="#软件设计工程概述" class="headerlink" title="软件设计工程概述"></a>软件设计工程概述</h2><p>软件设计过程解决怎么做的问题，是把软件需求变换成软件表示的过程。</p><p><strong>软件设计的任务</strong></p><p>输入是软件分析模型，软件分析模型中通过数据、功能和行为模型所展示的软件信息被传送给设计阶段，产生数据/类设计、体系结构设计、接口设计、部件级设计。</p><span id="more"></span><p><strong>软件设计的目标</strong></p><ul><li>设计必须实现分析模型中描述的所有显示需求，必须满足用户希望的所有隐式需求</li><li>设计必须是可读、可理解的，使得将来易于编程、易于测试、易于维护</li><li>设计应从实现角度出发，给出与数据、功能、行为相关的软件全貌</li></ul><p><strong>软件设计的过程</strong></p><p>把一个软件需求变换成软件表示的过程，通常的软件设计过程分为：</p><ol><li>制定规范</li><li>体系结构和接口设计</li><li>数据/类设计</li><li>部件级（过程）设计</li><li>编写设计文档</li><li>设计评审</li></ol><h2 id="软件设计原则"><a href="#软件设计原则" class="headerlink" title="软件设计原则"></a>软件设计原则</h2><p><strong>抽象与逐步求精</strong></p><p><strong>模块化</strong></p><p>把软件按照规定原则，划分为一个个较小的，相互独立的但又互相关联的部件</p><p><strong>信息隐藏</strong></p><p>每个模块的实现细节对于其他模块来说应该是隐蔽的</p><p><strong>功能独立</strong></p><p>模块实现独立的功能并且与其他模块的接口简单，符合信息隐藏，模块间关联和依赖程度尽可能小</p><h2 id="软件体系结构设计"><a href="#软件体系结构设计" class="headerlink" title="软件体系结构设计"></a>软件体系结构设计</h2><p>软件体系结构关注系统的一个或多个结构，包含软件部件、这些部件的对外可见的性质以及它们之间的关系。</p><p><strong>体系结构的发展过程</strong></p><p><strong>软件体系结构的风格</strong></p><ul><li>数据为中心的体系结构</li><li>数据流为中心的体系结构</li><li>调用和返回风格的体系结构</li><li>面向对象风格的体系结构</li></ul><p><strong>评估可选的体系结构</strong></p><h2 id="部件级设计技术"><a href="#部件级设计技术" class="headerlink" title="部件级设计技术"></a>部件级设计技术</h2><p>编码的先导，主要完成：</p><ol><li>为每个部件确定采用的算法，选择某种适当的工具表达算法的过程，编写部件的详细过程性描述</li><li>确定每一部件内部使用的数据结构</li><li>在部件级设计结束时，应该把上述结果写入部件级设计说明书，并且通过复审形程正式文档，作为下一阶段（编码阶段）的工作依据</li></ol><p><strong>结构化程序设计方法</strong></p><p><strong>图形表示法</strong></p><ul><li>程序流程图</li><li>N-S图</li><li>PAD</li></ul><p><strong>判定表</strong></p><p>用于处理多重嵌套选择</p><p><strong>设计语言PDL</strong></p><p>一种描述功能部件的算法设计和处理细节的语言</p><h2 id="设计规约与设计评审"><a href="#设计规约与设计评审" class="headerlink" title="设计规约与设计评审"></a>设计规约与设计评审</h2><p>设计规约是软件设计阶段的主要输出，为了确保质量，还需要进行设计评审</p><p><strong>设计规约</strong></p><p><strong>设计评审</strong></p>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>软件工程 第3章 需求工程</title>
      <link href="2021/04/01/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B-%E7%AC%AC3%E7%AB%A0-%E9%9C%80%E6%B1%82%E5%B7%A5%E7%A8%8B/"/>
      <url>2021/04/01/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B-%E7%AC%AC3%E7%AB%A0-%E9%9C%80%E6%B1%82%E5%B7%A5%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="需求工程概述"><a href="#需求工程概述" class="headerlink" title="需求工程概述"></a>需求工程概述</h2><p>需求工程是一个不断反复的需求定义、文档记录、需求演进的过程，并最终在验证的基础上冻结需求。</p><h2 id="需求获取"><a href="#需求获取" class="headerlink" title="需求获取"></a>需求获取</h2><p><strong>软件需求</strong></p><p>包括功能需求、性能需求等</p><span id="more"></span><p><strong>需求获取方法与策略</strong></p><h2 id="需求分析、协商与建模"><a href="#需求分析、协商与建模" class="headerlink" title="需求分析、协商与建模"></a>需求分析、协商与建模</h2><p><strong>需求分析原则</strong></p><p><strong>信息域</strong></p><p>信息域包括信息内容、信息流以及信息结构</p><p><strong>需求协商</strong></p><p><strong>需求建模</strong></p><h2 id="需求规约与验证"><a href="#需求规约与验证" class="headerlink" title="需求规约与验证"></a>需求规约与验证</h2><p>需求分析的输出就是需求规约</p><p><strong>需求规约的原则</strong></p><p><strong>需求规约</strong></p><p>需求规约通过建立完整的信息描述、详细的功能和行为描述、性能需求和设计约束的说明、合适的验收标准，给出对目标软件的各种需求</p><p><strong>需求验证</strong></p><p>检验需求是否能够反映用户的意愿</p><h2 id="需求管理"><a href="#需求管理" class="headerlink" title="需求管理"></a>需求管理</h2><p>一组用于帮助项目组在项目进展中的任何时候去标识、控制和跟踪需求的活动</p>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>关系数据库的规范化设计</title>
      <link href="2021/03/30/%E6%95%B0%E6%8D%AE%E5%BA%93_todo(1)/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%A7%84%E8%8C%83%E5%8C%96%E8%AE%BE%E8%AE%A1/"/>
      <url>2021/03/30/%E6%95%B0%E6%8D%AE%E5%BA%93_todo(1)/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%A7%84%E8%8C%83%E5%8C%96%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="关系模式的设计问题"><a href="#关系模式的设计问题" class="headerlink" title="关系模式的设计问题"></a>关系模式的设计问题</h2><h3 id="关系模型的外延和内涵"><a href="#关系模型的外延和内涵" class="headerlink" title="关系模型的外延和内涵"></a><strong>关系模型的外延和内涵</strong></h3><ul><li>外延：关系、表或当前值</li><li>内涵：对数据的定义以及数据完整性约束（静态约束和动态约束）的定义</li></ul><span id="more"></span><h3 id="模式冗余和异常问题"><a href="#模式冗余和异常问题" class="headerlink" title="模式冗余和异常问题"></a><strong>模式冗余和异常问题</strong></h3><p>数据的冗余可能会引起操作异常（修改异常、插入异常、删除异常）</p><h3 id="关系模式的非形式化设计准则"><a href="#关系模式的非形式化设计准则" class="headerlink" title="关系模式的非形式化设计准则"></a><strong>关系模式的非形式化设计准则</strong></h3><ol><li>应尽可能只包含有直接联系的属性</li><li>应尽可能使得相关关系中不出现插入、删除和修改操作异常现象</li><li>应尽可能使得相应关系中避免放置尽可能为空值的属性</li><li>尽可能使得关系的等值连接在主键和外键属性上</li></ol><h3 id="符号规定"><a href="#符号规定" class="headerlink" title="符号规定"></a><strong>符号规定</strong></h3><p>单个属性：A，B，C</p><p>属性集：U，V，W，X，Y，Z</p><p>关系模式：R，S，T</p><p>关系：r，s，t</p><h2 id="函数依赖"><a href="#函数依赖" class="headerlink" title="函数依赖"></a>函数依赖</h2><h3 id="函数依赖（FD）的定义"><a href="#函数依赖（FD）的定义" class="headerlink" title="函数依赖（FD）的定义"></a><strong>函数依赖（FD）的定义</strong></h3><p>关系模式R（U），X和Y是属性集U的子集，函数依赖是形为X-&gt;Y的一个命题，只要r是R的当前关系，对r中任意两个元组t和s，都有t[X] = s[X]蕴含t[Y] = s[Y]，那么称FD X -&gt; Y在关系模式R（U）中成立</p><h3 id="FD的逻辑蕴含"><a href="#FD的逻辑蕴含" class="headerlink" title="FD的逻辑蕴含"></a><strong>FD的逻辑蕴含</strong></h3><p>定义：设F是在关系模式R上成立的函数依赖的集合，X$\rightarrow $Y是一个函数依赖。如果对于R的每个满足F的关系r也满足X$\rightarrow$Y，那么称F逻辑蕴含X$\rightarrow$Y，记为F逻辑蕴涵X$\rightarrow$Y。记为$F\models X\rightarrow Y$</p><p>定义：设F是函数依赖集，被F逻辑蕴含的函数依赖全体构成的集合，称为函数依赖集F的闭包，记为$F^+$</p><p>即$F^+=\{ X\rightarrow Y|记为F|=X\rightarrow Y \}$</p><h3 id="FD的推理规则"><a href="#FD的推理规则" class="headerlink" title="FD的推理规则"></a><strong>FD的推理规则</strong></h3><p>U是关系模式R中的属性集，F是R上成立的只涉及U中属性的函数依赖集，FD的推理规则有以下三条：</p><p>A1 自反性 $若Y\subseteq X \subseteq U,则X\rightarrow Y在R上成立$</p><p>A2 增广性 $若X\rightarrow Y,且Z\subseteq U,则XZ\rightarrow YZ在R上成立$</p><p>A3 传递性 $若X \rightarrow Y,Y \rightarrow Z,则 X\rightarrow Z在R上成立$</p><p>其他五条规则</p><p>A4 合并性  $\lbrace X\rightarrow Y,X \rightarrow Z \rbrace \models X \rightarrow YZ $</p><p>A5 分解性 $\lbrace X \rightarrow Y,Z \subseteq Y \rbrace \models X \rightarrow Z$</p><p>A6 伪传递性 $\lbrace X \rightarrow Y, WY \rightarrow Z \rbrace \models WX \rightarrow Z$</p><p>A7 复合性 $\lbrace X \rightarrow Y, W \rightarrow Z \rbrace \models XW \rightarrow YZ$</p><p>A8  $\lbrace X \rightarrow Y, W \rightarrow Z \rbrace \models X\bigcup (W - Y) \rightarrow YZ$</p><p>平凡的FD、非平凡的FD</p><h3 id="FD和关键码的联系"><a href="#FD和关键码的联系" class="headerlink" title="FD和关键码的联系"></a><strong>FD和关键码的联系</strong></h3><p>超键和候选键</p><p>定义：</p><ul><li>设关系模式R的属性集是U，X是U的一个子集。如果X$\rightarrow$U在R上成立，那么称X是R的一个超键</li><li>如果X$\rightarrow $U在R上成立，但对于X的任一真子集$X_1$都$X_1\rightarrow U$不成立，那么称X是R上的一个候选键</li></ul><h3 id="属性集的闭包"><a href="#属性集的闭包" class="headerlink" title="属性集的闭包"></a><strong>属性集的闭包</strong></h3><p>定义：设F是属性集U上的FD集，X是U的子集，那么（相对于F）属性集X的闭包用$X^+$表示，它是一个从F集使用FD推理规则推出的所有满足X$\rightarrow$A的属性A的集合：$X^+=\{属性A|X\rightarrow A在F^+中\}$</p><p>定理：$X\rightarrow Y$能用FD推理规则推出的充分必要条件是$Y\subseteq X^+$</p><h3 id="FD推理规则的完备性"><a href="#FD推理规则的完备性" class="headerlink" title="FD推理规则的完备性"></a><strong>FD推理规则的完备性</strong></h3><p>正确性：从FD集F使用推理规则集推出的FD必定在F+中</p><p>完备性：F+中的FD都能从F集使用推理规则导出</p><p>FD推理规则{A1,A2,A3}是完备的</p><h3 id="FD集的最小依赖集"><a href="#FD集的最小依赖集" class="headerlink" title="FD集的最小依赖集"></a><strong>FD集的最小依赖集</strong></h3><p>若F+=G+，则称F和G是等价的函数依赖集</p><p>最小依赖集Fmin</p><ol><li>$F_{min}=F^+$</li><li>每个FD的右边都是单属性</li><li>$F_{min}$中没有冗余的FD（即$F_{min}$中不存在这样的函数依赖X$\rightarrow$Y，使得$F_{min}$与$F_{min}-\{X-Y\}$）</li><li>每个FD的左边没有冗余属性（即$F_{min}$中不存在这样的函数依赖X$\rightarrow$Y，X有真子集W使得$F_{min}-\{X\rightarrow Y\}\bigcup \{ W\rightarrow Y\}与F_{min}等价$）</li></ol><h2 id="模式的分解特性"><a href="#模式的分解特性" class="headerlink" title="模式的分解特性"></a>模式的分解特性</h2><p><strong>模式分解问题</strong></p><p>定义：设有关系模式R(U)，属性集为U，R1、…、Rk都是U的子集，且它们的交为U，关系模式R1、…、Rk的集合用$\rho$表示，用$\rho$代替R的过程称为关系模式的分解。这里$\rho$称为R的一个分解，也称为数据库模式。</p><p>泛关系模式</p><p>现实问题的所有属性组成的关系模式（包括属性集和属性集上的数据完整性约束）称为泛关系模式，关系r是关系模式的当前值，是元组的集合，称为泛关系</p><div class="table-container"><table><thead><tr><th>泛关系模式</th><th>数据库模式</th></tr></thead><tbody><tr><td>R</td><td>$\rho$={R1,…,Rk}</td></tr><tr><td>r</td><td>$\sigma$=<r1,...,rk></td></tr><tr><td>泛关系</td><td>数据库实例（数据库）</td></tr><tr><td>函数依赖集F</td><td>{F1,…,Fk}</td></tr></tbody></table></div><h3 id="无损分解"><a href="#无损分解" class="headerlink" title="无损分解"></a><strong>无损分解</strong></h3><p>设R是一个关系模式，F是R上的一个FD集，R分解成数据库模式$\rho =\{R_1,…,R_k\}$</p><p>如果对R中满足F的每一个关系r，都有$r=\pi_{R_1}(r)\Join\pi_{R_1}(r)\Join…\Join\pi_{R_k}(k)$，那么称$\rho$相对于F是“无损连接分解”，否则称为“损失分解”。</p><h3 id="无损分解的测试方法"><a href="#无损分解的测试方法" class="headerlink" title="无损分解的测试方法"></a><strong>无损分解的测试方法</strong></h3><p>算法如下：</p><ol><li><p>构造一张k行n列的表格，每列对应一个属性Aj，每行对应一个模式Ri，如果Aj在Ri中，那么在表格的第i行第j列处填上符号aj，否则填上bij；</p></li><li><p>把表格看成模式R的一个关系，反复检查F中每个FD在表格中是否成立。若不成立，则修改表格中的值；</p><p>修改方法如下：如果Y值中有一个是aj，那么另一个也改成aj；如果没有aj，那么用其中一个bij替换另一个值（尽量把下表ij改成较小的数），一直到表格不能修改为止（chase过程）；</p></li><li><p>若修改的最后一张表格中有一行是全a，即a1a2…an，那么称$\rho$相对于F是无损分解，否则称为损失分解。</p></li></ol><script type="math/tex; mode=display">定理:设\rho=\{R1,R2\}是关系模式R的一个分解，F是R上成立的FD集，那么分解\rho相对于F是无损分解的充分条件是\\(R1\bigcap R2)\rightarrow (R1-R2)(或(R2-R1))</script><script type="math/tex; mode=display">定理:如果FD\,X\rightarrow Y在模式R上成立，且X\bigcap Y=\varphi，\\那么R分解成\rho=\{R-Y,XY\}是无损分解</script><h3 id="保持函数依赖的分解"><a href="#保持函数依赖的分解" class="headerlink" title="保持函数依赖的分解"></a><strong>保持函数依赖的分解</strong></h3><p>定义：设F是属性集U上的FD集，Z是U的子集，F在Z上的投影用$\pi_{z}(F)=\{X\rightarrow Y|X\rightarrow Y \in F^+，且XY \subseteq Z\}$</p><p>定义：设$\rho =\{R_1,…,R_k\}$是R是一个分解，F是R上FD集，如果有$\bigcup\pi_{R_i}(F)\models F$，那么称$\rho$保持函数依赖集F</p><h3 id="模式分解与模式等价问题"><a href="#模式分解与模式等价问题" class="headerlink" title="模式分解与模式等价问题"></a><strong>模式分解与模式等价问题</strong></h3><p>两个数据库的等价包括数据等价和依赖等价两个方面</p><ul><li>数据等价指两个数据库实例应标识同样的信息内容，用“无损分解”衡量。如果是无损分解，那么对泛关系反复的投影和连接都不会丢失信息。</li><li>依赖等价是指两个数据库模式有相同的依赖集闭包。在依赖集闭包相等的情况下，数据的语义是不会出差错的。</li></ul><h2 id="关系模式的范式"><a href="#关系模式的范式" class="headerlink" title="关系模式的范式"></a>关系模式的范式</h2><h3 id="第一范式"><a href="#第一范式" class="headerlink" title="第一范式"></a>第一范式</h3><p>定义：如果关系模式R的每个关系r的属性值都是不可分的原子值，那么称R是第一范式的模式</p><p>满足1NF的称为规范化关系，否则称为非规范化关系</p><h3 id="第二范式"><a href="#第二范式" class="headerlink" title="第二范式"></a><strong>第二范式</strong></h3><p>定义：对于FD W$\rightarrow$A，如果存在X$\subset$W有X$\rightarrow$A成立，那么称W$\rightarrow$A是局部依赖（A局部依赖于W）；否则称W$\rightarrow$A是完全依赖，完全依赖也成为“左部不可约依赖”。</p><p>定义：如果A是关系模式R的候选键中的属性，那么称A是R的主属性；否则成A是R的非主属性。</p><p>定义：如果关系模式R是1NF，且每个非主属性完全依赖于候选键，那么称R为第二范式的模式，如果每个关系模式都是2NF，那么数据库为2NF的数据库模式</p><p>分解成2NF模式集的算法：</p><p>设关系模式R(U)，主键是W，R上还存在FD X$\rightarrow$Z，并且Z是非主属性和X$\subset$W，那么W$\rightarrow$Z就是一个局部依赖，此时应把R分解成两个模式</p><p>R1(XZ)，主键是X；</p><p>R2(Y)，其中Y=U-Z，主键仍是W</p><p>如果R1和R2还不是2NF，则重复上述过程，一直到数据库模式中每一个关系模式都是2NF为止</p><h3 id="第三范式"><a href="#第三范式" class="headerlink" title="第三范式"></a><strong>第三范式</strong></h3><p>定义：如果$X\rightarrow Y,Y\rightarrow A$，且$Y\nrightarrow X$ 和$A\notin Y$，那么称$X\rightarrow A$是传递依赖（A传递依赖于X）</p><p>定义：如果关系模式R是1NF，且每个非主属性都不传递于R的候选键，那么称R是第三范式（3NF）的模式，如果数据库模式种每个关系模式都是3NF，则称其为3NF的数据库模式。</p><p>分解成3NF模式集是算法：</p><p>设关系模式R(U)，主键是W，R上还存在FD X$\rightarrow$Z，X不是候选键，这样W$\rightarrow$Z就是一个传递依赖。此时应把R分解成两个模式：</p><p>R1(XZ)，主键是X</p><p>R2(Y)，其中Y=U-Z，主键仍是W</p><p>如果还是不是3NF，则重复上述过程</p><p>定理：如果R是3NF模式，那么R也是2NF模式</p><p>定理：设关系模式R，当R上每一个FD X-&gt;A都满足下列三个条件之一时</p><ol><li>A∈X</li><li>X是R的超键</li><li>A是主属性</li></ol><p>则关系模式R就是3NF模式</p><h3 id="BCNF"><a href="#BCNF" class="headerlink" title="BCNF"></a><strong>BCNF</strong></h3><p>定义：如果关系模式R是1NF，且每个属性都不传递依赖于R的候选键，那么称R是BCNF模式。如果数据库模式中每个关系模式都是BCNF，则称为BCNF的数据库模式。</p><p>定理：如果R是BCNF模式，那么R也是3NF模式</p><p>定义：设F是关系模式R的FD集，如果对F中每个非平凡的FD X-&gt;Y，都有X是R的超键，那么称R是BCNF的模式</p><p>无损分解成BCNF模式集</p><p>对于关系模式R的分解$\rho$，初始时$\rho$={R}。如果$\rho$中有一个关系模式Ri相对于$\pi_{R_i}(F)$不是BCNF。Ri中存在一个平凡FD X$\rightarrow$Y，有X不包含超键。此时把Ri分解成XY和Ri-Y两个模式，重复上述过程，直到每个模式都是BCNF。</p><p>无损分解且保持依赖地分解成3NF模式集</p><ol><li>先求出F的最小依赖集，然后再把最小依赖集中那些左部相同的FD用合并性合并起来</li><li>对最小依赖集中，每个FD X$\rightarrow$Y去构成一个模式XY</li><li>在构成的模式集中，如果每个模式都不包含R的候选键，那么把候选键作为一个模式放入模式集中。</li></ol><p>这样得到的模式集既是无损分解，又保持了FD</p><h3 id="模式设计方法的原则"><a href="#模式设计方法的原则" class="headerlink" title="模式设计方法的原则"></a><strong>模式设计方法的原则</strong></h3><ul><li>数据库设计者在进行关系数据库的设计时，应作权衡，尽可能使数据库保持最好的特性。一般尽可能设计成BCNF模式集。如果设计成BCNF模式集时达不到FD的特点，那么只能降低要求，设计成3NF模式集，以求达到保持FD和无损分解的特点。</li><li>模式分解并不单指把泛关系模式分解成数据库模式，也可以把数据库模式转换成另一个数据库模式，分解和转换的关键是要“等价”地分解。一个好的模式设计方法应符合三条原则：表达性、分离性和最小冗余性。</li></ul><h2 id="模式的进一步规范化处理"><a href="#模式的进一步规范化处理" class="headerlink" title="模式的进一步规范化处理"></a>模式的进一步规范化处理</h2><p>FD还不足以描绘现实世界中数据之间的全部联系，有些联系就要用其他数据来刻画，例如多值依赖或连接依赖。</p><h3 id="多值依赖的定义"><a href="#多值依赖的定义" class="headerlink" title="多值依赖的定义"></a>多值依赖的定义</h3><p>当有间接依赖关系时会产生</p><p>定义：设U是关系模式R的属性集，X和Y是U的子集，Z=R-X-Y，小写的xyz表示属性集XYZ的值。对于R的关系r，在r中存在元组(xy1z1)和(xy2z2)时，就也存在元组(xy2z1)和(xy1z2)，那么称多值依赖MVD X$\rightarrow\rightarrow$Y在模式R上成立。</p><h3 id="关于FD和MVD的推理规则集"><a href="#关于FD和MVD的推理规则集" class="headerlink" title="关于FD和MVD的推理规则集"></a>关于FD和MVD的推理规则集</h3><p>在有FD和MVD的情况下，也可以用chase规则判断是否无损分解</p><h3 id="第四范式"><a href="#第四范式" class="headerlink" title="第四范式"></a>第四范式</h3><p>设D是关系模式R上成立的FD和MVD集合。如果D中每个非平凡的MVD左部X都是R的超键，那么称R是4NF模式</p><p>4NF肯定是BCNF</p><h3 id="嵌入多值依赖"><a href="#嵌入多值依赖" class="headerlink" title="嵌入多值依赖"></a>嵌入多值依赖</h3><p>略</p><h3 id="连接依赖和第五范式"><a href="#连接依赖和第五范式" class="headerlink" title="连接依赖和第五范式"></a>连接依赖和第五范式</h3><p>略</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>通过模式分解把模式分解成若干较小的关系模式可以消除冗余</li><li>关系模式在分解时应该保持等价，有数据等价和语义等价两种，分别用无损分解和保持依赖衡量</li><li>范式是衡量模式优劣的标准</li><li>分解成BCNF模式集的算法能保持无损分解，但不一定保持FD集，分解成3NF两者都能保持</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第7章 快速排序</title>
      <link href="2021/03/24/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA_todo(4)/%E7%AC%AC7%E7%AB%A0%20%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
      <url>2021/03/24/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA_todo(4)/%E7%AC%AC7%E7%AB%A0%20%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="快速排序的描述"><a href="#快速排序的描述" class="headerlink" title="快速排序的描述"></a>快速排序的描述</h2><p>使用分治的思想，分成三步</p><ol><li>分解：分成A[p…q-1]和A[q+1…r]，此时A[q]已经被放在了正确的位置，A[q]：pivot</li><li>解决：通过递归调用对子数组排序</li><li>合并：因为子数组已经有序，故不需要合并操作</li></ol><span id="more"></span><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">QUICKSORT(A,p,r)</span><br><span class="line">if p &lt; r</span><br><span class="line">q &#x3D; PARTITION(A,p,r)</span><br><span class="line">QUICKSORT(A,p,q-1)</span><br><span class="line">QUICKSORT(A,q+1,r)</span><br><span class="line"></span><br><span class="line">PARTITION(A,p,r)</span><br><span class="line">x &#x3D; A[r]</span><br><span class="line">i &#x3D; p - 1</span><br><span class="line">for j &#x3D; p to r - 1</span><br><span class="line">if A[j] &lt;&#x3D; x</span><br><span class="line">i &#x3D; i + 1</span><br><span class="line">exchange A[i] with A[j]</span><br><span class="line">exchange A[i+1] with A[r]</span><br><span class="line">return i + 1</span><br></pre></td></tr></table></figure><h2 id="快速排序的性能"><a href="#快速排序的性能" class="headerlink" title="快速排序的性能"></a>快速排序的性能</h2><p>依赖于划分是否平衡，如果平衡，性能近似于归并排序；如果不平衡，性能近似于插入排序</p><ul><li><p>最坏情况划分（完全不平衡）</p><script type="math/tex; mode=display">T(n)=T(n-1)+T(0)+\Theta(n)</script><script type="math/tex; mode=display">T(n)=\Theta(n^2)</script></li></ul><ul><li>最好情况划分（完全平衡）<script type="math/tex; mode=display">T(n)=2T(n/2)+\Theta(n)</script></li></ul><script type="math/tex; mode=display">  T(n)=\Theta(n\lg n)</script><ul><li>平均情况的划分：平均情况事实上接近于最好情况（例如数组长度9：1时）</li></ul><h2 id="快速排序的随机化版本"><a href="#快速排序的随机化版本" class="headerlink" title="快速排序的随机化版本"></a>快速排序的随机化版本</h2><p>显示地对输入进行重新排列，使得算法实现随机化</p><p>在划分前进行一次交换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RANDOMIZED-PARTITION(A,p,r)</span><br><span class="line">i &#x3D; RANDOM(p,r)</span><br><span class="line">exchange A[r] with A[i]</span><br><span class="line">return PARTITION(A,p,r)</span><br></pre></td></tr></table></figure><h2 id="快速排序分析"><a href="#快速排序分析" class="headerlink" title="快速排序分析"></a>快速排序分析</h2><p><strong>最坏情况分析</strong></p><p>$O(n^2)$</p><p><strong>期望运行时间</strong></p><p>$O(n\lg n)$</p><p>证明过程略</p>]]></content>
      
      
      <categories>
          
          <category> 算法导论 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第6章 堆排序</title>
      <link href="2021/03/24/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA_todo(4)/%E7%AC%AC6%E7%AB%A0%20%E5%A0%86%E6%8E%92%E5%BA%8F/"/>
      <url>2021/03/24/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA_todo(4)/%E7%AC%AC6%E7%AB%A0%20%E5%A0%86%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>堆排序时间复杂度：$O(n\lg n)$，和归并排序一样</p><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><p>一个近似完全的二叉树</p><span id="more"></span><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210324140442.png" alt="image-20210324140441665"></p><ul><li>根节点A[1]</li><li>A[i]的父节点A[$\lfloor i/2 \rfloor$]</li><li>A[i]左子节点A[2i]</li><li>A[i]右子节点A[2i+1]</li></ul><p>最大堆：子节点小于等于父节点，根节点最大，用于堆排序</p><p>(一个叶子节点本身是一个最大堆)</p><p>最小堆：子节点大于等于父节点，根节点最小，用于构造优先级队列</p><p>n个节点的堆的高度 $\lfloor \lg n \rfloor$</p><h2 id="维护堆的性质"><a href="#维护堆的性质" class="headerlink" title="维护堆的性质"></a>维护堆的性质</h2><p>（最大堆）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">MAX-HEAPIFY(A,i) &#x2F;&#x2F; Sub-tree rooted at node i</span><br><span class="line">l &#x3D; LEFT(i)</span><br><span class="line">r &#x3D; RIGHT(i)</span><br><span class="line">if l &lt; heap-size[A] and A[l] &gt; A[i]</span><br><span class="line">then largest &#x3D; l</span><br><span class="line">else largest &#x3D; i</span><br><span class="line">    if r &lt;&#x3D; heap-size[A] and A[r] &gt; A[largest]</span><br><span class="line">    then largest &#x3D; r</span><br><span class="line">    if largest !&#x3D; i</span><br><span class="line">    then exchange A[i] and A[largest]</span><br><span class="line">    MAX-HEAPIFY(A,largest)</span><br></pre></td></tr></table></figure><h2 id="建堆"><a href="#建堆" class="headerlink" title="建堆"></a>建堆</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BUILD-MAX-HEAP(A)</span><br><span class="line"> heap-size[A] &#x3D; length[A]</span><br><span class="line"> for i &#x3D; length[A]&#x2F;2 downto 1</span><br><span class="line">  do MAX-HEAPIFY(A,i)</span><br></pre></td></tr></table></figure><p>时间代价 $O(n\lg n)$</p><h2 id="堆排序算法"><a href="#堆排序算法" class="headerlink" title="堆排序算法"></a>堆排序算法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HEAPSORT(A)</span><br><span class="line">BUILD-MAX-HEAP(A)</span><br><span class="line">for i &#x3D; length[A] downto 2</span><br><span class="line">do exchange A[1] and A[i]</span><br><span class="line">heap-size[A] &#x3D; heap-size[A] - 1</span><br><span class="line">MAX-HEAPIFY(A,1)</span><br></pre></td></tr></table></figure><p>时间代价 $O(n\lg n)$</p><h2 id="优先级队列"><a href="#优先级队列" class="headerlink" title="优先级队列"></a>优先级队列</h2><p>一种用来维护一组元素构成的集合S的数据结构，其中每个元素有一个关键字key。</p><p>（最大优先队列）支持的操作：</p><ul><li>INSERT(S, x)，把元素x插入集合S中</li><li>MAXINUM(S)，返回S中具有最大键字的元素</li><li>EXTRACT-MAX(S)，去掉并返回S中具有最大键字的元素</li><li>INCREASE-KEYS(S, x, k)，将元素x的关键字增加到k（比原来大）</li></ul><p>相应的也有最小优先队列</p>]]></content>
      
      
      <categories>
          
          <category> 算法导论 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ER模型</title>
      <link href="2021/03/23/%E6%95%B0%E6%8D%AE%E5%BA%93_todo(1)/ER%E6%A8%A1%E5%9E%8B/"/>
      <url>2021/03/23/%E6%95%B0%E6%8D%AE%E5%BA%93_todo(1)/ER%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="数据库设计概论"><a href="#数据库设计概论" class="headerlink" title="数据库设计概论"></a>数据库设计概论</h2><p>数据库生存期：</p><p>规划、需求分析、概念设计、逻辑设计、物理设计、实现、运行和维护</p><span id="more"></span><h2 id="数据库设计全过程"><a href="#数据库设计全过程" class="headerlink" title="数据库设计全过程"></a>数据库设计全过程</h2><p><strong>规划</strong></p><p>系统调查、可行性分析、确定数据库系统的总目标和制定项目开发计划</p><p><strong>需求分析</strong></p><ul><li>分析用户活动产生，产生业务流程图（TFD）</li><li>确定系统范围，产生系统范围图</li><li>分析用户活动涉及的数据，产生数据流图（DFD）</li><li>分析系统数据，产生数据字典</li></ul><p><strong>概念设计</strong></p><p>从每个用户的角度出发定义ER图，然后合并</p><p><strong>逻辑设计</strong></p><p>根据概念模式转换成逻辑模式、模式评价、修正</p><p><strong>物理设计</strong></p><ul><li>存储记录结构设计</li><li>确定数据存放位置</li><li>存取方法的设计</li><li>完整性和安全性考虑</li><li>程序设计</li></ul><p><strong>数据库实现</strong></p><ul><li>用DDL定义数据库结构</li><li>组织数据入库</li><li>编制与调试应用程序</li><li>数据库试运行<ul><li>功能测试</li><li>性能测试（时空代价）</li></ul></li></ul><p><strong>数据库的运行与维护工作</strong></p><ul><li>数据库的转储和恢复</li><li>数据库安全性、完整性控制</li><li>数据库性能的监督、分析和改进</li><li>数据库的重组织和重构造</li></ul><h2 id="ER模型"><a href="#ER模型" class="headerlink" title="ER模型"></a>ER模型</h2><p><strong>基本元素</strong>：实体、联系、属性、例子</p><p><strong>属性分类</strong></p><p>基本属性和复合属性</p><p>单值属性和多值属性</p><h2 id="ER模型到关系模型的转换"><a href="#ER模型到关系模型的转换" class="headerlink" title="ER模型到关系模型的转换"></a>ER模型到关系模型的转换</h2><p>将每个实体类型转换成一个关系模式，实体的属性即为关系模式的属性，实体标识符即为关系模式的键。</p><p>二元联系关系的转换：</p><ul><li>实体联系1：1：可以在两个实体类型转换成的两个关系模式中任意一个关系模式的属性中加入另一个关系模式的键和联系类型的属性。</li><li>实体联系1：N：在N端实体类型转换成的关系模式中加入1端实体类型的键和联系类型的属性</li><li>实体联系M：N：将联系类型也转换成关系模式，其属性为两端实体类型的键加上联系类型的属性，而键为两端实体键的组合。</li></ul><p>一元联系类型的转换和二元联系相同</p><p>三元联系类型总是将三元联系类型转换成关系模式，其属性为三端实体类型的键加上联系类型的属性，而键为三端实体键的组合。</p><h2 id="ER模型实例分析"><a href="#ER模型实例分析" class="headerlink" title="ER模型实例分析"></a>ER模型实例分析</h2><p>库存销售系统的ER模型及转换</p><h2 id="ER模型的扩充"><a href="#ER模型的扩充" class="headerlink" title="ER模型的扩充"></a>ER模型的扩充</h2><p><strong>弱实体</strong></p><p>例如：职工的亲属的关系依附于职工，是弱实体</p><p><strong>子类实体与超类实体</strong></p><p>继承性、子类本身比超类具有更多属性、子类和超类有相同的标识符</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>32位ALU设计</title>
      <link href="2021/03/18/%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C_todo(2)/32%E4%BD%8DALU%E8%AE%BE%E8%AE%A1/"/>
      <url>2021/03/18/%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C_todo(2)/32%E4%BD%8DALU%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="设计思路及代码"><a href="#设计思路及代码" class="headerlink" title="设计思路及代码"></a>设计思路及代码</h2><span id="more"></span><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> ALU32(</span><br><span class="line">ALUcont,A,B,</span><br><span class="line">zero,result</span><br><span class="line">);</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] A,B;</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">2</span>:<span class="number">0</span>] ALUcont;</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span>[<span class="number">31</span>:<span class="number">0</span>] result;</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> zero;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">always</span>@(*)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">case</span>(ALUcont)</span><br><span class="line">        <span class="comment">//AND</span></span><br><span class="line">        <span class="number">3&#x27;b000</span>:</span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">            result=A&amp;B;</span><br><span class="line">            zero=(result==<span class="number">0</span>)?<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="comment">//OR</span></span><br><span class="line">        <span class="number">3&#x27;b001</span>:</span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">            result=A|B;</span><br><span class="line">            zero=(result==<span class="number">0</span>)?<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="comment">//+</span></span><br><span class="line">        <span class="number">3&#x27;b010</span>:</span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">            result=A+B;</span><br><span class="line">            zero=(result==<span class="number">0</span>)?<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="comment">//not used</span></span><br><span class="line">        <span class="comment">//3&#x27;b011:</span></span><br><span class="line">        <span class="comment">//AND !</span></span><br><span class="line">        <span class="number">3&#x27;b100</span>:</span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">         result=A&amp;(~B);</span><br><span class="line">            zero=(result==<span class="number">0</span>)?<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="comment">//OR !</span></span><br><span class="line">        <span class="number">3&#x27;b101</span>:</span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">            result=A|(~B);</span><br><span class="line">            zero=(result==<span class="number">0</span>)?<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="comment">//-</span></span><br><span class="line">        <span class="number">3&#x27;b110</span>:</span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">            result=A-B;</span><br><span class="line">            zero=(A==B)?<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="comment">//SLT</span></span><br><span class="line">        <span class="number">3&#x27;b111</span>:</span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">                <span class="keyword">if</span>(A[<span class="number">31</span>]==<span class="number">1</span>&amp;&amp;B[<span class="number">31</span>]==<span class="number">0</span>)</span><br><span class="line">                    result=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(A[<span class="number">31</span>]==<span class="number">0</span>&amp;&amp;B[<span class="number">31</span>]==<span class="number">0</span>)</span><br><span class="line">                    result=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span> </span><br><span class="line">                    result=(A&lt;B)?<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">                zero=(result==<span class="number">0</span>)?<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">endcase</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span>        </span><br><span class="line">    </span><br></pre></td></tr></table></figure><h2 id="测试代码及表格补全"><a href="#测试代码及表格补全" class="headerlink" title="测试代码及表格补全"></a>测试代码及表格补全</h2><div class="table-container"><table><thead><tr><th>Test</th><th>ALUcont</th><th>A</th><th>B</th><th>result</th><th>zero</th></tr></thead><tbody><tr><td>ADD 0+0</td><td>2</td><td>00000000</td><td>00000000</td><td>00000000</td><td>1</td></tr><tr><td>ADD 0+(-1)</td><td>2</td><td>00000000</td><td>FFFFFFFF</td><td>FFFFFFFF</td><td>0</td></tr><tr><td>ADD 1+(-1)</td><td>2</td><td>00000001</td><td>FFFFFFFF</td><td>00000000</td><td>1</td></tr><tr><td>ADD FF+1</td><td>2</td><td>000000FF</td><td>00000001</td><td><u>00000100</u></td><td><u>0</u></td></tr><tr><td>SUB 0-0</td><td>6</td><td>00000000</td><td>00000000</td><td>00000000</td><td>1</td></tr><tr><td>SUB 0-(-1)</td><td>6</td><td>00000000</td><td>FFFFFFFF</td><td>00000001</td><td>0</td></tr><tr><td>SUB 1-1</td><td>6</td><td>00000001</td><td><u>00000001</u></td><td><u>00000000</u></td><td><u>1</u></td></tr><tr><td>SUB 100-1</td><td>6</td><td>00000100</td><td><u>00000001</u></td><td><u>000000ff</u></td><td><u>0</u></td></tr><tr><td>SLT 0,0</td><td>7</td><td>00000000</td><td>00000000</td><td>00000000</td><td>1</td></tr><tr><td>SLT 0,1</td><td>7</td><td>00000000</td><td><u>00000001</u></td><td>00000001</td><td>0</td></tr><tr><td>SLT 0,-1</td><td>7</td><td>00000000</td><td><u>FFFFFFFF</u></td><td><u>00000000</u></td><td><u>1</u></td></tr><tr><td>SLT 1,0</td><td>7</td><td>00000001</td><td><u>00000000</u></td><td><u>00000000</u></td><td><u>1</u></td></tr><tr><td>SLT -1,0</td><td>7</td><td>FFFFFFFF</td><td><u>00000000</u></td><td><u>00000001</u></td><td><u>0</u></td></tr><tr><td>AND FFFFFFFF,FFFFFFFF</td><td><u>0</u></td><td>FFFFFFFF</td><td>FFFFFFFF</td><td><u>FFFFFFFF</u></td><td><u>0</u></td></tr><tr><td>AND FFFFFFFF,12345678</td><td><u>0</u></td><td>FFFFFFFF</td><td>12345678</td><td>12345678</td><td>0</td></tr><tr><td>AND 12345678,87654321</td><td><u>0</u></td><td>12345678</td><td>87654321</td><td><u>02244220</u></td><td><u>0</u></td></tr><tr><td>AND 00000000,FFFFFFFF</td><td><u>0</u></td><td>00000000</td><td>FFFFFFFF</td><td><u>00000000</u></td><td><u>1</u></td></tr><tr><td>OR FFFFFFFF,FFFFFFFF</td><td><u>1</u></td><td>FFFFFFFF</td><td>FFFFFFFF</td><td><u>FFFFFFFF</u></td><td><u>0</u></td></tr><tr><td>OR 12345678,87654321</td><td><u>1</u></td><td>12345678</td><td>87654321</td><td><u>97755779</u></td><td><u>0</u></td></tr><tr><td>OR 00000000,FFFFFFFF</td><td><u>1</u></td><td>00000000</td><td>FFFFFFFF</td><td><u>FFFFFFFF</u></td><td><u>0</u></td></tr><tr><td>OR 00000000,00000000</td><td><u>1</u></td><td>00000000</td><td>00000000</td><td><u>00000000</u></td><td><u>1</u></td></tr></tbody></table></div><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> ALU32_test(</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">2</span>:<span class="number">0</span>] ALUcont;</span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">31</span>:<span class="number">0</span>] A,B;</span><br><span class="line">    <span class="keyword">wire</span> [<span class="number">31</span>:<span class="number">0</span>] result;</span><br><span class="line">    <span class="keyword">wire</span> zero;</span><br><span class="line">    ALU32 alu(ALUcont,A,B,zero,result); </span><br><span class="line">    <span class="keyword">initial</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">    <span class="comment">//add</span></span><br><span class="line">        ALUcont=<span class="number">3&#x27;b010</span>;</span><br><span class="line">        A=<span class="number">32&#x27;h00000000</span>;</span><br><span class="line">        B=<span class="number">32&#x27;h00000000</span>;</span><br><span class="line">    #<span class="number">20</span> A=<span class="number">32&#x27;h00000000</span>;</span><br><span class="line">        B=<span class="number">32&#x27;hffffffff</span>;</span><br><span class="line">    #<span class="number">20</span> A=<span class="number">32&#x27;h00000001</span>;</span><br><span class="line">        B=<span class="number">32&#x27;hffffffff</span>;</span><br><span class="line">    #<span class="number">20</span> A=<span class="number">32&#x27;h000000ff</span>;</span><br><span class="line">        B=<span class="number">32&#x27;h00000001</span>;</span><br><span class="line">    <span class="comment">//sub</span></span><br><span class="line">    #<span class="number">20</span> ALUcont=<span class="number">3&#x27;b110</span>;</span><br><span class="line">        A=<span class="number">32&#x27;h00000000</span>;</span><br><span class="line">        B=<span class="number">32&#x27;h00000000</span>;</span><br><span class="line">    #<span class="number">20</span> A=<span class="number">32&#x27;h00000000</span>;</span><br><span class="line">        B=<span class="number">32&#x27;hffffffff</span>;</span><br><span class="line">    #<span class="number">20</span> A=<span class="number">32&#x27;h00000001</span>;</span><br><span class="line">        B=<span class="number">32&#x27;h00000001</span>;</span><br><span class="line">    #<span class="number">20</span> A=<span class="number">32&#x27;h00000100</span>;</span><br><span class="line">        B=<span class="number">32&#x27;h00000001</span>;</span><br><span class="line">    <span class="comment">//slt</span></span><br><span class="line">    #<span class="number">20</span> ALUcont=<span class="number">3&#x27;b111</span>;</span><br><span class="line">        A=<span class="number">32&#x27;h00000000</span>;</span><br><span class="line">        B=<span class="number">32&#x27;h00000000</span>;</span><br><span class="line">    #<span class="number">20</span> A=<span class="number">32&#x27;h00000000</span>;</span><br><span class="line">        B=<span class="number">32&#x27;h00000001</span>;</span><br><span class="line">    #<span class="number">20</span> A=<span class="number">32&#x27;h00000000</span>;</span><br><span class="line">        B=<span class="number">32&#x27;hffffffff</span>;</span><br><span class="line">    #<span class="number">20</span> A=<span class="number">32&#x27;h00000001</span>;</span><br><span class="line">        B=<span class="number">32&#x27;h00000000</span>;</span><br><span class="line">    #<span class="number">20</span> A=<span class="number">32&#x27;hffffffff</span>;</span><br><span class="line">        B=<span class="number">32&#x27;h00000000</span>;</span><br><span class="line">    <span class="comment">//and</span></span><br><span class="line">    #<span class="number">20</span> ALUcont=<span class="number">3&#x27;b000</span>;</span><br><span class="line">        A=<span class="number">32&#x27;hffffffff</span>;</span><br><span class="line">        B=<span class="number">32&#x27;hffffffff</span>;</span><br><span class="line">    #<span class="number">20</span> A=<span class="number">32&#x27;hffffffff</span>;</span><br><span class="line">        B=<span class="number">32&#x27;h12345678</span>;</span><br><span class="line">    #<span class="number">20</span> A=<span class="number">32&#x27;h12345678</span>;</span><br><span class="line">        B=<span class="number">32&#x27;h87654321</span>;</span><br><span class="line">    #<span class="number">20</span> A=<span class="number">32&#x27;h00000000</span>;</span><br><span class="line">        B=<span class="number">32&#x27;hffffffff</span>;</span><br><span class="line">    <span class="comment">//or</span></span><br><span class="line">    #<span class="number">20</span> ALUcont=<span class="number">3&#x27;b001</span>;</span><br><span class="line">        A=<span class="number">32&#x27;hffffffff</span>;</span><br><span class="line">        B=<span class="number">32&#x27;hffffffff</span>;</span><br><span class="line">    #<span class="number">20</span> A=<span class="number">32&#x27;h12345678</span>;</span><br><span class="line">        B=<span class="number">32&#x27;h87654321</span>;</span><br><span class="line">    #<span class="number">20</span> A=<span class="number">32&#x27;h00000000</span>;</span><br><span class="line">        B=<span class="number">32&#x27;hffffffff</span>;</span><br><span class="line">    #<span class="number">20</span> A=<span class="number">32&#x27;h00000000</span>;</span><br><span class="line">        B=<span class="number">32&#x27;h00000000</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure><h2 id="仿真波形图"><a href="#仿真波形图" class="headerlink" title="仿真波形图"></a>仿真波形图</h2><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210318081405.png" alt="image-20210318081357819"></p>]]></content>
      
      
      <categories>
          
          <category> 体系结构实验 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第2章 指令集基本原理</title>
      <link href="2021/03/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84_todo/%E7%AC%AC2%E7%AB%A0%20%E6%8C%87%E4%BB%A4%E9%9B%86%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/"/>
      <url>2021/03/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84_todo/%E7%AC%AC2%E7%AB%A0%20%E6%8C%87%E4%BB%A4%E9%9B%86%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="指令集体系结构的分类"><a href="#指令集体系结构的分类" class="headerlink" title="指令集体系结构的分类"></a>指令集体系结构的分类</h2><p>最主要的区别：CPU用来存储操作数的存储单元类型</p><ul><li><p>堆栈：堆栈结构</p></li><li><p>累加器：累加器结构</p></li><li><p>通用寄存器：通用寄存器结构（主流结构）</p><ul><li>寄存器-寄存器型（RR） / load-store结构</li><li>寄存器-存储器型（RM）</li><li>存储器存储器型（MM）</li></ul></li></ul><span id="more"></span><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210312101636.png" alt="image-20210312101629435"></p><p>根据操作数特征细分：<br>| ALU指令中存储器操作数的个数 | ALU指令中操作数的最多个数 | 结构类型 | 实例 |<br>| —————————————- | ————————————- | ———— | —— |<br>| 0                           | 3                         | RR       | MIPS |<br>| 1                           | 2                         | RM       | x86  |<br>| 2                           | 2                         | MM       | VAX  |<br>| 3                           | 3                         | MM       | VAX  |</p><h2 id="存储器寻址"><a href="#存储器寻址" class="headerlink" title="存储器寻址"></a>存储器寻址</h2><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210312103527.png" alt="image-20210312103527682"></p><ul><li>最常用的是较小立即数（有时候也会用到较大立即数，如地址计算）</li><li>指令集结构设计中，至少要将立即数大小设置为8~16位</li></ul><h2 id="操作数的类型与大小"><a href="#操作数的类型与大小" class="headerlink" title="操作数的类型与大小"></a>操作数的类型与大小</h2><p>由指令中的操作码指定操作数的类型</p><p><strong>大小</strong>：操作数的位数/字节数（字节8位，半字16位，字32位，双字64位）</p><p><strong>类型</strong>：字符（ASCII码表示，一个字节大小）、整数（用二进制补码表示，大小可以是字节、半字或单字）、浮点操作数（单精度1个字，双精度双字，IEEE 754标准）</p><p>十进制操作数类型：</p><ul><li>压缩十进制或二进制编码十进制</li><li>非压缩十进制：字符串表示</li></ul><h2 id="指令集中的操作"><a href="#指令集中的操作" class="headerlink" title="指令集中的操作"></a>指令集中的操作</h2><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210319084147.png" alt="image-20210319084140600"></p><h2 id="控制流指令"><a href="#控制流指令" class="headerlink" title="控制流指令"></a>控制流指令</h2><ul><li>跳转</li><li>分支（占控制流的大部分）</li><li>过程调用</li><li>过程返回</li></ul><h2 id="指令集编码"><a href="#指令集编码" class="headerlink" title="指令集编码"></a>指令集编码</h2><p>变长编码格式（适合寻址方式和操作种类很多时）、定长编码格式（适用于寻址方式和操作类型非常少时）、混合型编码格式</p><h2 id="指令设计风格"><a href="#指令设计风格" class="headerlink" title="指令设计风格"></a>指令设计风格</h2><ul><li>复杂指令集计算机CISC</li><li>精简指令集计算机RISC</li></ul><h2 id="MIPS体系结构"><a href="#MIPS体系结构" class="headerlink" title="MIPS体系结构"></a>MIPS体系结构</h2><p><strong>寄存器</strong></p><ul><li>32个64位通用寄存器（GPRS） R0…R31</li><li><p>32个64位浮点数寄存器（FPRS)   F0…F31</p></li><li><p>一些特殊寄存器，如浮点状态寄存器</p></li></ul><p>功能定义</p><p><strong>数据类型</strong></p><ul><li>整数</li><li>浮点数</li></ul><p><strong>寻址方式</strong></p><p>立即数寻址和偏移量寻址，字段都是16位</p><p><strong>指令格式</strong></p><p>寻址方式编码到操作码中，所有指令都是32位，操作码占6位，3种指令格式</p><ul><li>I类：load、store</li><li>R类：ALU指令、专用寄存器读/写指令、move指令</li><li>J类：跳转、跳转并链接、自陷指令、异常返回指令</li></ul><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210319102420.png" alt="image-20210319102420235"></p><p><strong>MIPS操作</strong></p><ul><li>load和store</li><li>ALU操作</li><li>分支与跳转</li><li>浮点操作</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机体系结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>单周期CPU设计</title>
      <link href="2021/03/17/%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C_todo(2)/%E5%8D%95%E5%91%A8%E6%9C%9FCPU%E8%AE%BE%E8%AE%A1/"/>
      <url>2021/03/17/%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C_todo(2)/%E5%8D%95%E5%91%A8%E6%9C%9FCPU%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="基本设计情况"><a href="#基本设计情况" class="headerlink" title="基本设计情况"></a>基本设计情况</h2><h3 id="单周期MIPS处理器"><a href="#单周期MIPS处理器" class="headerlink" title="单周期MIPS处理器"></a>单周期MIPS处理器</h3><ul><li>在一个周期内执行一条完整的指令</li><li>数据通路：由操作元件和状态元件通过分散方式或总线方式连接而成，进行数据存储、处理、传送的路径</li></ul><span id="more"></span><ul><li>一个执行周期<ul><li>step1: 从指令存储器中取出指令</li><li>step2: 从寄存器文件中读出源操作数</li><li>step3: 符号扩展立即数</li><li>step4: 计算存储器地址</li><li>step5: 向寄存器文件写入数据</li><li>step6: 确定PC的下一个指令地址</li></ul></li></ul><h3 id="MIPS指令集"><a href="#MIPS指令集" class="headerlink" title="MIPS指令集"></a>MIPS指令集</h3><ol><li><p>书上的指令集：add、sub、and、or、slt、addi、sw、lw、beq、addi、j</p></li><li><p>添加的指令：andi（and一个立即数）、bne（条件转移指令，当两个寄存器中内容不等时转移发生）、ori（or一个立即数）</p></li></ol><h3 id="IO接口设计"><a href="#IO接口设计" class="headerlink" title="IO接口设计"></a>IO接口设计</h3><ul><li>16位开关输入、8个LEDs7段数码管输出</li><li>按下BTNR：开关位置已经拨号，可以输入新数据</li><li>按下BTNL：LEDs已经准备好，可以输出新数据</li></ul><h2 id="演示效果（已验收）"><a href="#演示效果（已验收）" class="headerlink" title="演示效果（已验收）"></a>演示效果（已验收）</h2><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210428202625.png" alt=""></p><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210429203127.png" alt="image-20210429203127618"></p><p>controller和datapath：</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210429203205.png" alt="image-20210429203205150"></p>]]></content>
      
      
      <categories>
          
          <category> 体系结构实验 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第3章 流水线</title>
      <link href="2021/03/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84_todo/%E7%AC%AC3%E7%AB%A0%20%E6%B5%81%E6%B0%B4%E7%BA%BF/"/>
      <url>2021/03/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84_todo/%E7%AC%AC3%E7%AB%A0%20%E6%B5%81%E6%B0%B4%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="流水线基础知识"><a href="#流水线基础知识" class="headerlink" title="流水线基础知识"></a>流水线基础知识</h2><ul><li>把一个重复的过程分解为若干个子过程， 每个子过程由专门的功能部件来实现。</li><li>把多个处理过程在时间上错开，依次通过各功能段，这样，每个子过程就可以与其他的子过程并行进行。</li><li>每个子过程及其功能部件：流水级/段；段数：流水线的深度</li></ul><p>例：</p><span id="more"></span><p>指令流水线（分解成四个子过程，每个子过程用独立的分析部件和执行部件来实现）</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210326083341.png" alt="image-20210326083341631"></p><p>浮点加法流水线</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210326083424.png" alt="image-20210326083424707"></p><p><strong>时空图</strong></p><p>横轴时间、纵轴各个段</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210326083526.png" alt="image-20210326083525954"></p><p><strong>特点</strong></p><ul><li>各段时间应该尽量相等，时间长的段将成为流水线的瓶颈</li><li>每个功能部件后面要有一个缓冲寄存器（流水寄存器），用于在相邻两段之间传送数据</li><li>通过时间：第一个任务从进入流水线到流出结果所需的时间</li><li>排空时间：最后一个任务从进入流水线到流出结果所需的时间</li></ul><h3 id="流水线的分类"><a href="#流水线的分类" class="headerlink" title="流水线的分类"></a>流水线的分类</h3><ol><li>单功能与多功能流水线：前者只能完成一种功能，后者各段能进行不同的连接，实现不同的功能</li><li>静态与动态流水线：按同一时间能否执行多种功能对多功能流水线的分类</li><li>线性与非线性流水线：前者没有反馈回路、串行连接，后者有反馈回路</li><li>顺序流水线和乱序流水线：前者流入流出顺序相同，后者可以后进的先完成</li></ol><h3 id="流水线的性能指标"><a href="#流水线的性能指标" class="headerlink" title="流水线的性能指标"></a>流水线的性能指标</h3><p><strong>吞吐率</strong></p><p>单位时间内流水线所完成的任务/输出结果数量</p><p>$TP=\frac{n}{T_k}$</p><p>n表示任务数，$T_k$表示处理n个任务所用的时间</p><p>各段时间相等：</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210326090245.png" alt="image-20210326090245212"></p><script type="math/tex; mode=display">TP=\frac{n}{(k+n-1)\Delta{t}}</script><p>最大吞吐率</p><script type="math/tex; mode=display">TP_{max}=\lim_{n\rightarrow+\infty}\frac{n}{(k+n-1)\Delta{t}}=\frac{1}{\Delta{t}}</script><p>各段时间不完全相等：</p><p>最长的叫瓶颈段</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210326091005.png" alt="image-20210326091005492"></p><script type="math/tex; mode=display">TP=\frac{n}{\sum_{i=1}^{k}\Delta{t_i}+(n-1)max(\Delta{t_1},\Delta{t_2},\cdots,\Delta{t_k})}</script><p>最大吞吐率</p><script type="math/tex; mode=display">TP_{max}=\frac{1}{max(\Delta{t_1},\Delta{t_2},\cdots,\Delta{t_k})}</script><p>解决瓶颈问题：细分瓶颈段、重新设置瓶颈段</p><p><strong>加速比</strong></p><p>同一批任务，使用和不使用流水线时间比</p><script type="math/tex; mode=display">S=\frac{T_s}{T_k}</script><p>各段时间相等：</p><script type="math/tex; mode=display">S=\frac{nk}{k+n-1}</script><p>不完全相等：</p><script type="math/tex; mode=display">S=\frac{n\sum_{i=1}^{k}\Delta{t_i}}{\sum_{i=1}^{k}\Delta{t_i}+(n-1)max(\Delta{t_1},\Delta{t_2},\cdots,\Delta{t_k})}</script><p><strong>效率</strong></p><p>设备利用率</p><p>各段时间相等</p><script type="math/tex; mode=display">E=\frac{n}{k+n-1}</script><script type="math/tex; mode=display">E_{max}=1</script><p>各段不相等</p><script type="math/tex; mode=display">E=\frac{n\sum_{i=1}^{k}\Delta{t_i}}{k[\sum_{i=1}^{k}\Delta{t_i}+(n-1)max(\Delta{t_1},\Delta{t_2},\cdots,\Delta{t_k})]}</script><h3 id="一个经典的5段流水线"><a href="#一个经典的5段流水线" class="headerlink" title="一个经典的5段流水线"></a>一个经典的5段流水线</h3><p>非流水情况下，一条指令的执行过程分为以下5个周期</p><ol><li>取指令周期（IF）</li><li>指令译码/读寄存器周期（ID）</li><li>执行/有效地址计算周期（EX）</li><li>存储器访问/分支完成周期（MEM）</li><li>写回周期（WB）</li></ol><p>改为流水线实现：</p><ul><li>每个周期作为一个流水段</li><li>各段之间加上锁存器</li></ul><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210326102646.png" alt="image-20210326102646310"></p><h2 id="流水线冒险"><a href="#流水线冒险" class="headerlink" title="流水线冒险"></a>流水线冒险</h2><p>流水线冒险会阻止指令流中下一条指令不能在指定的时钟周期执行</p><ul><li>结构冒险：因硬件资源满足不了指令重叠执行的要求而出现资源冲突，导致结构冒险</li><li>数据冒险：当指令在流水线中重叠执行时，因需要用到前面指令的执行结果，导致数据冒险</li><li>控制冒险：流水线遇到分支指令和其他会改变PC值的指令，导致控制冒险</li></ul><h3 id="带有停顿的流水线性能"><a href="#带有停顿的流水线性能" class="headerlink" title="带有停顿的流水线性能"></a>带有停顿的流水线性能</h3><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210402083346.png" alt="image-20210402083338983"></p><h3 id="结构冒险"><a href="#结构冒险" class="headerlink" title="结构冒险"></a>结构冒险</h3><p>常见原因：功能部件不是完全流水、资源份数不够</p><p>解决办法：插入暂停周期（“气泡”）、设置相互独立的指令存储器和数据存储器或设置相互独立的指令Cache和数据Cache</p><h3 id="数据冒险"><a href="#数据冒险" class="headerlink" title="数据冒险"></a>数据冒险</h3><p>当相关的指令靠得足够近时，它们在流水线中的重叠执行或者重新排序会改变指令读写操作数的顺序，使之不同于它们非流水实现时的顺序，则发生了数据冒险。</p><ul><li><p>通过转发技术（旁路/短路）减少数据冒险引起的停顿</p></li><li><p>增加流水线互锁硬件、插入“停顿”（或气泡）</p></li></ul><h3 id="分支冒险"><a href="#分支冒险" class="headerlink" title="分支冒险"></a>分支冒险</h3><ul><li><em>降低流水线分支代价</em></li></ul><p>处理分支指令最简单的方法：“冻结”流水线，保留或删除分支之后的所有指令，直到直到分支目标地址。</p><ul><li><p><em>预测未选中（预测分支失败）</em></p></li><li><p><em>预测选中（预测分支成功）</em></p></li></ul><p><em>分支延迟指令的调度</em></p><p>在延迟槽中放入有用的指令，由编译器完成，能否带来好处取决于编译器能否把有用的指令调度到延迟槽中。</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210402102005.png" alt="image-20210402102005229"></p><h3 id="分支预测"><a href="#分支预测" class="headerlink" title="分支预测"></a>分支预测</h3><p>通过预测降低分支成本</p><ul><li>静态分支预测：利用编译时可用信息的低成本静态机制</li><li>动态分支预测：根据程序特性对分支进行动态预测的策略</li></ul><h2 id="实现流水化"><a href="#实现流水化" class="headerlink" title="实现流水化"></a>实现流水化</h2><h3 id="MIPS的简单实现"><a href="#MIPS的简单实现" class="headerlink" title="MIPS的简单实现"></a>MIPS的简单实现</h3><p>一条MIPS指令最多需要以下5个时钟周期</p><p><em>取指令周期（IF）</em></p><p><em>指令译码/读寄存器周期（ID）</em></p><p><em>执行/有效地址计算周期（EX）</em></p><p><em>存储器访问/分支完成周期（MEM）</em></p><p><em>写回周期（WB）</em></p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210402102601.png" alt="image-20210402102601455"></p><h3 id="MIPS基本流水线"><a href="#MIPS基本流水线" class="headerlink" title="MIPS基本流水线"></a>MIPS基本流水线</h3><p>每一个时钟周期完成的工作看作是流水线的一段，每个时钟周期启动一条新的指令。</p><p>段和段之间设置流水寄存器，命名：用其相邻的两个段的名称拼合而成</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210402103054.png" alt="image-20210402103053923"></p><h3 id="MIPS流水线的控制"><a href="#MIPS流水线的控制" class="headerlink" title="MIPS流水线的控制"></a>MIPS流水线的控制</h3><p><em>控制四个多路选择器</em></p><p><em>解决数据冒险的问题</em></p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210402103316.png" alt="image-20210402103316278"></p><h3 id="处理流水线中的分支"><a href="#处理流水线中的分支" class="headerlink" title="处理流水线中的分支"></a>处理流水线中的分支</h3><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210402103408.png" alt="image-20210402103408763"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机体系结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第5章 概率分析和随机算法</title>
      <link href="2021/03/17/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA_todo(4)/%E7%AC%AC5%E7%AB%A0%20%E6%A6%82%E7%8E%87%E5%88%86%E6%9E%90%E5%92%8C%E9%9A%8F%E6%9C%BA%E7%AE%97%E6%B3%95/"/>
      <url>2021/03/17/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA_todo(4)/%E7%AC%AC5%E7%AB%A0%20%E6%A6%82%E7%8E%87%E5%88%86%E6%9E%90%E5%92%8C%E9%9A%8F%E6%9C%BA%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="5-1-雇佣问题"><a href="#5-1-雇佣问题" class="headerlink" title="5.1 雇佣问题"></a>5.1 雇佣问题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HIRE-ASSISTANT(n)</span><br><span class="line">best &#x3D; 0</span><br><span class="line">for i &#x3D; 0 to n</span><br><span class="line">interview candidate i</span><br><span class="line">if candidate is better than candidate best</span><br><span class="line">best &#x3D; i</span><br><span class="line">hire candidate i</span><br></pre></td></tr></table></figure><p><strong>最坏情形分析</strong></p><p>应聘者质量按出现的次序严格递增</p><span id="more"></span><p><strong>概率分析</strong></p><p>对所有可能输入产生的运行时间取平均，每当报告此种类型的运行时间时，我们称其为平均情况运行时间</p><p><strong>随机算法</strong></p><p>如果一个算法的形为不仅由输入决定，而且也由随机数生成器产生的数值决定，则称这个算法是随机的。</p><h2 id="5-2-指示器随机变量"><a href="#5-2-指示器随机变量" class="headerlink" title="5.2 指示器随机变量"></a>5.2 指示器随机变量</h2><p>定义：</p><script type="math/tex; mode=display">I\lbrace A\rbrace=\begin{cases} 1\quad如果A发生\\0\quad如果A不发生\end{cases}</script><p>A发生的概率$Pr\lbrace A\rbrace$，期望 $E[X_A]$</p><p>引理：给定一个样本空间S和S中的一个事件A，设$X_A=I\lbrace A\rbrace$，那么$E[X_A]=Pr\lbrace A\rbrace$</p><p><strong>用指示器随机变量分析雇佣问题</strong></p><script type="math/tex; mode=display">X_i=I\lbrace 应聘者i被雇佣\rbrace = \begin{cases} 1\quad如果应聘者i被雇佣 \\ 0\quad如果应聘者i不被雇佣  \end{cases}</script><p>以及</p><script type="math/tex; mode=display">X=X_1+X_2+\cdots+X_n</script><p>根据引理</p><script type="math/tex; mode=display">E[X_i]=Pr\lbrace 应聘者i被雇佣\rbrace</script><p>应聘者比应聘者1到i-1更有资格的概率是1/i，因此</p><script type="math/tex; mode=display">E[X_i]=1/i</script><p>计算得</p><script type="math/tex; mode=display">E[X]=\ln n+O(1)</script><p>因此尽管面试了n个人，实际上大约只雇佣他们之中的$\ln n$个人</p><h2 id="5-3-随机算法"><a href="#5-3-随机算法" class="headerlink" title="5.3 随机算法"></a>5.3 随机算法</h2><p>先对应聘者进行排列，然后确定最佳应聘者的随机算法。此时建立的算法的性能和假设应聘者以随即次序出现所得的结果是匹配的。</p><p>随机排列数组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PERMUTE-BY-SORTING(A)</span><br><span class="line">n&#x3D;A.length</span><br><span class="line">let P[1...n] be a new array</span><br><span class="line">for i &#x3D; 1 to n</span><br><span class="line">P[i] &#x3D; RANDOM(1, n^3)</span><br><span class="line">sort A, using P as sort keys</span><br></pre></td></tr></table></figure><p>假设所有优先级都不同，则过程PERMUTE-BY-SORTING产生输入的均匀随机排列</p><p>另一个方法：原址排列给定数组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RANDOMIZE-IN-PLACE(A)</span><br><span class="line">n &#x3D; A.length</span><br><span class="line">for i &#x3D; 1 to n</span><br><span class="line">swap A[i] with A[RANDOM(i, n)]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法导论 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>软件工程 第1章 概论</title>
      <link href="2021/03/17/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B-%E7%AC%AC1%E7%AB%A0-%E6%A6%82%E8%AE%BA/"/>
      <url>2021/03/17/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B-%E7%AC%AC1%E7%AB%A0-%E6%A6%82%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="计算机软件"><a href="#计算机软件" class="headerlink" title="计算机软件"></a>计算机软件</h2><p>计算机软件指计算机系统中的程序及其文档。</p><p><strong>软件的发展</strong></p><ul><li>1946~1956 第一个程序的出现到高级语言出现</li><li>1956~1986 高级语言出现到软件工程出现</li><li>1968至今</li></ul><span id="more"></span><p><strong>软件的特点</strong></p><p>一种逻辑实体、被开发或设计、不会老化，但需要修复。</p><p><strong>软件的分类</strong></p><ul><li><p>系统软件：编译程序、操作系统等</p></li><li><p>支撑软件：数据库管理系统等</p></li><li><p>应用软件：Web应用软件等</p></li></ul><p><strong>软件语言</strong></p><h2 id="软件工程"><a href="#软件工程" class="headerlink" title="软件工程"></a>软件工程</h2><p><strong>软件工程定义</strong></p><p>软件工程是应用计算机科学、数学及管理科学等原理，开发软件的工程。</p><p><strong>软件工程框架</strong></p><p>可概括为目标、过程和原则。</p><p><strong>软件的生存周期</strong></p><p>计算机系统工程-&gt;需求分析-&gt;设计-&gt;编码-&gt;测试-&gt;运行和维护</p><h2 id="软件过程"><a href="#软件过程" class="headerlink" title="软件过程"></a>软件过程</h2><p><strong>软件生存周期过程</strong></p><p><strong>能力成熟度模型CMM</strong></p><p>提供一种评价软件承接方能力的方法</p><p><strong>能力成熟度模型集成CMMI</strong></p><p>若干过程模型的综合和改进，是支持多个工程学科和领域的系统的、一致的过程改进框架，能适应现代工程的特点和需要，能提高过程的质量和工作效率</p><h2 id="软件过程模型"><a href="#软件过程模型" class="headerlink" title="软件过程模型"></a>软件过程模型</h2><ul><li>瀑布模型</li><li>演化模型</li><li>增量模型</li><li>原型模型</li><li>螺旋模型</li><li>喷泉模型</li><li>基于构件的开发模型</li><li>形式化方法模型</li></ul><h2 id="敏捷软件开发"><a href="#敏捷软件开发" class="headerlink" title="敏捷软件开发"></a>敏捷软件开发</h2><p><strong>敏捷软件开发的价值观及开发原则</strong></p><ul><li>个人和交互高于过程和工具</li><li>可运行软件高于详尽的文档</li><li>与客户协作高于合同谈判</li><li>对变更及时作出反应高于遵循计划</li></ul><p><strong>XP方法</strong></p><p>极限编程</p>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo报错</title>
      <link href="2021/03/17/%E5%B7%A5%E5%85%B7/Hexo%E6%8A%A5%E9%94%99/"/>
      <url>2021/03/17/%E5%B7%A5%E5%85%B7/Hexo%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<p>今天在使用hexo博客运行 hexo d 出现报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OpenSSL SSL_connect: Connection was reset in connection to github.com:443</span><br></pre></td></tr></table></figure><p> 查询了很多方案后，发现是代理的问题，如果你使用了VPN，需要设置一下http.proxy，先查看端口号</p><span id="more"></span><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210317125202.png" alt="image-20210317125154852"></p><p>我的端口号是2802，设置http.proxy</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy 127.0.0.1:2802</span><br><span class="line">git config --global https.proxy 127.0.0.1:2802</span><br></pre></td></tr></table></figure><p>如果之前已经有过设置，先取消</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure><p>设置好之后再hexo d，部署成功</p><p>附上我的报错和解决截图</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210317125426.png" alt="image-20210317125426084"></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第4章 分治策略</title>
      <link href="2021/03/17/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA_todo(4)/%E7%AC%AC4%E7%AB%A0%20%E5%88%86%E6%B2%BB%E7%AD%96%E7%95%A5/"/>
      <url>2021/03/17/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA_todo(4)/%E7%AC%AC4%E7%AB%A0%20%E5%88%86%E6%B2%BB%E7%AD%96%E7%95%A5/</url>
      
        <content type="html"><![CDATA[<p>Divide-Conquer-Combine</p><h2 id="4-1-最大子数组问题"><a href="#4-1-最大子数组问题" class="headerlink" title="4.1 最大子数组问题"></a>4.1 最大子数组问题</h2><p>伪代码：</p><span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">FIND-MAX-CROSSING-SUBARRAY(A,low,mid,high) </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    接受数组A和下表low,mid,high为输入，</span></span><br><span class="line"><span class="comment">    返回一个下标元组划定跨越种点的最大子数组的边界，并返回最大子数组中值的和</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">left-sum = -∞</span><br><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i = mid downto low</span><br><span class="line">    sum = sum + A[i]</span><br><span class="line">    <span class="keyword">if</span> sum &gt; left - sum</span><br><span class="line">        left-sum = sum</span><br><span class="line">        max-left = i</span><br><span class="line">right-sum = -∞</span><br><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> j = mid + <span class="number">1</span> to high</span><br><span class="line">    sum = sum + A[j]</span><br><span class="line">    <span class="keyword">if</span> sum &gt; right-sum</span><br><span class="line">        right-sum = sum</span><br><span class="line">        max-right = j</span><br><span class="line"><span class="keyword">return</span>(max-left, max-right, left-sum + right-sum)</span><br><span class="line"></span><br><span class="line">FIND-MAXIMUM-SUBARRAY(A,low,high) <span class="comment">//求出A[1...n]的最大子数组</span></span><br><span class="line"><span class="keyword">if</span> high == low</span><br><span class="line">    <span class="keyword">return</span> (low,high,A[low])</span><br><span class="line"><span class="keyword">else</span> mid = (low + high)/<span class="number">2</span></span><br><span class="line">    (left-low, left-high, left-sum) = </span><br><span class="line">    FIND-MAXIMUM-SUBARRAY(A,low,mid)</span><br><span class="line">    (right-low, right-high, right-sum) = </span><br><span class="line">    FIND-MAXIMUM-SUBARRAY(A,mid+<span class="number">1</span>,high)</span><br><span class="line">    (cross-low, cross-high, cross-sum) = </span><br><span class="line">    FIND-MAX-CROSSING-SUBARRAY(A,low,mid,high)</span><br><span class="line">    <span class="keyword">if</span> left-sum &gt;= cross-sum and right-sum &gt;= cross-sum</span><br><span class="line">        <span class="keyword">return</span>(left-low, left-high, left-sum)</span><br><span class="line">    <span class="keyword">else</span> right-sum &gt;= cross-sum and right-sum &gt;= cross-sum</span><br><span class="line">        <span class="keyword">return</span>(right-low, right-high, right-sum)</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span>(cross-low, cross-high, cross-sum)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-2-矩阵乘法的Strassen算法"><a href="#4-2-矩阵乘法的Strassen算法" class="headerlink" title="4.2 矩阵乘法的Strassen算法"></a>4.2 矩阵乘法的Strassen算法</h2><p>常规算法花费Θ(n^3)，Strassen算法花费Θ(n^lg7)≈Θ(n^2.81)</p><p>基本思想：减少多余的乘法，把乘法变成乘法+加法</p><h2 id="4-3-代入法求解递归式"><a href="#4-3-代入法求解递归式" class="headerlink" title="4.3 代入法求解递归式"></a>4.3 代入法求解递归式</h2><p><strong>步骤</strong></p><ol><li>猜测解的形式</li><li>用数学归纳法求出解中的常数，并证明解是正确的</li></ol><h2 id="4-4-递归树方法求解递归式"><a href="#4-4-递归树方法求解递归式" class="headerlink" title="4.4 递归树方法求解递归式"></a>4.4 递归树方法求解递归式</h2><p>将递归式转换成一棵树，其节点表示不同层次的递归调用产生的代价。然后采用边界和技巧来求解递归式。</p><p>例：$T(n)=3T(\lfloor n/4\rfloor)+\Theta(n^2)$</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210423082640.png" alt="image-20210423082632784"></p><h2 id="4-5-主方法求解递归式"><a href="#4-5-主方法求解递归式" class="headerlink" title="4.5 主方法求解递归式"></a>4.5 主方法求解递归式</h2><p>求解形式如 $T(n)=aT(n/b)+f(n)$递归式的界</p><script type="math/tex; mode=display">\begin{align}&主定理：令a\geq 1和b>1是常数，f(n)是一个函数，T(n)是定义在非负整数上的递归式：\\&T(n)=aT(n/b)+f(n)\\&其中n/b解释为\lfloor n/b\rfloor或\lceil n/b\rceil，那么T(n)有如下渐进界：\\&1.若对某个常数\varepsilon >0，有f(n)=O(n^{log_b{a-\varepsilon}})，则T(n)=\Theta(n^{log_ba}).\\&2.若f(n)=\Theta(n^{log_ba})，则T(n)=\Theta(n^{log_ba}lgn).\\&3.若对某个常数\varepsilon>0有f(n)=\Omega(n^{log_b{a+\varepsilon}})，且对某个常数c<1和所有足够大的n有af(n/b)\leq cf(n)，则T(n)=\Theta(f(n))\end{align}</script><p>基本思想，把f(n)和$\Theta(n^{log_ba})$比较，两函数较大者决定了递归式的解。</p>]]></content>
      
      
      <categories>
          
          <category> 算法导论 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SQL语言</title>
      <link href="2021/03/16/%E6%95%B0%E6%8D%AE%E5%BA%93_todo(1)/SQL%E8%AF%AD%E8%A8%80/"/>
      <url>2021/03/16/%E6%95%B0%E6%8D%AE%E5%BA%93_todo(1)/SQL%E8%AF%AD%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<h2 id="SQL体系结构："><a href="#SQL体系结构：" class="headerlink" title="SQL体系结构："></a>SQL体系结构：</h2><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210309194458.png" alt=""></p><span id="more"></span><h2 id="SQL的数据定义"><a href="#SQL的数据定义" class="headerlink" title="SQL的数据定义"></a>SQL的数据定义</h2><h3 id="SQL模式的创建和撤销"><a href="#SQL模式的创建和撤销" class="headerlink" title="SQL模式的创建和撤销"></a><strong>SQL模式的创建和撤销</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> SCHEMA <span class="operator">&lt;</span>模式名<span class="operator">&gt;</span> <span class="keyword">AUTHORIZATION</span> <span class="operator">&lt;</span>用户名<span class="operator">&gt;</span> <span class="operator">/</span><span class="operator">/</span>创建</span><br><span class="line"><span class="keyword">DROP</span> SCHEMA <span class="operator">&lt;</span>模式名<span class="operator">&gt;</span> [CASCADE<span class="operator">|</span>RESTRICT] <span class="operator">/</span><span class="operator">/</span>删除</span><br></pre></td></tr></table></figure><p>CASCADE级联式，直接删除；RESTRICT约束式，若模式下面有其他模式，则提示</p><h3 id="SQL基本数据类型"><a href="#SQL基本数据类型" class="headerlink" title="SQL基本数据类型"></a>SQL基本数据类型</h3><p>数值型、字符串型、位串型、时间型</p><h3 id="基本表的创建、修改和撤销"><a href="#基本表的创建、修改和撤销" class="headerlink" title="基本表的创建、修改和撤销"></a><strong>基本表的创建</strong>、<strong>修改和撤销</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>创建</span><br><span class="line"><span class="keyword">CREATE</span>  <span class="keyword">TABLE</span>  S</span><br><span class="line">(S#    <span class="type">CHAR</span>(<span class="number">4</span>)  <span class="keyword">NOT</span>  <span class="keyword">NULL</span>,</span><br><span class="line"> SNAME  <span class="type">CHAR</span>(<span class="number">8</span>)  <span class="keyword">NOT</span>  <span class="keyword">NULL</span>,</span><br><span class="line"> AGE<span class="type">CHAR</span>(<span class="number">1</span>),</span><br><span class="line"> SEX    <span class="type">CHAR</span>(<span class="number">1</span>),</span><br><span class="line">   <span class="keyword">PRIMARY</span>  KEY(S#));</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>修改</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>基本表名<span class="operator">&gt;</span> <span class="keyword">ADD</span> <span class="operator">&lt;</span>列名<span class="operator">&gt;</span> <span class="operator">&lt;</span>类型<span class="operator">&gt;</span> </span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>删除</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>基本表名<span class="operator">&gt;</span> <span class="keyword">DROP</span> <span class="operator">&lt;</span>列名<span class="operator">&gt;</span>［CASCADE│RESTRICT］</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>修改某个列</span><br><span class="line"><span class="keyword">ALTER</span>  <span class="keyword">TABLE</span>  S  MODIFY  S#  <span class="type">CHAR</span>(<span class="number">6</span>)</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>删除表</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>基本表名<span class="operator">&gt;</span>［CASCADE│RESTRICT］</span><br></pre></td></tr></table></figure><ul><li>CASCADE表示删除时自动删除该列的视图和约束，RESTRICT则拒绝删除</li><li>CAHR提前给一个固定的地址大小，VARCHAR根据实际情况调整大小（在范围内）</li></ul><h3 id="索引的创建和撤销："><a href="#索引的创建和撤销：" class="headerlink" title="索引的创建和撤销："></a><strong>索引的创建和撤销</strong>：</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>创建</span><br><span class="line"><span class="keyword">CREATE</span> ［<span class="keyword">UNIQUE</span>］ INDEX  <span class="operator">&lt;</span>索引名<span class="operator">&gt;</span> <span class="keyword">ON</span>  <span class="operator">&lt;</span>基本表名<span class="operator">&gt;</span>(列名表) </span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>撤销</span><br><span class="line"><span class="keyword">DROP</span>  INDEX  <span class="operator">&lt;</span>索引名<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><h2 id="SQL的数据查询"><a href="#SQL的数据查询" class="headerlink" title="SQL的数据查询"></a>SQL的数据查询</h2><h3 id="SELECT查询语句"><a href="#SELECT查询语句" class="headerlink" title="SELECT查询语句"></a><strong>SELECT查询语句</strong></h3><ul><li>SELECT-FROM-WHERE句型</li><li>WHERE子句的条件表达式可用的运算符<ul><li>算数比较 &lt;…</li><li>逻辑 AND…</li><li>集合成员资格 IN…</li><li>谓词 EXISTS…</li><li>聚合函数 AVG…</li><li>另一个SELECT语句嵌套</li><li>集合 UNION…</li></ul></li></ul><p>SELECT语句能表示所有的关系代数表达式</p><p><strong>SLECT语句的图示化</strong></p><p>（C2是常量，P是要打印的数据）</p><div class="table-container"><table><thead><tr><th>SC</th><th>S#</th><th>C#</th><th>GRADE</th></tr></thead><tbody><tr><td></td><td>P.</td><td>C2</td><td>P.</td></tr></tbody></table></div><p><strong>聚合函数</strong></p><ul><li>COUNT(*) 计算元组个数  </li><li>COUNT(列名) 对一列中的值计算个数</li><li>SUM(列名) 对某一列的值的总和</li><li>AVG</li><li>MAX</li><li>MIN</li><li>…</li></ul><p>例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> 求男学生总人数和平均年龄</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>), <span class="built_in">AVG</span>(AGE)</span><br><span class="line">frome S</span><br><span class="line"><span class="keyword">where</span> sex <span class="operator">=</span> <span class="string">&#x27;M&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 统计选修了课程的总人数</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span> (<span class="keyword">DISTINCT</span> S#)</span><br><span class="line">frome SC</span><br></pre></td></tr></table></figure><h3 id="SELECT完整语句"><a href="#SELECT完整语句" class="headerlink" title="SELECT完整语句"></a><strong>SELECT完整语句</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 目标表的列名或列表达式序列</span><br><span class="line"><span class="keyword">FROM</span> 基本表名和（或）视图序列</span><br><span class="line">[<span class="keyword">WHERE</span> 行条件表达式]</span><br><span class="line"> [<span class="keyword">GROUP</span> <span class="keyword">BY</span> 列名序列 ]</span><br><span class="line">   [<span class="keyword">HAVING</span> 组条件表达式 ]</span><br><span class="line"> [<span class="keyword">ORDER</span> <span class="keyword">BY</span> 列名[<span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>]，…]</span><br></pre></td></tr></table></figure><p>执行过程</p><blockquote><p>读取FROM子句中基本表、视图的数据，执行笛卡儿积操作</p><p>选取满足WHERE子句中给出的条件表达式的元组</p><p>按GROUP子句中指定列的值分组，同时提取满足HAVING子句中组条件表达式的那些组</p><p>按SELECT子句中给出的列名或列表达式求值输出</p><p>ORDER子句对输出的目标表进行排序，按附加说明ASC升序排列，或按DESC降序排列。</p></blockquote><h3 id="SELECT语句中的限定"><a href="#SELECT语句中的限定" class="headerlink" title="SELECT语句中的限定"></a>SELECT语句中的限定</h3><ul><li>select子句中的规定<ul><li>distinct</li><li>检索出生年份：2021-age</li></ul></li><li>条件表达式中的算术比较<ul><li>可以是θ符号，也可以是between…and…</li></ul></li><li>列和基本表可以改名</li><li>字符串匹配：LIKE</li><li>集合的并、交、差</li><li>空值比较，可以用NULL</li><li>集合的比较<ul><li>资格比较 IN / NOT IN</li><li>算术比较 SOME / ALL</li><li>空关系测试：EXISTS / NOT EXISTS</li><li>重复元组测试：UNIQUE / NOT UNIQUE</li></ul></li><li>导出表：可以在FROM中使用子查询</li></ul><h3 id="基本表的连接"><a href="#基本表的连接" class="headerlink" title="基本表的连接"></a><strong>基本表的连接</strong></h3><div class="table-container"><table><thead><tr><th>连接类型</th><th>连接条件</th></tr></thead><tbody><tr><td>INNER JOIN 内连接</td><td>NATURAL</td></tr><tr><td>LEFT OUTER JOIN 左外连接</td><td>ON 等值连接条件</td></tr><tr><td>RIGHT OUTER JOIN 右外连接</td><td>USING(A1,A2,…,An)</td></tr><tr><td>FULL OUTER JOIN 完全外连接</td></tr></tbody></table></div><h3 id="递归查询"><a href="#递归查询" class="headerlink" title="递归查询"></a><strong>递归查询</strong></h3><p>假设课程有先修与后继的联系</p><p>COURSE(C#,CNAME,PC#)</p><p>设临时关系W（C#，PC#）的属性表示课程号、直接或间接先修课的课程号。求W，可以利用这样两个规则：</p><p><strong>① W(x,y)← COURSE(x,u,y)</strong></p><p><strong>② W(x,y)← COURSE(x,u,z)∧ W(z,y)</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> <span class="keyword">RECURSIVE</span> W(C#, PC#) <span class="keyword">AS</span></span><br><span class="line">(<span class="keyword">SELECT</span> C#, PC# <span class="keyword">FROM</span> COURSE)</span><br><span class="line">    <span class="keyword">UNION</span></span><br><span class="line">        (<span class="keyword">SELECT</span> W1.C#, W2.PC#</span><br><span class="line">        <span class="keyword">FROM</span> COURSE <span class="keyword">AS</span> W1, W <span class="keyword">AS</span> W2</span><br><span class="line">        <span class="keyword">WHERE</span> W1.PC#<span class="operator">=</span>W2.C#)</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> W;</span><br></pre></td></tr></table></figure><h2 id="数据更新"><a href="#数据更新" class="headerlink" title="数据更新"></a>数据更新</h2><p><strong>数据插入</strong></p><ul><li><p>单元组插入</p><p> INSERT INTO基本表名[(列名表)] VALUES(元组值)</p></li><li><p>多元组插入</p><p>INSERT INTO 基本表名 [(列名表)]</p><p>VALUES (元组值),(元组值)，……，(元组值)</p></li><li><p>查询结果插入</p><p>INSERT INTO 基本表名 [(列名表)]<SELECT查询语句></p></li><li><p>表的插入</p><p>INSERT INTO 基本表名1[(列名表)]TABLE 基本表名2</p></li></ul><p><strong>数据删除</strong></p><p>DELETE FROM 基本表名</p><p>[WHERE 条件表达式]</p><p><strong>数据修改</strong></p><p>UPDATE 基本表名</p><p>SET 列名 = …</p><p>[WHERE 条件表达式]</p><h2 id="视图的定义和对视图的操作"><a href="#视图的定义和对视图的操作" class="headerlink" title="视图的定义和对视图的操作"></a>视图的定义和对视图的操作</h2><p><strong>视图的创建和撤销</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> <span class="operator">&lt;</span>视图名<span class="operator">&gt;</span>（列表名）</span><br><span class="line"></span><br><span class="line"><span class="keyword">AS</span> <span class="operator">&lt;</span><span class="keyword">SELECT</span> 查询语句<span class="operator">&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>视图实际上对应一个查询语句</p><p>DROP VIEW</p><p><strong>对视图的更新操作</strong></p><p>如果视图是从单个基本表只使用选择、投影操作导出的，并且包含了基本表的主键，那么这样的视图称为<em>行列子集视图</em>，并且可以被执行更新操作。</p><p><strong>视图的优点</strong></p><ol><li>视图提供了逻辑数据独立性</li><li>简化了用户观点</li><li>数据的安全保护功能</li></ol><h2 id="嵌入式SQL"><a href="#嵌入式SQL" class="headerlink" title="嵌入式SQL"></a>嵌入式SQL</h2><p>SQL的两种使用方式：</p><ol><li>终端交互方式下使用：交互式SQL</li><li>嵌入高级语言的程序中使用：嵌入式SQL</li></ol><p><strong>SQL的运行环境</strong></p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210602132757.png" alt="SQL语言运行环境"></p><p><strong>嵌入式SQL的使用规定</strong></p><p>允许嵌入的SQL语句引用宿主语言的程序变量（称为共享变量）</p><ul><li>游标定义语句 DECLARE</li><li>游标打开语句 OPEN</li><li>游标推进语句 FETCH</li><li>游标关闭语句 CLOSE</li></ul><p><strong>嵌入式SQL的使用技术</strong></p><ol><li>不涉及游标的SQL DML语句</li><li>设计游标的SQL DML语句</li><li>卷游标的定义和推进</li></ol><p><strong>动态SQL语句</strong></p><p>EXEC SQL PREPARE &lt;动态SQL语句名&gt;</p><p>FROM &lt;共享变量或字符串&gt;</p><p>这个语句可以在程序运行时由用户输入才组合起来</p><p><strong>ODBC</strong></p><p>公共接口API</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>关系运算模型和关系运算理论</title>
      <link href="2021/03/15/%E6%95%B0%E6%8D%AE%E5%BA%93_todo(1)/%E5%85%B3%E7%B3%BB%E8%BF%90%E7%AE%97%E6%A8%A1%E5%9E%8B%E5%92%8C%E5%85%B3%E7%B3%BB%E8%BF%90%E7%AE%97%E7%90%86%E8%AE%BA/"/>
      <url>2021/03/15/%E6%95%B0%E6%8D%AE%E5%BA%93_todo(1)/%E5%85%B3%E7%B3%BB%E8%BF%90%E7%AE%97%E6%A8%A1%E5%9E%8B%E5%92%8C%E5%85%B3%E7%B3%BB%E8%BF%90%E7%AE%97%E7%90%86%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="关系模型的基本概念"><a href="#关系模型的基本概念" class="headerlink" title="关系模型的基本概念"></a>关系模型的基本概念</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>用二维表格表示实体集，用关键码进行数据导航</p><p>关系元数：有多少个属性</p><p>基数：有多少个元组</p><div class="table-container"><table><thead><tr><th>一般术语</th><th>关系模型术语</th></tr></thead><tbody><tr><td>字段、数据项</td><td>属性</td></tr><tr><td>记录类型</td><td>关系模式</td></tr><tr><td>记录</td><td>元组</td></tr><tr><td>文件</td><td>关系</td></tr><tr><td>字段值</td><td>属性值</td></tr></tbody></table></div><span id="more"></span><ul><li>关键码<ul><li>超键：（工号、姓名）</li><li>候选键：（工号）</li><li>主键：（工号）// 如果选用了</li><li>外键</li></ul></li></ul><h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><p>关系：属性数目和类型相同的元组的集合</p><ul><li>每个属性值都不可分解</li><li>不允许出现重复元组（重复元组关系码会相同）</li><li>不考虑顺序（即行序）</li><li>属性理论上也无序，但使用时按习惯排列</li></ul><h3 id="完整性规则"><a href="#完整性规则" class="headerlink" title="完整性规则"></a>完整性规则</h3><ol><li>实体完整性规则：主键不能是空值</li><li>参照完整性规则：“不允许引用不存在的实体”</li><li>用户定义的完整性规则：针对具体的数据进行的约束</li></ol><h3 id="ER模型向关系模型的转换规则"><a href="#ER模型向关系模型的转换规则" class="headerlink" title="ER模型向关系模型的转换规则"></a>ER模型向关系模型的转换规则</h3><ol><li>每个实体类型转换成一个关系模式，实体的属性即为关系模式的属性，实体标识符即为关系模式的键</li><li><p>二元联系类型的转换</p><ul><li><p>1 对 1</p></li><li><p>1 对 N</p></li><li><p>M 对 N</p></li></ul></li></ol><h3 id="三级体系结构"><a href="#三级体系结构" class="headerlink" title="三级体系结构"></a>三级体系结构</h3><ul><li>关系模式：即记录类型</li><li>子模式/外模式：给特定用户使用</li><li>存储模式：文件内部的存储方式</li></ul><h3 id="关系模型的形式定义"><a href="#关系模型的形式定义" class="headerlink" title="关系模型的形式定义"></a>关系模型的形式定义</h3><ol><li><p>数据结构：全部数据和相互联系</p></li><li><p>数据操纵：一组完备的高级关系运算，关系代数、关系演算、关系逻辑</p></li><li><p>数据完整性规则</p></li></ol><h3 id="关系查询语言和关系运算"><a href="#关系查询语言和关系运算" class="headerlink" title="关系查询语言和关系运算"></a>关系查询语言和关系运算</h3><p>根据理论基础分为三类</p><ol><li>关系代数语言</li><li>关系演算语言</li><li>关系逻辑语言</li></ol><h2 id="关系代数"><a href="#关系代数" class="headerlink" title="关系代数"></a>关系代数</h2><p>SQL -&gt; 查询优化 -&gt;关系代数表达式 </p><h3 id="五个基本操作"><a href="#五个基本操作" class="headerlink" title="五个基本操作"></a>五个基本操作</h3><p>并、差、笛卡尔积、投影（选择特定的列/属性）$\pi$、选择（选择特定的行/元组）$\sigma$</p><h3 id="四个组合操作"><a href="#四个组合操作" class="headerlink" title="四个组合操作"></a>四个组合操作</h3><ul><li>交（实际上由两次差操作组合而成）</li><li>连接 join<ul><li>θ连接</li><li>F连接（相当于多个θ连接）</li></ul></li><li>自然连接：公共属性上值相等的进行连接：$R\Join S\equiv \pi_{去掉S中的公共属性}(\sigma_{公共属性上值相等}(R\times S))$</li><li>除法：去掉被除的列，留下的列中找被除的列全都有的</li></ul><h3 id="关系代数的七个扩充操作"><a href="#关系代数的七个扩充操作" class="headerlink" title="关系代数的七个扩充操作"></a>关系代数的七个扩充操作</h3><ul><li><p>改名</p></li><li><p>广义投影</p></li><li><p>赋值</p></li><li><p>外连接</p></li><li><p>外部并</p></li><li><p>半连接</p></li><li><p>聚焦操作</p></li></ul><h2 id="关系演算"><a href="#关系演算" class="headerlink" title="关系演算"></a>关系演算</h2><h3 id="元组关系演算"><a href="#元组关系演算" class="headerlink" title="元组关系演算"></a>元组关系演算</h3><p>元组关系演算表达式（元组表达式），一般形式：$\{ t|P(t)\}$</p><p>t是元组变量，表示一个元数固定的元组；P是公式，该式表示满足公式P的所有元组t的集合</p><p>公式由原子公式组成，有三种形式<br>$1.R(s)$<br>$2.s[i]\theta u[j]$<br>$3.s[i]\theta a或a\theta u[j]$</p><p>如果元组没有用存在量词或全称量词则是自由元组变量，否则是约束元组变量</p><p>可以和关系代数表达式相互转换</p><h3 id="域关系演算"><a href="#域关系演算" class="headerlink" title="域关系演算"></a>域关系演算</h3><p>形为$\{t_1…t_k|P(t_1,…,t_k) \}$</p><p>元组关系表达式到域关系表达式的转换</p><ol><li>对于k元元组变量，可以引入k个域变量，t用$t_1…t_k$替换，元组分量t[i]用$t_i$替换</li><li>量词同样对应替换</li></ol><h3 id="关系运算的安全约束和等价性"><a href="#关系运算的安全约束和等价性" class="headerlink" title="关系运算的安全约束和等价性"></a>关系运算的安全约束和等价性</h3><p>定义：在数据库技术中，不产生无限关系和无穷验证的运算称为安全运算，相应的表达式称为安全表达式，所采取的措施称为安全约束。</p><h2 id="关系代数表达式的优化"><a href="#关系代数表达式的优化" class="headerlink" title="关系代数表达式的优化"></a>关系代数表达式的优化</h2><p>笛卡尔积运算和连接运算最费时间</p><h3 id="等价变换规则"><a href="#等价变换规则" class="headerlink" title="等价变换规则"></a>等价变换规则</h3><p>连接和笛卡尔积的交换律、连接和笛卡尔积的结合律、投影的级联、选择的级联、选择和投影操作的交换、选择对笛卡尔积的分配律、选择对并的分配律、选择对集合差的分配律、选择对自然连接的分配律、选择对笛卡尔积的分配律、投影对并的分配律、选择与连接操作的结合、并和交的交换律、并和交的结合律</p><h3 id="优化算法"><a href="#优化算法" class="headerlink" title="优化算法"></a>优化算法</h3><p>最花费时间和空间的运算是笛卡尔积和连接操作，因此有三条启发性规则</p><ul><li><p>尽可能早地执行选择操作</p></li><li><p>尽可能早地执行投影操作</p></li><li><p>避免直接做笛卡尔积，把笛卡尔积操作之前和之后的一连串选择和投影合并起来一起做</p></li></ul><p>启发式优化算法</p><p>输入：一个关系代数表达式的语法树</p><p>输出：计算表达式的一个优化序列</p><p>方法：</p><ol><li>把每个子表达式都转换成级联形式：$\sigma_{F1}(…(\sigma_{Fn(E)})…)$。</li><li>在语法树中，尽可能把每个选择操作下推到最早可能执行的地方（即移向树的叶端）。</li><li>对每个投影操作，尽可能往下推，移向树的叶端。</li><li>把选择和投影合并成单个选择、单个投影或一个选择后跟一个投影。</li><li>将上述步骤得到的语法树的内结点分组。每个二元运算（$\times、\bigcup、-$）结点与其直接祖先（不超过别的二元运算结点）的一元运算结点（$\sigma或\pi$）分为一组</li><li>生成一个序列，每一组结点的计算是序列中的一步，各步的顺序是任意的，只要保证任何一组不会在它的子孙组之前计算。</li></ol><h2 id="关系逻辑"><a href="#关系逻辑" class="headerlink" title="关系逻辑"></a>关系逻辑</h2><p>略</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>对于否定操作，一般用差操作表示</p><p>对于检索具有全部特征的操作，一般要用除法操作表示</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库概念</title>
      <link href="2021/03/15/%E6%95%B0%E6%8D%AE%E5%BA%93_todo(1)/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E5%BF%B5/"/>
      <url>2021/03/15/%E6%95%B0%E6%8D%AE%E5%BA%93_todo(1)/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="数据库的由来和发展"><a href="#数据库的由来和发展" class="headerlink" title="数据库的由来和发展"></a>数据库的由来和发展</h2><p>文件系统-&gt;数据库-&gt;数据仓库</p><p>数据库系统：</p><ul><li>层次数据库：IMS</li><li>网状数据库：IDS</li><li>关系数据库：Oracle、DB2 …</li><li>新一代数据库产品：MySQL、MongoDB、Redis、Neoj4、Kafka、Elastic Search …</li></ul><p>大数据时代：大数据思维 — 关联</p><span id="more"></span><h2 id="数据描述"><a href="#数据描述" class="headerlink" title="数据描述"></a>数据描述</h2><p>现实世界（概念设计）-&gt;数据库管理系统（逻辑设计）-&gt;数据库（物理设计）</p><p>数据模型：概念数据模型和逻辑数据模型（包括数据结构、数据操作和数据完整性约束）</p><h3 id="概念设计的数据描述"><a href="#概念设计的数据描述" class="headerlink" title="概念设计的数据描述"></a>概念设计的数据描述</h3><p>实体关系模型：实体、属性、联系。</p><p>数据联系的描述：</p><ul><li>二元联系：一对一、一对多、多对多</li><li>三元联系：乘客、飞机、航班</li><li>一元联系：零件和组成</li></ul><p>实体联系图（ER图）</p><h3 id="逻辑设计的数据描述"><a href="#逻辑设计的数据描述" class="headerlink" title="逻辑设计的数据描述"></a>逻辑设计的数据描述</h3><p>主要的数据模型：</p><ul><li>层次模型：树形</li><li>网状模型：有向图（和ER模型直接的映射）</li><li>关系模型：二维表格</li><li>对象模型：实体的模型化（类），对关系模型的补充（对象关系模型）</li></ul><p>数据描述：</p><ul><li>字段 field</li><li>记录 record</li><li>文件 file</li><li>关键码 key</li></ul><h3 id="物理设计的数据描述"><a href="#物理设计的数据描述" class="headerlink" title="物理设计的数据描述"></a>物理设计的数据描述</h3><p>bit、byte、word、block（内存和外存交换信息的最小单位）、bucket、volume</p><h2 id="数据库体系结构"><a href="#数据库体系结构" class="headerlink" title="数据库体系结构"></a>数据库体系结构</h2><p>三个层次：外部级（用户视图）、概念级（全局视图）、内部级（存储视图）</p><h2 id="数据库管理系统（DBMS）"><a href="#数据库管理系统（DBMS）" class="headerlink" title="数据库管理系统（DBMS）"></a>数据库管理系统（DBMS）</h2><h3 id="工作模式"><a href="#工作模式" class="headerlink" title="工作模式"></a>工作模式</h3><p>在应用程序和DB之间发挥作用</p><h3 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h3><ol><li>数据库定义</li><li>数据库操纵</li><li>数据库保护</li><li>数据库维护</li><li>数据字典</li></ol><h3 id="模块组成"><a href="#模块组成" class="headerlink" title="模块组成"></a>模块组成</h3><ul><li>数据库用户</li><li>查询处理器</li><li>存储管理器</li><li>磁盘存储器</li></ul><h2 id="数据库系统-（DBS）"><a href="#数据库系统-（DBS）" class="headerlink" title="数据库系统 （DBS）"></a>数据库系统 （DBS）</h2>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第1章 量化设计与分析基础</title>
      <link href="2021/03/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84_todo/%E7%AC%AC1%E7%AB%A0%20%E9%87%8F%E5%8C%96%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90%E5%9F%BA%E7%A1%80/"/>
      <url>2021/03/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84_todo/%E7%AC%AC1%E7%AB%A0%20%E9%87%8F%E5%8C%96%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>体系结构：涵盖了计算机设计的所有三个方面：指令集体系结构、组成、硬件</p><h2 id="可信任度"><a href="#可信任度" class="headerlink" title="可信任度"></a>可信任度</h2><ul><li><p>模块可靠性：从一个参考初始时刻开始持续提供服务的度量。</p></li><li><p>模块可用性：系统正常工作的时间在连续两次正常服务间隔时间中所占的比率 </p><script type="math/tex; mode=display">可用性=\frac{MTTF}{MTTF+MTTR}</script></li></ul><span id="more"></span><h2 id="性能的测量、报告和汇总"><a href="#性能的测量、报告和汇总" class="headerlink" title="性能的测量、报告和汇总"></a>性能的测量、报告和汇总</h2><p>计算机用户关心缩短响应时间（执行时间），数据处理中心的操作人员关心吞吐量</p><p>X比Y快：X的执行时间比Y少</p><p>响应时间和CPU时间</p><p>基准测试程序：对使用同一种语言编写的程序采用同一种编译器和相同的一组编译标志</p><p>基准测试程序套件：由各种不同的真实应用程序构成，SPEC系列</p><p>SPECRatio：将基准计算机上的执行时间除以待评价计算机上的执行时间，得到一个与性能成正比的比值。用几何平均来计算均值。</p><script type="math/tex; mode=display">几何平均=\sqrt[n]{\prod_{i=1}^{n}{样本_i}}</script><h2 id="计算机设计的量化原理"><a href="#计算机设计的量化原理" class="headerlink" title="计算机设计的量化原理"></a>计算机设计的量化原理</h2><p>充分利用并行性、程序局部性原理（时间和空间）、重点关注经常性事件</p><p>Amdahl定律：加快某部件执行速度所能获得的系统性能加速比，受限于该部件的执行时间占系统中总执行时间的百分比。</p><script type="math/tex; mode=display">加速比=\frac{1}{(1-可改进比例)+\frac{可改进比例}{部件加速比}}</script><p>如果只针对整个任务的一部分进行改进和优化，那么所获得的加速比不超过<strong>1/（1-可改进比例）</strong></p><p>处理器性能公式：</p><script type="math/tex; mode=display">CPU时钟周期数=\sum_{n=1}^{n}{(CPI_i*IC_i)}</script><script type="math/tex; mode=display">总CPI=\frac{时钟周期数}{IC}=\sum_{n=1}^{n}{(CPI_i*\frac{IC_i}{IC})}</script><p>其中$\frac{IC_i}{IC}$表示第i种指令在程序中所占比例</p>]]></content>
      
      
      <categories>
          
          <category> 计算机体系结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第2章 算法基础</title>
      <link href="2021/03/13/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA_todo(4)/%E7%AC%AC2%E7%AB%A0%20%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
      <url>2021/03/13/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA_todo(4)/%E7%AC%AC2%E7%AB%A0%20%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="2-1-插入排序"><a href="#2-1-插入排序" class="headerlink" title="2.1 插入排序"></a>2.1 插入排序</h2><p>不断把元素插入左侧已排序数组的正确位置中</p><span id="more"></span><p>伪代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> j &lt;- <span class="number">2</span> to length[A]</span><br><span class="line"><span class="keyword">do</span> key &lt;- A[j]</span><br><span class="line">    <span class="comment">//将A[j]插入A[1...j-1]</span></span><br><span class="line">    i = j - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i &gt; <span class="number">0</span> and A[i] &gt; key</span><br><span class="line">         A[i + <span class="number">1</span>] &lt;- A[i]</span><br><span class="line">         i &lt;- i - <span class="number">1</span></span><br><span class="line">    A[i + <span class="number">1</span>] &lt;- key</span><br></pre></td></tr></table></figure><p>正确性证明：循环不变式A[1…j-1]</p><ol><li>初始化：循环第一次迭代前为真</li><li>保持：若循环的某次迭代前为真，那么下次迭代前它仍然为真</li><li>终止：在循环终止时，不变式提供一个性质，该性质有助于证明算法正确性</li></ol><h2 id="2-2-分析算法"><a href="#2-2-分析算法" class="headerlink" title="2.2 分析算法"></a>2.2 分析算法</h2><ul><li><p>描述算法所用资源及其代价的模型：随机访问机RAM模型</p></li><li><p>最坏情况与平均情况分析：往往考虑最坏情况（例如输入数组是反向排好序的）</p></li><li><p>增长量级：只考虑运行时间公式中最重要的项，如Θ(n^2)</p></li></ul><h2 id="2-3-算法设计"><a href="#2-3-算法设计" class="headerlink" title="2.3 算法设计"></a>2.3 算法设计</h2><ul><li><p>分治法（Divide Conquer Combine）</p><p>归并排序</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210308152734.png" alt="image-20210308152734063"></p></li><li><p>归并排序的分析：递归树</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210308153637.png" alt="image-20210308153637122"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法导论 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第3章 函数的增长</title>
      <link href="2021/03/13/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA_todo(4)/%E7%AC%AC3%E7%AB%A0%20%E5%87%BD%E6%95%B0%E7%9A%84%E5%A2%9E%E9%95%BF/"/>
      <url>2021/03/13/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA_todo(4)/%E7%AC%AC3%E7%AB%A0%20%E5%87%BD%E6%95%B0%E7%9A%84%E5%A2%9E%E9%95%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="渐进记号"><a href="#渐进记号" class="headerlink" title="渐进记号"></a>渐进记号</h2><ul><li>Θ记号：等于（即T(n) = Θ(g(n))，T(n) = g(n)，这里表示T(n)在一个常量银子内等于g(n)，称g(n)是f(n)的一个渐进紧确界，下同）</li><li>O记号：小于等于、最坏情况，时间复杂度上界</li><li>Ω记号：大于等于</li><li>o记号：小于</li><li>ω记号：大于</li></ul><span id="more"></span><h2 id="标准记号与常用函数"><a href="#标准记号与常用函数" class="headerlink" title="标准记号与常用函数"></a>标准记号与常用函数</h2><ul><li>多项式</li><li>指数</li><li>对数</li><li>阶乘</li><li>多重函数（多重对数函数lg*n）</li><li>斐波那契数</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法导论 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>上车问题</title>
      <link href="2021/03/13/%E7%AE%97%E6%B3%95%E9%A2%98%E8%A7%A3_todo(1)/%E4%B8%8A%E8%BD%A6%E9%97%AE%E9%A2%98/"/>
      <url>2021/03/13/%E7%AE%97%E6%B3%95%E9%A2%98%E8%A7%A3_todo(1)/%E4%B8%8A%E8%BD%A6%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>问题描述：火车从始发站（第 1站）开出，在始发站上车的人数为 a，然后到达第 2 站，在第 2 站有人上、下车，但上、下车的人数相同，因此在第 2 站开出时车上的人数保持为 a 人。从第 3 站起，上、下车的人数有如下规律：上车的人数都是前两站上车人数之和，而下车人数等于上一站上车人数，一直到终点站的前一站。已知：共有 n 个车站，始发站上车的人数为 a ，终点站全部下车的人数是 m。试问 第x 站开出时车上的人数是多少？程序运行时，先输入四个整数：始发站上车人数 a，车站数 n，终点站下车人数 m 和所求的站点编号 x。要求输出从 x 站开出时车上的人数。</p><span id="more"></span><p>根据题意列出上车下车人数的表格：</p><div class="table-container"><table><thead><tr><th>车站</th><th>进站前人数</th><th>上车人数</th><th>下车人数</th><th>出站人数</th></tr></thead><tbody><tr><td>1</td><td>0</td><td>a</td><td>0</td><td>a</td></tr><tr><td>2</td><td>a</td><td>b</td><td>b</td><td>a</td></tr><tr><td>3</td><td>a</td><td>a+b</td><td>b</td><td>2a</td></tr><tr><td>4</td><td>2a</td><td>a+2b</td><td>a+b</td><td>2a+b</td></tr><tr><td>5</td><td>2a+b</td><td>2a+3b</td><td>a+2b</td><td>3a+2b</td></tr><tr><td>…</td><td>…</td><td>…</td><td>…</td><td>…</td></tr><tr><td>n-1</td><td>?</td><td>?</td><td>?</td><td>m</td></tr><tr><td>n</td><td>m</td><td>0</td><td>m</td><td>0</td></tr></tbody></table></div><p>根据表格本题的关键在于根据m求出b</p><p><em>m=f(n-1)a+g(n-1)b</em></p><p>求出f和g即可</p><p>而出站人数=进站人数 + 上车人数 - 下车人数</p><p>每站的上车人数和下车人数可以根据题意递推求得</p><p>据此可解决问题</p><p>C++代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cin</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//每一站上了多少a</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">upa</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> upa(n<span class="number">-1</span>) + upa(n<span class="number">-2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//每一站上了多少b</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">upb</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> upb(n<span class="number">-1</span>) + upb(n<span class="number">-2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//每一站下了多少a</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">downa</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span> || n==<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> upa(n<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//每一站下了多少b</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">downb</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> upb(n<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//每一站出的时候有多少a</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span> || n==<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (upa(n) - downa(n)) + f(n<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//每一站出的时候有多少b</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">g</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span> || n==<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (upb(n) - downb(n)) + g(n<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a, n, m, x;</span><br><span class="line">    <span class="keyword">int</span> b; <span class="comment">//b表示第二站上车人数</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入始发站上车人数，车站数，终点站下车人数和所求的站点编号：&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>; </span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据定义m=f(n-1)+g(n-1)，据此求出b</span></span><br><span class="line">b = (m-(f(n<span class="number">-1</span>) * a)) / g(n<span class="number">-1</span>);</span><br><span class="line">    <span class="comment">//计算第x站出站后人数</span></span><br><span class="line">ans = (f(x)*a) + (g(x)*b);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">&quot;第&quot;</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;x;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">&quot;站开出时车上的人数是:&quot;</span>; </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法题解 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
