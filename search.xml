<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>同时多线程结构上操作系统的行为分析</title>
      <link href="2021/04/11/%E5%90%8C%E6%97%B6%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BB%93%E6%9E%84%E4%B8%8A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%A1%8C%E4%B8%BA%E5%88%86%E6%9E%90/"/>
      <url>2021/04/11/%E5%90%8C%E6%97%B6%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BB%93%E6%9E%84%E4%B8%8A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%A1%8C%E4%B8%BA%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>作者：Joshua A. Redstone, Susan J. Eggers and Henry M. Levy University of Washington</p><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本论文首次分析了操作系统在同步多线程(SMT)处理器上的执行情况。虽然SMT在过去六年得到了广泛的研究，但这些研究大都集中在用户模式执行上。然而，许多最适合多线程技术的应用程序都将很大一部分时间都花在内核代码上。因此，要完全理解这种工作负载的行为，需要执行和测量操作系统以及应用程序本身。</p><p>为了进行这项研究，我们做了以下工作：<br>1.修改Digital Unix 4.0d操作系统以运行在SMT CPU上<br>2.将我们的SMT Alpha指令集模拟器集成到SimOS模拟器种以提供一个执行环境</p><p>对于操作系统密集型工作负载，我们在SMT上运行多线程Apache Web服务器。我们将Apache的用户模式和内核模式行为与标准SPECInt工作负载进行了比较。总的来说，我们的结果展示了SMT处理器上操作系统密集型工作负载的微架构影响，并提供了对Apache Web服务器操作系统需求的深入了解。SMT处理器与Web和OS软件之间的协同作用产生了比以前检查过了任何工作负载（包括商业数据库和显示并行程序）上更大的吞吐量增益。</p><h1 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h1><p>同步多线程（SMT）是一种延迟容忍的CPU体系结构，它在每个周期中从多个线程执行多个指令。SMT的工作原理是将线程级并行转换为指令级并行，有效地将来自不同线程的指令送入大问题、无序超标标量处理器的功能单元。在过去的六年里，SMT得到了广泛的研究。康柏最近宣布Alpha 21464将包括SMT。作为一种通用的吞吐量增强机制。同步多线程特别适合于天生是多线程的应用程序，例如作为数据库和Web服务器，以及多程序和平行的科学工作负载。</p><p>本文首次检查了：<br>1.SMT架构上的操作系统行为<br>2.Web服务器SM应用程序，对于基于服务器的环境，操作系统是工作负载的关键组件。<br>以前的研究表明，数据库系统在内核中花费了30%到40%的执行事件，而我们的测量表明，Apache Web服务器在内核中花费了75%以上的时间。因此，对它们行为的任何分析都应该包括操作系统活动。<br>由于几个原因，操作系统对处理器的要求比典型的用户代码更高。<br>首先，操作系统是巨大的程序，由于代码和数据的大小，它们会淹没缓存和TLB。<br>其次，由于频繁的分支和不频繁的循环，操作系统可能会影响分支预测性能。<br>第三，操作系统的执行通常是短暂的和间歇的，由中断、异常或系统调用调用，并可能导致替换有用的缓存、TLB和分支预测状态，但好处很少或没有。<br>第四，操作系统可能执行自旋等待、显式缓存/TLB失效和其他用户模式代码中不常见的操作。由于这些原因，忽略操作系统（在架构模拟中通常是这样做的）可能会导致对系统级性能的误导性描述。即使对操作系统不密集的应用程序，与操作系统执行的指令数量相比，操作系统的性能影响也可能不成比例地大。<br>对于SMT，功能处理器和操作系统还不存在。相反，我们扩展了SimOS-Alpha基础设施，添加了一个基于alpha的SMT核心作为指令执行引擎。SimOS是一个模拟器，足够详细的引导和执行一个完整的操作系统，在康柏Alpha的情况下，SimOS也执行PAL代码。我们还修改了Digital Unix 4.0d操作系统以支持SMT。这种修改非常简单，因为Digital Unix的目标是在传统的共享内存处理器上运行，因为已经为多线程操作同步了。<br>作为SMT环境中操作系统行为的首次研究，我们的目标是回答几个基本问题<br>1.当操作系统添加到工作负载中时，以前报告的结果会发生什么变化（如果有的话）？特别是，我们希望核实之前研究的IPC结果，看看他们排除OS是否过于乐观。对于这些研究我们使用了一个由多个SPECInt基准组成的多程序工作负载。<br>2.也是更重要的，操作系统密集型工作负载和传统的工作负载都执行SMT在体系结构级别上的主要行为差异是什么？例如，操作系统如何改变微体系结构级别的资源利用率，对于具有细粒度资源共享（如SMT）的处理器，它会导致什么特殊问题（如果有的话）？对于这个问题，我们研究了一个操作系统密集型的应用程序，即广泛使用的Apache Web服务器，它是由SPECWeb基准测试驱动的。我们比较了Apache工作负载和SPECInt工作负载，以研究高操作系统和低操作系统使用的擦会议。<br>3.像Apache这样的Web服务器如何从SMT中获益，从软件的角度看，它将时间花在哪里？这个分析本身就很有趣，因为Web服务器和类似的应用程序越来越重要。因此我们给出了无序超标量和SMT上Apache的结果。<br>总定来说，我们的结果描述了操作系统密集型工作负载的架构行为和关键应用程序（Apache Web服务器）的软件行为（在操作系统内）。<br>本文组织如下。第二节详细介绍了我们的测量方法、模拟环境和我们使用的工作负载。第三节给出了我们在SMT上的两种工作负载（包括操作系统执行）的测量结果。第三节的前半部分介绍了由SPECInt应用程序组成的多编程工作负载，而后半部分主要关注Apache工作负载。第四节描述了以前的工作及其与我们研究的关系。我们在第五节做总结。</p><h1 id="2-方法"><a href="#2-方法" class="headerlink" title="2. 方法"></a>2. 方法</h1><p>本节描述在我们基于模拟的实验中使用的方法。我们首先描述SMT处理器和模拟硬件配置的西结。然后，我们从硬件和软件两个层面描述操作系统仿真环境。最后，我们描述评估的两个工作负载：一个是SPECInt95基准测试的多编程工作负载；另一个是Apache Web服务器。</p><h2 id="2-1-SMT和超标量处理器模型"><a href="#2-1-SMT和超标量处理器模型" class="headerlink" title="2.1 SMT和超标量处理器模型"></a>2.1 SMT和超标量处理器模型</h2><p>SMT是一种延迟容忍的CPU体系结构，它在每个周期中执行来自多个线程的多个指令。通过线程级并行转换为指令级并行，从不同线程发出指令的能力可以更好地利用执行资源。以前的研究已经证实，SMT可以有效地提高各种工作负载上的吞吐量，同时仍然为单线程应用程序提供良好的性能。<br>在硬件层面，SMT是现代无序超标量（如MIPS R10000或Alpha 21264）的直接扩展。SMT复制了一个超标量的寄存器文件、程序计数器、子程序堆栈和内部处理器寄存器，以保存多个线程的转台（我们将包含线程状态的硬件资源集称为上下文）。除了复制线程状态以外，SMT还具有用于管道刷新、指令退出、子例程返回预测和捕获的每上下文机制。康柏估计，对支持SMT所需的无序超标量进行修改，只会使芯片面积增加10%。<br>表一列出了模拟的SMT处理器和存储系统的参数，这些参数使选择作为近期处理器的特性。我们评估的无序超标量提供了与SMT相同的硬件资源，除了它缺少额外的硬件上下文，并且由于它的寄存器文件更小，它有更少的两个流水线阶段。<br><img src="https://img-blog.csdnimg.cn/2020122014505387.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjMzMzQw,size_16,color_FFFFFF,t_70" alt="表一：SMT参数"></p><h2 id="2-2-操作系统执行"><a href="#2-2-操作系统执行" class="headerlink" title="2.2 操作系统执行"></a>2.2 操作系统执行</h2><h3 id="2-2-1-操作系统仿真环境"><a href="#2-2-1-操作系统仿真环境" class="headerlink" title="2.2.1 操作系统仿真环境"></a>2.2.1 操作系统仿真环境</h3><p>在某种程度上，操作系统只是一个大程序；然而，它在访问低级硬件资源时（例如，I/O设备寄存器和内部CPU寄存器）和响应低级硬件事件（例如，异常和中断）方面是独特的。因此，要模拟操作系统，就需要模拟这些资源和事件。在本工作中，我们构建了SimOS-alpha硬件仿真框架。将我们的SMT CPU模拟器集成到SimOS中。这允许我们在模拟器上引导和运行操作系统，并在我们的模拟器中包含将在实际CPU上运行的每条指令，有特权的或无特权的。SimOS环境也执行Alpha PAL代码—存在于操作系统本身之下的一层软件。例如，PAL代码用于响应TLB丢失和处理操作系统内的同步（SETIPL）。我们还对几乎所有影响内存层次结构的操作系统/硬件交互进行建模，比如DMA操作和缓存刷新指令。一个例外是来自网络接口的DMA操作；尽管包含与网络相关的DMA将使Apache工作负载的内存总线事务数加倍（SPECInt工作负载不使用网络），但平均内存总线延迟仍然微不足道，因为它目前每个总线事务只有0.25个周期。<br>我们的研究集中在CPU和内存性能瓶颈上。为了节省模拟时间，我们模拟了一个零延迟磁盘。使用大型、快速磁盘阵列子系统对机器进行建模。但是，将执行所有操作磁盘的操作系统代码，包括磁盘驱动程序和DMA操作。对磁盘绑定及其进行建模可能会改变系统行为，特别是在缓存层次结构中。</p><h3 id="2-2-2-操作系统修改"><a href="#2-2-2-操作系统修改" class="headerlink" title="2.2.2 操作系统修改"></a>2.2.2 操作系统修改</h3><p>我们执行康柏digital Unix 4.0d操作系统，这是一个（共享内存）多处理器感知的操作系统。通过允许SMT在操作系统中显示为共享内存多处理器（SMP），只需在SMT和SMP体系结构不同的地方对操作系统进行更改。在Alpha的情况下，这些差异是SMT的共享TLB和L1缓存，而Alpha SMP的每个处理器的TLB和L1缓存，而Alpha SMP的每个处理器的TLB和L1缓存。在这两种差异中，只有与tlb相关的OS代码需要修改。<br>Alpha TLB在TLB条目上包含一个地址空间号（ASN）标记，它允许多个地址空间共享TLB，并减少上下文切换时的TLB刷新。由于多个线程可以同时访问SMT处理器的共享TLB，操作这些asn需要在上下文切换期间进行适当的互斥。因此，我们对tlb相关的代码做了一些更改。首先，我们修改了ASN分配算法以覆盖多个执行线程。其次，我们在每个上下文基础上复制了用于修改TLB条目的内部处理器寄存器；这样就删除了竞态条件，并允许多个上下文并行处理TLB miss。第三，我们删除了TLB击落代码，这在单处理器SMT中是不必要的。<br>尽管SMT处理器和MP的缓存架构接口不同，但这并不需要对操作系统进行修改。该接口提供了刷新L1指令和数据缓存的命令，在SMT中，这会导致刷新线程共享缓存，而不是线程本地缓存。由于缓存是软状态，因此结果的额外刷新可能是不必要的，但绝对不会是错误的。<br>我们执行的操作系统包含在SMT上运行Digital Unix所需的最小更改集，但没有探索大量的优化机会。例如，操作系统结构（如空闲循环和自旋锁定）是不必要的，会浪费SMT上的资源。（然而，在本文实验中，空闲周期栈稳定状态CPU比例不超过0.7%，旋转锁定在SPECInt工作负载中占不到1.2%，在Apache工作负载中占不到4.5%）。另一个可能的优化是用smt优化的调度器替换MP OS进程调度器。我们计划研究操作系统优化为未来的工作，但令人鼓舞的是，可以直接修改支持smp的操作系统，以便在SMT处理器上工作。</p><h2 id="2-3-模拟工作负载"><a href="#2-3-模拟工作负载" class="headerlink" title="2.3 模拟工作负载"></a>2.3 模拟工作负载</h2><p>在这项研究中，我们检查了两种不同的工作负载。第一个是多程序工作负载，由SPEC95Int的所有8个应用程序组成，我们对该套件模拟了6.5亿条指令。选择SEPCInt95有两个原因，首先，由于它通常用于架构评估，包括SMT的研究，我们希望了解在以前的工作中没有包含OS活动遗漏了什么。其次，由于Apache也是一个interger程序，SPECInt的性能可以作为基线，帮助了解Apache的性能。<br>第二个工作负载是Apache（版本1.3.4），这是一个流行的公共域Web服务器，由大多数Web站点运行。因为它大量使用OS服务（我们的测量显示75%的执行周期是在内核中度过的），所以它是一个用于检查OS性能的丰富环境（本文中介绍的大多数Apache数据都是基于对超过10亿条指令的模拟，从服务器空闲时开始）。然而，第3.2节中的超标量实验是在大约7亿条指令的模拟上进行的，受到模拟时间的限制。<br>我们使用SPECWeb96驱动Apache，这是一个Web服务器性能基准测试。我们配置Apache64个服务器进行，配置了SPECWeb 128个提供请求的客户端。为了支持使Apache饱和的请求速率。为了支持使Apache饱和所需的请求速率，我们将SPECWeb基准作为两个驱动进程执行，每个驱动程序有64个客户端。如果驱动程序运行在一个本地Alpha，然后网络代码将无法正常运行，消息被TCP丢弃。因此，我们构建了一个框架，在这个框架中，我们在单个Alpha上运行三个SimOS副本。结果是SPECWeb96客户端出现了与Apache完全相同的减速。客户端以Apache可以处理的速度生成数据包，并且双方的OS代码可以正确地管理网络接口和协议。在这三个SimOS环境之间，我们模拟了一个直接的网络连接，该连接传输数据包不存在丢失和延迟。模拟的网卡以10毫秒的时间粒度中断CPU，并且网络模拟器每隔10毫秒强制跨所有机器执行屏障同步。这个屏障使模拟器保持同步运行，并保证我们实验的可重复性的模拟的确定性执行。</p><h3 id="2-3-1-只模拟应用程序代码"><a href="#2-3-1-只模拟应用程序代码" class="headerlink" title="2.3.1 只模拟应用程序代码"></a>2.3.1 只模拟应用程序代码</h3><p>为了更精确地描述操作系统对性能的影响，我们将包含操作系统工作负载模拟与之模拟应用程序代码的工作负载模拟进行了比较。仅用于应用的模拟是通过一个单独的模拟器来完成的，该模拟器源自以前SMT研究中使用的SMT模拟器。仅应用程序模拟器将所有系统调用和内核陷阱建模为立即完成，对硬件状态没有影响。</p><h1 id="3-结果"><a href="#3-结果" class="headerlink" title="3. 结果"></a>3. 结果</h1><p>本节介绍基于simos的操作系统行为测量结果及其对SMT处理器的影响，在3.1节中，我们考虑一个特定的多程序工作负载；第3.2节研究了Apache工作负载，并将其与SPECInt的结果进行了比较。</p><h2 id="3-1-对SPECInt工作负载的评估"><a href="#3-1-对SPECInt工作负载的评估" class="headerlink" title="3.1 对SPECInt工作负载的评估"></a>3.1 对SPECInt工作负载的评估</h2><p>传统上，架构师根据科学和程序开发工作负载的分析来决定处理器和内存子系统的设计，SPECInt基准套件就是典型的例子。然而，大多数这样的分析只检查用户模式代码。在本节中，我们将评估这种做法的适当性，同步多线程上下文中的方法学策略。我们希望特别回答两个问题。首先，在SMT上包括（或不包括）操作系统的影响是什么，即使对于SPECInt基准测试的多编程工作负载也是如此？虽然我们预计SPECInt的操作系统使用率较低，但之前的研究表明，忽略内核代码，即使在这样低操作系统环境中，也会导致对内存系统行为的不良估计。第二，操作系统代码对8-上下文SMT的影响与无序超标量的影响相比如何？SMT的独特之处在于它同时执行内核模式和用户模式指令。也就是说，在一个周期中，来自多个内核例程的指令可以与来自多个用户应用程序的指令一起执行，而所有这些指令都共享一个内存层次结构。相反，超标量可以将来自单个应用程序的用户指令长流与来自单个内核服务的内核指令长流交替使用。在两种体系结构中，这种差异可能会对内存系统性能产生不同的银杏果i昂。在3.2节中，我们将根据Apache（一种操作系统更密集的工作负载）研究类似的问题。</p><h3 id="3-1-1-传统的SPEC-interger工作负载在SMT处理器上执行的OS行为"><a href="#3-1-1-传统的SPEC-interger工作负载在SMT处理器上执行的OS行为" class="headerlink" title="3.1.1 传统的SPEC interger工作负载在SMT处理器上执行的OS行为"></a>3.1.1 传统的SPEC interger工作负载在SMT处理器上执行的OS行为</h3><p>图一显示了多程序SPECInt95基准测试的执行周期百分比，这些基准测试占用用户空间、内核空间，或者在SMT处理器上执行时空闲。在程序启动期间（如图虚线左侧所示），操作系统平均占执行周期的18%，一旦达到稳定状态，它就会下降到相当稳定的5%，在执行过程中至少要维持16亿次循环（图中只显示了一部分）。在程序初始化较高的OS活动主要是由于TLB未处理（占所有 执行周期的12%）和系统调用5%，如图二所示。大多数TLB活动集中在处理TLB在用户空间丢失的数据（大约95%）。TLB错过了对内核内存管理的调用，而页面分配占据了这些调用的大部分，如图三所示。大多数由应用程序发起的系统调用是针对文件系统的；特别是，读取输入文件占用3.5%的执行周期，这与读取源和/或配置文件的应用程序一致。进程创建和控制以及内核前导（识别并分派到特定的系统调用）占用了大部分剩余的系统调用时间。注意，内核活动使Alpha PAL代码的执行相形见绌。<br>一旦达到稳定状态，内核活动将下降到执行周期的5%，但是TLB处理和系统调用时间的比例与启动期间大致相同。唯一重要的变化是文件读取调用的减少，因为程序已经从初始化转向。<br>表2显示了内核中各主要指令类别的指令分布情况；这些值是证书应用程序的典型值，包括SPEC整数基准测试。内核指令与用户指令在三个方面不同，首先，大约一半的内存操作在程序启动时，三分之一的负载和三分之二的存储处于稳定状态，不适用TLB，即TLB。它们直接指定物理地址。其次，内核控制传输包括PAL入口/返回分支。第三，与用户代码相比，稳态内核代码的条件分支占有率只有用户代码的一般。但是，由于内核执行时间很少，所以这些差异的总体影响很小。</p><p><img src="https://img-blog.csdnimg.cn/20201223203038244.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjMzMzQw,size_16,color_FFFFFF,t_70#pic_center" alt="图一 SPECInt95在SMT上执行的执行周期分解，在内核中花费的周期占所有执行周期的百分比在顶部黑色部分"><br><img src="https://img-blog.csdnimg.cn/20201223182106203.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjMzMzQw,size_16,color_FFFFFF,t_70#pic_center" alt="图2：SPECInt的内核时间分解"></p><p><img src="https://img-blog.csdnimg.cn/20201223122255824.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjMzMzQw,size_16,color_FFFFFF,t_70#pic_center" alt="图3：内存内核管理代码"><br><img src="https://img-blog.csdnimg.cn/2020122312230790.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjMzMzQw,size_16,color_FFFFFF,t_70#pic_center" alt="图4：系统调用占总执行的百分比"><br><img src="https://img-blog.csdnimg.cn/20201223122319240.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjMzMzQw,size_16,color_FFFFFF,t_70#pic_center" alt="表2：按指令类型分列的动态指令在SPECInt工作负载中的百分比，内存操作的括号中的百分比表示加载和存储的物理地址的比例。还包括分支指令的百分比细分，对于条件分支，括号中的数字表示所采用的条件分支的百分比"></p><h3 id="3-1-2-为什么要在特定的工作负载上模拟操作系统"><a href="#3-1-2-为什么要在特定的工作负载上模拟操作系统" class="headerlink" title="3.1.2 为什么要在特定的工作负载上模拟操作系统"></a>3.1.2 为什么要在特定的工作负载上模拟操作系统</h3><p>表3上半部分显示了在SMT上模拟SPECInt95和操作系统时，几种硬件数据结构中的未命中率。总的结果反映了其他研究人员在单线程处理器研究中发现的情况，即操作系统表现出的性能比特殊应用程序要差。分支目标缓冲器的内核未命中率特别高，因为两个因素：操作系统执行其实很少，无法建立一个持久的分支目标状态；大多数内核未命中（78%）取代其他内核条目错误是由于重复的变化间跳转的目标地址。<br>表3下半部分的分布结果表明，除指令缓存外，应用程序线程内部或应用程序线程之间的冲突是造成绝大多数缺失的原因。内核引起的冲突缺失仅占BTB缺失的10%，数据缓存缺失的18%，L2缓存缺失的9%和数据TLB缺失的18%，相比之下，大多数指令缓存丢失（60%）是由内核引起的。强制缺失对于所有硬件结构都是微不足道的，除了L2缓存，在L2缓存中内核为应用程序预取数据，因此吸收了许多第一次引用缺失的成本。<br>在较高的层次上，多编程SPECInt工作负载的内核执行频率较低可以改善内核特定于硬件组件的性能，表4通过比较在SMT上有操作系统活动和没有操作系统活动时以稳定状态执行的SPECInt工作负载的几个体系结构度量，说明了这种影响。这些数字表明，指令吞吐量仅略有下降，原因是操作系统，除了少数例外，线程共享硬件资源利用率在包含内核时略有下降。我们观察到性能下降百分比较大的那些硬件组件并没有对性能底线造成很大影响，因为它们最初并没有表现出特别糟糕的行为。<br>最严重的变化是模拟内核造成的，依赖于fetch引擎的两个部分，分支预测硬件和指令缓存之间的交互。转移错误预测增加了15%，指令缓存丢失增加了1.9倍，很大程度上是由于内核执行的干扰。指令丢失主要是由指令页重映射引起的缓存刷新引起的，而不是由特定缓存位置的冲突引起的，指令缺失的增加反过来导致可获取上下文的数量减少的8%，例如，那些不为指令丢失或中断服务的上下文，由于模拟器内核减少了可取上下文的平均数量，因此选择了一个预测错误的上下文来更频繁地获取数据，从而获得更多错误路径指令。<br>令人惊讶的是，内核比SPECInt应用程序有更好的转移预测，尽管它缺乏基于循环的代码（当同时执行这两个操作时，用户代码中的错误率是9.3），内核代码中的大多数条件分支都用于菱形控件，在这种控件中，目标代码执行异常条件。虽然内核BTB漏失率很高，但是对一个漏失的默认预测执行直通代码，因此更多的内核预测往往是正确的。<br>综上所述，尽管内核内存子系统的转移预测漏失率很高，但SMT指令吞吐量仅受到轻微影响，因为SPECInt程序中的内核活动很小，SMT很好地隐藏了延迟，因此，对类似特殊科学应用的SMT基本性能感兴趣的研究人员可以放心地依赖于应用及模拟。然而，如果专注于特定硬件组件（比如数据TLB）的设计，或者特定硬件策略（比如推测何时取数据）的设计，那么包括操作系统的执行时间影响是很重要的。<img src="https://img-blog.csdnimg.cn/20201223122337781.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjMzMzQw,size_16,color_FFFFFF,t_70#pic_center" alt="表3：在SMT上模拟SPECInt95和操作系统时，在几种硬件数据结构种总的缺失率和缺失分布，缺失类别是所有用户内核缺失的百分比。粗体条目表示内核诱导干扰。用户内核冲突是指用户线程与某种类型的内核活动冲突"><br><img src="https://img-blog.csdnimg.cn/20201223122347629.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjMzMzQw,size_16,color_FFFFFF,t_70#pic_center" alt="表4：带有SMT和超标量的操作系统和不带操作系统的SPECInt95的体系结构度量"></p><h3 id="3-1-3-在评估大问题超标量模型时是否应该模拟操作系统？"><a href="#3-1-3-在评估大问题超标量模型时是否应该模拟操作系统？" class="headerlink" title="3.1.3 在评估大问题超标量模型时是否应该模拟操作系统？"></a>3.1.3 在评估大问题超标量模型时是否应该模拟操作系统？</h3><p>就总体执行周期而言，在执行SPECInt基准测试时，操作系统在无序超标量和SMT处理器上的行为类似。超标量处理器只花费稍微大一点的执行部分在操作系统中。对于两个处理器，处于稳定状态的操作系统周期的百分比是相同的。<br>同样，在超标量处理器和SMT处理器，在启动和稳定状态下OS周期的分布都类似。一个例外是超标量处理器数据TLB的内核缺失所花费的较大部分时间。而且，DTLB丢失的内核处理会显示出糟糕的指令缓存行为，这增加了花费在这段代码中的时间。内核指令缓存在超标量上的丢失率是13.8%，其中81%的丢失是由于内核DTLB错误处理代码造成的。<br>在微架构级别上，操作系统在无序超标量上扮演不同的角色。超标量上的指令吞吐量大约是SMT的一半，如表4所示。尽管超标量硬件数据结构中的缺失较少发生，因为一次只执行一个线程，但超标量缺乏SMT隐藏延迟的能力。在过去对非os工作负载的SMT的所有研究中，SMT延迟容错超过了内存子系统和分支硬件中额外的线程间的冲突的补偿，最明显的是操作系统缺乏超标量的延迟隐藏能力，在稳定状态下只能达到0.6IPC，相比之下，用户代码的IPC为3.0。此外，超标量按比例压缩的指令数量大约是SMT的两倍，因为超标量只有一个要获取的指令源。<br>总是，包括操作系统在SPECInt超标量体系结构模拟负载扰动底线性能超过SMT，因为超标量体系结构性能更容易受到指令延迟（在其他硬件组件中，性能下降幅度较小，或者反映了先前性能良好的组件的大幅退化）。这一结果表明，研究人员在评估超标量系统结构时，不应该对忽略操作系统的影响抱有信心。</p><h2 id="3-2-对Apache（一个操作系统密集型工作负载）的评估"><a href="#3-2-对Apache（一个操作系统密集型工作负载）的评估" class="headerlink" title="3.2 对Apache（一个操作系统密集型工作负载）的评估"></a>3.2 对Apache（一个操作系统密集型工作负载）的评估</h2><p>Apache是部署最广泛的Web服务器。它的作用很简单：响应客户端HTTP请求包，通常返回请求的HTML或其他对象。对象存储在面向文件的数据库中，如果没有缓存在服务器的内存中，则从磁盘读取。下面我们将检查基于apache的工作负载。</p><h3 id="3-2-1-操作系统在执行Apache时的作用"><a href="#3-2-1-操作系统在执行Apache时的作用" class="headerlink" title="3.2.1 操作系统在执行Apache时的作用"></a>3.2.1 操作系统在执行Apache时的作用</h3><p>图五展示了Apache工作负载在SMT上执行的内核和用户活动，这些数据在几个方面与SPECInt多道程序工作负载有显著的不同，首先，Apache起步时间短；这不奇怪，因为Apache的启动只是简单地接收第一个传入的请求并唤醒服务器线程。其次，一旦请求到达，我们看到Apache花费超过75%的时间在操作系统上，即，Apache的大部分执行是在操作系统中，而不是在应用程序代码中。<br>图六显示了Apache内核周期的分解，与SPECInt启动期和稳定状态期比较。对Apache来说，其内核时间的大部分都花在了执行系统调用上。也就是说，SPECInt工作负载由隐式操作系统使用主导，而Apache则更显式地使用操作系统。Apache还显示了通过网络中断的重要内核活动—SPECInt工作负载中没有响应活动，Apache花费了34%的内核周期在neister线程中处理中断请求或响应网络中断，neister线程是一组相同的线程，负责代表到达的消息管理网络协议栈。Apache中只有少量的内核活动是由于DTLB失误造成的，相比之下，SPECInt工作负载大部分内核时间与TLB丢失处理有关（稳定状态为82%，启动时为58%）<br>图7显示了Apache系统调用更详细的分解。在左边，我们看到由Apache执行的每个系统调用引起的执行周期的百分比。如果所示，大部分时间花在处理对I/O例程的调用上：例如，Apache在star例程（查询文件信息）中花费了10%的周期，在读/写中花费了19%的周期，在I/O控制操作（如打开）中花费10%的周期，图7的右侧显示了相同数据的不同细分。在这里，我们根据资源类型（网络或文件）以及操作类型限定执行时间。从图中我们可以看出，网络读/写是最大的时间消耗者，大约占所有周期的17%，占Apache内核周期的22%。如上所述，文件查询（star例程）是第二大消耗者，其次是文件控制操作，占所有周期6%，占内核周期的8%。总的来说，花费在网络和文件系统的系统调用上的时间几乎与network相同服务占所有内核周期的21%，文件服务占18%。<br><img src="https://img-blog.csdnimg.cn/20201223122411242.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjMzMzQw,size_16,color_FFFFFF,t_70#pic_center" alt="图五：在SMT上执行的Apache中的内核和用户活动"><br><img src="https://img-blog.csdnimg.cn/20201223122421736.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjMzMzQw,size_16,color_FFFFFF,t_70#pic_center" alt="图六：在SMT上Apache内核活动分解，SPECInt工作负载的启动阶段和稳定阶段被包括进来比较"><br><img src="https://img-blog.csdnimg.cn/20201223122432279.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjMzMzQw,size_16,color_FFFFFF,t_70#pic_center" alt="图7：在SMT处理器上处理内核系统调用所花费的执行时间分解"></p><h3 id="3-2-2-结构性能特点"><a href="#3-2-2-结构性能特点" class="headerlink" title="3.2.2 结构性能特点"></a>3.2.2 结构性能特点</h3><p>表5显示了Apache中内核和用户代码的指令类型细分。总体来说，这类似于相应的SPECInt表。Apache的稳定加载/存储百分比更接近SPECInt的启动加载/存储百分比。因为SPECInt的启动包括各种OS服务，而稳定状态SPECInt工作负载主要由tlb处理条例控制。总的来说，Apache中大约一半的内核内存访问操作绕过TLB，即，它们直接指定物理地址。<br>表6展示了Apache的架构性能特征，并将它们与稳定状态下的SPECInt工作负载进行了比较，该图还显示了运行在超标量上的Apache的统计信息。Apache工作负载在SMT上实现了每个周期4.6条指令的吞吐量（最多为6条），比SPECInt工作负载低18%，性能下降的原因分布在大多数主要硬件组件中，Apache的性能比SPECInt差得多。除了数据TLB之外，内存子系统的所有组件都经历了更多的冲突；例如Apache的L2 miss率是SPECInt的1.5倍，D-cache miss率是2.3倍，I-cache miss率是2.5倍。<br>与SPECInt相比，Apache在fetch单元也表现得更差，Apache的可获取上下文平均比SPECInt少20%，被压缩的指令更多。在充分利用6个缺失插槽的情况下，Apache也减少了33%的周期。然而，尽管内存和获取系统行为有这些巨大的差异，SMT仍然能很好地容忍延迟，通过处理更多的缺失，并与要求更高的工作负载并行（最后三行）。<br>SMT在Apache中隐藏延迟的能力导致平均指令吞吐量为4.6IPC—是标准吞吐量的4.2倍，并且是SMT研究的任何工作负载的最高相对增益。超标量处理器实现的IPC仅为1.1—仅为SPECInt的42%（相比之下，在SMT处理器上Apache的IPC是它为SPECInt实现的82%。）最能说明性能差异的是，超标量在超过60%的周期内无法获取或发出指令，并且由于分支错误预测，它将获得的指令的46%删除了。SMT压缩的指令更少，因为多线程减少了错误预测的分支路径在条件解决之前执行的距离。<br><img src="https://img-blog.csdnimg.cn/20201223122454416.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjMzMzQw,size_16,color_FFFFFF,t_70#pic_center" alt="表5：按指令类型执行Apache时动态指令的百分比"><br><img src="https://img-blog.csdnimg.cn/2020122312250543.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjMzMzQw,size_16,color_FFFFFF,t_70#pic_center" alt="表6：比较在SMT上执行的Apache、在SMT上执行的SPECInt95以及在超标量上执行的Apache的体系结构指标"></p><h3 id="3-2-3-线程间的竞争与合作"><a href="#3-2-3-线程间的竞争与合作" class="headerlink" title="3.2.3 线程间的竞争与合作"></a>3.2.3 线程间的竞争与合作</h3><p>如前所述，SMT可以在单个周期中发出来自多个内核线程的指令，这就为线程间冲突创造了新的可能性，表7给出了Apache miss行为了更多细节，重点关注冲突的原因。与SPECInt工作负载相比，最引人注目的是内核/内核和用户/内核冲突，用粗体显示。Apache中缓存丢失的最高原因是内核内部的冲突：65%的L1 Icache丢失，65%的L1 Dcache丢失，以及41%的L2缓存丢失是由于线程内或线程间的内核冲突造成的。除L2缓存之外，这两类缓存中的内核线程缺失几乎是线程内缺失的两倍。用户/内核冲突也是非常重要的：25%的L1 Icache丢失，10%的L1 Dcahce丢失，22%的L2缓存丢失是由于内核和用户代码或数据之间的冲突造成的。<br>在SMT上同时运行多个内核线程的影响还可以通过将其与超标量进行比较来观察，超标量中一次只能活动一个内核线程。在Apache（未显示数据）的超标量执行中，与SMT上的Apache相比，Icache、Dcache和L2缓存中由于内核线程间冲突而导致的丢失百分比分别要低24%、28%和38%<br>在BTB中，内核线程内冲突占主导地位，占所有BTB丢失的68%，而6%的丢失是由用户/引起的内核冲突。相反，用户代码要为两个TLB中的大部分丢失负责（53%的数据TLB丢失和86%的指令TLB丢失是由于用户/用户冲突造成的）。尽管用户代码只占执行周期的22%。<br>虽然上面提到的数据涉及冲突，但同时执行线程也可能导致建设性的线程间行为。具体来说，当一个线程接触到即将被第二个线程访问的数据时，就会发生预取；然后第二个线程将在缓存中找到数据，从而避免丢失数据。比较SMT上这种构造共享的数量和超标量上相同的行为是很有趣的。由于SMT上有更细粒度的并行性，因此这种预取活动有更多机会。表8显示了集中资源由于在Apache中进行建设性共享而避免丢失的百分比。例如，在SMT上，如果不是内核中也在执行的其他线程预加载一个内核线程的指令，L1 Icache的总体缺失率将会更高66%。相比之下，这种共享对运行Apache的超标量的影响只有28%。同样，差异是由于SMT同时执行多个内核线程，或者在比超标量上执行的更短的时间内执行。<br>对于L2缓存来说，内核-内核预取的影响甚至更大，在L2缓存中，避免了额外71%的丢失，12%的内核TLB失误也被避免了。<br><img src="https://img-blog.csdnimg.cn/20201223122518707.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjMzMzQw,size_16,color_FFFFFF,t_70#pic_center" alt="表7：在SMT上模拟Apache和操作系统时，几种硬件数据结构的缺失分布"><br><img src="https://img-blog.csdnimg.cn/20201223122630240.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjMzMzQw,size_16,color_FFFFFF,t_70#pic_center" alt="表8：Apache上由于线程间合作而避免缺失的百分比"></p><h3 id="3-2-4-操作系统对硬件的影响"><a href="#3-2-4-操作系统对硬件的影响" class="headerlink" title="3.2.4 操作系统对硬件的影响"></a>3.2.4 操作系统对硬件的影响</h3><p>与前面对SPECInt工作负载的分析类似，我们现在研究操作系统对缓存和转移预测硬件的影响。操作系统增加了所有硬件结构的冲突，从L1数据丢失率增加35%到L1指令丢失率增加超过5倍不等。这些增长大致对应表7的冲突缺失数据，即，由于内核引用的增加，硬件结构中的用户丢失率降低的程度大致与内核冲突导致的用户丢失比例成正比。<br>除了超标量指令缓存丢失率外，操作系统对硬件结构的影响更大，在SPECInt工作负载上执行Apache比在SPECInt工作负载上执行更少。出现这种差异主要是因为操作系统活动主导Apache的执行，但也因为它们更多样化，因此比SPECInt所需的地方更少（Apache工作负载执行各种OS服务，而SPECInt主要使用内存管理）。<br><img src="https://img-blog.csdnimg.cn/20201223122642688.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjMzMzQw,size_16,color_FFFFFF,t_70#pic_center" alt="表9：操作系统对特定硬件结构的影响"></p><h2 id="3-3-结果总结"><a href="#3-3-结果总结" class="headerlink" title="3.3 结果总结"></a>3.3 结果总结</h2><p>在本节中，我们测量和分析了SMT处理器的性能，包括其操作系统对于Apache Web服务器和多程序SPECInt工作负载的性能。我们的结果表明，对于SMT，操作系统的遗漏不会导致SPECInt的性能严重错误预测，尽管对于执行相同工作负载的超标量的影响更为显著。然而，在Apache工作负载上，操作系统负责执行大部分指令。Apache在响应文件系统和内核网络代码中的系统服务上花费了大量时间，大量执行OS代码的结果是增加了更重底层资源的压力，包括缓存和BTB。内核线程也会在这些资源中引起更多的冲突，包括与其他内核线程和用户线程的冲突；另一方面，也有线程间共享的效果。Apache给处理器带来了挑战性，这可以从它在超标量上的极低吞吐量（1.1IPC）看出。SMT能够隐藏Apache的大部分延迟，使其能够实现相对于超标量处理器的4.2倍速的吞吐量改进。</p><h1 id="4-结论"><a href="#4-结论" class="headerlink" title="4 结论"></a>4 结论</h1><p>在这篇文章中，我们报告了在一个同步多线程处理器上执行操作系统的第一次测量。对于这些测量，我们修改了康柏/DEC Unix 4.0d操作系统以在SMT CPU上执行，并通过将SMT指令级模拟器集成到Alpha SimOS环境中来执行操作系统及其应用程序。结果表明<br>1.对于SEPCInt95工作负载，模拟操作系统不会显著影响SMT的总体性能，尽管操作系统的执行会对超标量产生影响。<br>2.Apache大部分时间都花在操作系统内核上，执行文件系统和网络操作。<br>3.Apache os密集型的工作负载对处理器来说压力很大，与SPECInt相比，这会导致缓存丢失率显著增加。<br>4.从我们对冲突缺失的详细分析来看，SMT上的内核线程之间存在显著的干扰，因为SMT可以同时执行来自多个内核线程的指令。另一方面，存在从合作共享中获益的机会，正如我们在线程间预取分析中所展示的那样。<br>5.总的来说，操作系统代码在超标量上导致较差的指令吞吐量，这对Apache Web服务器有很大的影响，它的IPC仅为1.1。<br>6.SMT的延迟容忍能够补偿操作系统代码的许多要求，在执行Apache时，SMT的吞吐量比超标量高了四倍，这是迄今为止SMT工作负载的最高相对收益。<br>最后，我们展示了将支持SMP的操作系统修改为在同步多线程处理器上执行相对简单。未来，我们打算对操作系统结构进行实验，以优化操作系统以适应SMT的特殊特性。</p>]]></content>
      
      
      <categories>
          
          <category> 阅读 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>大数运算</title>
      <link href="2021/04/11/%E5%A4%A7%E6%95%B0%E8%BF%90%E7%AE%97/"/>
      <url>2021/04/11/%E5%A4%A7%E6%95%B0%E8%BF%90%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<p>高精度整数：使用vector/数组存储每一位数字</p><p>高精度加法/乘法：模拟加法和乘法的过程</p><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加法</span></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">add</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; n, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n.size() &lt; m.size()) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp = n;</span><br><span class="line">        n = m;</span><br><span class="line">        m = temp;</span><br><span class="line">        temp.clear();</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::size_type i = <span class="number">0</span>; i != m.size(); i++) &#123;</span><br><span class="line">        n[i] += m[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::size_type i = <span class="number">0</span>; i != n.size(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n[i] &gt; <span class="number">9</span>) &#123;</span><br><span class="line">            n[i] %= <span class="number">10</span>;</span><br><span class="line">            n[i + <span class="number">1</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n[n.size() - <span class="number">1</span>] &gt; <span class="number">9</span>) &#123;</span><br><span class="line">        n[n.size() - <span class="number">1</span>] %= <span class="number">10</span>;</span><br><span class="line">        n.push_back(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    m.clear();</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法题解 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第八章 线性时间排序</title>
      <link href="2021/04/10/%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E7%BA%BF%E6%80%A7%E6%97%B6%E9%97%B4%E6%8E%92%E5%BA%8F/"/>
      <url>2021/04/10/%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E7%BA%BF%E6%80%A7%E6%97%B6%E9%97%B4%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>归并排序、堆排序、快速排序各元素的次序依赖于它们之间的比较，称为比较排序。</p><h2 id="排序算法的下界"><a href="#排序算法的下界" class="headerlink" title="排序算法的下界"></a>排序算法的下界</h2><p><strong>决策树模型</strong></p><p>一个完全二叉树，可以表示在给定输入规模情况下，某一特定排序算法对所有元素的比较操作</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210331154254.png" alt="image-20210331154245815"></p><p><strong>最坏情况的下界</strong></p><p>在决策树中，从根节点到任意一个可达叶结点之间的最长简单路径长度，表示的是对应的排序算法中最坏情况下的比较次数。</p><p>定理：在最坏情况下，任何比较排序算法都需要做$\Omega(n\lg n)$次比较</p><p>排序的稳定性：相等元素排序前后顺序不变</p><p>稳定：插入排序、归并排序</p><p>不稳定：堆排序、快速排序</p><h2 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h2><p>n个0到k的输入元素，k=O(n)时，运行时间$\Theta(n)$</p><p>每输入一个元素x，确定小于x的元素个数，从而找到其在输出数组中的位置</p><p>伪代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">COUNTING-SORT(A,B,k)</span><br><span class="line">let C[0...k] be a new array</span><br><span class="line">for i &#x3D; 0 to k</span><br><span class="line">C[i] &#x3D; 0</span><br><span class="line">    for j &#x3D; 1 to A.length</span><br><span class="line">    C[A[j]] &#x3D; C[A[j]] + 1</span><br><span class="line">    &#x2F;&#x2F; C[i] now contains the number of elements equal to i</span><br><span class="line">    for i &#x3D; 1 to k</span><br><span class="line">    C[i] &#x3D; C[i] + C[i-1]</span><br><span class="line">    &#x2F;&#x2F; C[i] now contains the number of elements less or equal to i</span><br><span class="line">    for j &#x3D; A.lenght downto 1</span><br><span class="line">    &#x2F;&#x2F; 这里不太理解为什么要从后往前，从前往后应该不会影响结果</span><br><span class="line">    B[C[A[j]]] &#x3D; A[j]</span><br><span class="line">    C[A[j]] &#x3D; C[A[j]] - 1</span><br></pre></td></tr></table></figure><p>java程序及运行结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">int</span>[] A = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">30</span>];</span><br><span class="line">    <span class="keyword">int</span>[] B = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">30</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">        A[i] = (<span class="keyword">int</span>)(Math.random()*k);</span><br><span class="line">    &#125;</span><br><span class="line">    countingsort(A, B, k);</span><br><span class="line">    System.out.println(Arrays.toString(A));</span><br><span class="line">    System.out.println(Arrays.toString(B));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">countingsort</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span>[] B, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] C = <span class="keyword">new</span> <span class="keyword">int</span>[k];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; A.length; j++) &#123;</span><br><span class="line">        C[A[j]] = C[A[j]] + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; k; i++) &#123;</span><br><span class="line">        C[i] += C[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = A.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        B[C[A[i]] - <span class="number">1</span>] = A[i];</span><br><span class="line">        C[A[i]] = C[A[i]] - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210410135122.png" alt="image-20210410135115533"></p><h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><p>一种用在卡片排序机上的算法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RADIX-SORT(A,d)</span><br><span class="line">for i &#x3D; 1 to d</span><br><span class="line">use a stable sort to sort array A on digit i</span><br></pre></td></tr></table></figure><h2 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h2><p>将[0,1)区间划分为n个相同大小的子区间，或称为桶，然后将n个输入数分别放到各个桶中，然后，将n个输入数分别放到各个桶中。先对各个桶中的数进行排序，然后遍历每个桶，按照次序把各个桶中的元素列出来即可。（需要元素是均匀分布的，防止一个桶里面的元素太多）</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210410135732.png" alt="image-20210410135732520"></p>]]></content>
      
      
      <categories>
          
          <category> 算法导论 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第9章 中位数和顺序统计量</title>
      <link href="2021/04/10/%E7%AC%AC9%E7%AB%A0-%E4%B8%AD%E4%BD%8D%E6%95%B0%E5%92%8C%E9%A1%BA%E5%BA%8F%E7%BB%9F%E8%AE%A1%E9%87%8F/"/>
      <url>2021/04/10/%E7%AC%AC9%E7%AB%A0-%E4%B8%AD%E4%BD%8D%E6%95%B0%E5%92%8C%E9%A1%BA%E5%BA%8F%E7%BB%9F%E8%AE%A1%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="最小值和最大值"><a href="#最小值和最大值" class="headerlink" title="最小值和最大值"></a>最小值和最大值</h2><p>为了确定最小值/最大值，必须要进行n-1次比较</p><p>同时找到最大值/最小值，总的比较次数为至多是$3\lfloor n/2\rfloor$</p><p>方法：对输入元素成对处理，大的和最大值比，小的和最小值比</p><h2 id="期望为线性时间的选择算法"><a href="#期望为线性时间的选择算法" class="headerlink" title="期望为线性时间的选择算法"></a>期望为线性时间的选择算法</h2><p>返回数组A[p,r]中第i小的元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">RANDOMIZED-SELECT (A,p,r,i)</span><br><span class="line">if p &#x3D;&#x3D; r</span><br><span class="line">return A[p]</span><br><span class="line">q &#x3D; RANDOMIZED-PARTITION (A,p,r)</span><br><span class="line">k &#x3D; q - p + 1</span><br><span class="line">if i &#x3D;&#x3D; k</span><br><span class="line">return A[q]</span><br><span class="line">else if i &lt; k</span><br><span class="line">return RANDOMIZED-SELECT (A,p,q-1,i)</span><br><span class="line">else return RANDOMIZED-SELECT (A,q+1,r,i-k)</span><br></pre></td></tr></table></figure><h2 id="最坏情况为线性时间的选择算法"><a href="#最坏情况为线性时间的选择算法" class="headerlink" title="最坏情况为线性时间的选择算法"></a>最坏情况为线性时间的选择算法</h2><ol><li>将输入数组的n个元素划分为$\lceil n/5\rceil$组，每组5个元素，且至多只有一组由剩下的不足5个元素组成。</li><li>寻找这$\lceil n/5\rceil$组中每一组的中位数，首先对每组元素进行插入排序，然后确定每组有序元素中位数。</li><li>对第2步找出的$\lceil n/5\rceil$个中位数，递归调用SELECT以找出其中位数x（如果有偶数个中位数，为了方便，约定x是较小的数）</li><li>利用修改过的PARTITION版本，递归调用SELECT以找出其中位数x对输入数组进行划分。让k比划分的低区中的元素数目多1，因此x是第k小的元素，并且有n-k个元素在划分的高区。</li><li>如果i=k，则返回x，如果i<k，则在低区递归调用SELECT来找出第i小的元素。如果i>k，则在高区递归查找第i-k小的元素。</li></ol><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210410140135.png" alt="image-20210410140135127"></p>]]></content>
      
      
      <categories>
          
          <category> 算法导论 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>系统设计</title>
      <link href="2021/04/09/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"/>
      <url>2021/04/09/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><p><em>什么是Spring框架？</em></p><p>一种轻量级开发框架，是很多模块的集合，使用这些模块可以很方便地协助我们进行开发。包括核心容器、数据访问/继承、Web、AOP(面向切面编程)、工具、消息和测试模块。</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210406142220.png" alt="image-20210406142220423"></p><ul><li><strong>Spring Core：</strong> 基础,可以说 Spring 其他所有的功能都需要依赖于该类库。主要提供 IoC 依赖注入功能。</li><li><strong>Spring Aspects</strong> ： 该模块为与AspectJ的集成提供支持。</li><li><strong>Spring AOP</strong> ：提供了面向切面的编程实现。</li><li><strong>Spring JDBC</strong> : Java数据库连接。</li><li><strong>Spring JMS</strong> ：Java消息服务。</li><li><strong>Spring ORM</strong> : 用于支持Hibernate等ORM工具。</li><li><strong>Spring Web</strong> : 为创建Web应用程序提供支持。</li><li><strong>Spring Test</strong> : 提供了对 JUnit 和 TestNG 测试的支持</li></ul><p><em>@RestController vs @Controller</em> //TODO</p><p><em>谈谈自己对Spring IoC和AOP的理解</em></p><p>IoC（Inverse of Control:控制反转）是一种设计思想，就是 将原本在程序中手动创建对象的控制权，交由Spring框架来管理。 IoC 容器是 Spring 用来实现 IoC 的载体， IoC 容器实际上就是个Map（key，value）,Map 中存放的是各种对象。</p><p>将对象之间的相互依赖关系交给 IoC 容器来管理，并由 IoC 容器完成对象的注入。这样可以很大程度上简化应用的开发，把应用从复杂的依赖关系中解放出来。 IoC 容器就像是一个工厂一样，当我们需要创建一个对象的时候，只需要配置好配置文件/注解即可，完全不用考虑对象是如何被创建出来的,这大大增加了项目的可维护性且降低了开发难度。</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210406144124.png" alt="image-20210406144124915"></p><p><em>Spring bean是什么？</em></p><p>Spring Bean是被实例的，组装的及被Spring 容器管理的Java对象。</p><p>Spring 容器会自动完成@bean对象的实例化。</p><p>创建应用对象之间的协作关系的行为称为：装配(wiring)，这就是依赖注入的本质。</p><p><em>Spring bean的作用域？</em></p><ul><li>singleton : 唯一 bean 实例，Spring 中的 bean 默认都是单例的。</li><li>prototype : 每次请求都会创建一个新的 bean 实例。</li><li>request : 每一次HTTP请求都会产生一个新的bean，该bean仅在当前HTTP request内有效。</li><li>session : 每一次HTTP请求都会产生一个新的 bean，该bean仅在当前 HTTP session 内有效。</li><li>global-session： 全局session作用域，仅仅在基于portlet的web应用中才有意义，Spring5已经没有了。Portlet是能够生成语义代码(例如：HTML)片段的小型Java Web插件。它们基于portlet容器，可以像servlet一样处理HTTP请求。但是，与 servlet 不同，每个 portlet 都有不同的会话。</li></ul><p><em>Spring Bean的生命周期？</em></p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210409134832.png" alt="image-20210409134832572"></p><p><em>@Bean和@Component区别？</em></p><ol><li>作用对象不同: <code>@Component</code> 注解作用于类，而<code>@Bean</code>注解作用于方法。</li><li><code>@Component</code>通常是通过类路径扫描来自动侦测以及自动装配到Spring容器中（我们可以使用 <code>@ComponentScan</code> 注解定义要扫描的路径从中找出标识了需要装配的类自动装配到 Spring 的 bean 容器中）。<code>@Bean</code> 注解通常是我们在标有该注解的方法中定义产生这个 bean,<code>@Bean</code>告诉了Spring这是某个类的示例，当我需要用它的时候还给我。</li><li><code>@Bean</code> 注解比 <code>Component</code> 注解的自定义性更强，而且很多地方我们只能通过 <code>@Bean</code> 注解来注册bean。比如当我们引用第三方库中的类需要装配到 <code>Spring</code>容器时，则只能通过 <code>@Bean</code>来实现。</li></ol><p><em>说说自己对于Spring MVC的了解？</em></p><p>MVC 是一种设计模式,Spring MVC 是一款很优秀的 MVC 框架。Spring MVC 可以帮助我们进行更简洁的Web层的开发，并且它天生与 Spring 框架集成。Spring MVC 下我们一般把后端项目分为 Service层（处理业务）、Dao层（数据库操作）、Entity层（实体类）、Controller层(控制层，返回数据给前台页面)。</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210406144822.png" alt="image-20210406144822186"></p><p><em>SpringMVC工作原理？</em></p><ol><li>客户端（浏览器）发送请求，直接请求到 <code>DispatcherServlet</code>。</li><li><code>DispatcherServlet</code> 根据请求信息调用 <code>HandlerMapping</code>，解析请求对应的 <code>Handler</code>。</li><li>解析到对应的 <code>Handler</code>（也就是我们平常说的 <code>Controller</code> 控制器）后，开始由 <code>HandlerAdapter</code> 适配器处理。</li><li><code>HandlerAdapter</code> 会根据 <code>Handler</code>来调用真正的处理器来处理请求，并处理相应的业务逻辑。</li><li>处理器处理完业务后，会返回一个 <code>ModelAndView</code> 对象，<code>Model</code> 是返回的数据对象，<code>View</code> 是个逻辑上的 <code>View</code>。</li><li><code>ViewResolver</code> 会根据逻辑 <code>View</code> 查找实际的 <code>View</code>。</li><li><code>DispaterServlet</code> 把返回的 <code>Model</code> 传给 <code>View</code>（视图渲染）。</li><li>把 <code>View</code> 返回给请求者（浏览器）</li></ol>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>操作系统</title>
      <link href="2021/04/09/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
      <url>2021/04/09/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<p><em>什么是操作系统？</em></p><p>操作系统是管理计算机硬件与软件资源的程序，屏蔽了硬件层了复杂性，操作系统的内核（Kernel）是操作系统的核心部分，它负责系统的内存管理，硬件设备的管理，文件系统的管理以及应用程序的管理。 内核是连接应用程序和硬件的桥梁，决定着系统的性能和稳定性。</p><p><em>系统调用？</em></p><p>我们运行的程序基本上都是在用户态，如果调用操作系统提供的系统态级别的子功能则需要系统调用。主要有：</p><ul><li>设备管理。完成设备的请求或释放，以及设备启动等功能。</li><li>文件管理。完成文件的读、写、创建及删除等功能。</li><li>进程控制。完成进程的创建、撤销、阻塞及唤醒等功能。</li><li>进程通信。完成进程之间的消息传递或信号传递等功能。</li><li>内存管理。完成内存的分配、回收以及获取作业占用内存区大小及地址等功能。</li></ul><p><em>进程状态？</em></p><p>和线程类似，有5种状态</p><ul><li><strong>创建状态(new)</strong> ：进程正在被创建，尚未到就绪状态。</li><li><strong>就绪状态(ready)</strong> ：进程已处于准备运行状态，即进程获得了除了处理器之外的一切所需资源，一旦得到处理器资源(处理器分配的时间片)即可运行。</li><li><strong>运行状态(running)</strong> ：进程正在处理器上上运行(单核 CPU 下任意时刻只有一个进程处于运行状态)。</li><li><strong>阻塞状态(waiting)</strong> ：又称为等待状态，进程正在等待某一事件而暂停运行如等待某资源为可用或等待 IO 操作完成。即使处理器空闲，该进程也不能运行。</li><li><strong>结束状态(terminated)</strong> ：进程正在从系统中消失。可能是进程正常结束或其他原因中断退出运行。</li></ul><p><em>进程间通信方式？</em></p><ol><li><strong>管道/匿名管道(Pipes)</strong> ：用于具有亲缘关系的父子进程间或者兄弟进程之间的通信。</li><li><strong>有名管道(Names Pipes)</strong> : 匿名管道由于没有名字，只能用于亲缘关系的进程间通信。为了克服这个缺点，提出了有名管道。有名管道严格遵循<strong>先进先出(first in first out)</strong>。有名管道以磁盘文件的方式存在，可以实现本机任意两个进程通信。</li><li><strong>信号(Signal)</strong> ：信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生；</li><li><strong>消息队列(Message Queuing)</strong> ：消息队列是消息的链表,具有特定的格式,存放在内存中并由消息队列标识符标识。管道和消息队列的通信数据都是先进先出的原则。与管道（无名管道：只存在于内存中的文件；命名管道：存在于实际的磁盘介质或者文件系统）不同的是消息队列存放在内核中，只有在内核重启(即，操作系统重启)或者显示地删除一个消息队列时，该消息队列才会被真正的删除。消息队列可以实现消息的随机查询,消息不一定要以先进先出的次序读取,也可以按消息的类型读取,比 FIFO 更有优势。</li><li><strong>信号量(Semaphores)</strong> ：信号量是一个计数器，用于多进程对共享数据的访问，信号量的意图在于进程间同步。这种通信方式主要用于解决与同步相关的问题并避免竞争条件。</li><li><strong>共享内存(Shared memory)</strong> ：使得多个进程可以访问同一块内存空间，不同进程可以及时看到对方进程中对共享内存中数据的更新。这种方式需要依靠某种同步操作，如互斥锁和信号量等。可以说这是最有用的进程间通信方式。</li><li><strong>套接字(Sockets)</strong> : 此方法主要用于在客户端和服务器之间通过网络进行通信。套接字是支持 TCP/IP 的网络通信的基本操作单元，可以看做是不同主机之间的进程进行双向通信的端点，简单的说就是通信的两方的一种约定，用套接字中的相关函数来完成通信过程。</li></ol><p><em>进程调度算法？</em></p><p>先到先服务，短作业优先，时间片轮转，多级反馈队列，优先级调度。</p><p><em>内存管理机制？</em></p><p>分为连续管理（块式管理）和非连续管理（页式管理、段式管理、段页式管理）</p><p>块式管理将内存分为几个固定大小的块，每个块中只包含一个进程。如果程序运行需要内存的话，操作系统就分配给它一块，如果程序运行只需要很小的空间的话，分配的这块内存很大一部分几乎被浪费了。这些在每个块中未被利用的空间，我们称之为碎片。</p><p>页式管理把主存分为大小相等且固定的一页一页的形式，页较小，相对相比于块式管理的划分力度更大，提高了内存利用率，减少了碎片。页式管理通过页表对应逻辑地址和物理地址。</p><p>段式管理把主存分为一段段的，大小不固定，每一段的空间比一页的空间小很多 。但是，最重要的是段是有实际意义的，每个段定义了一组逻辑信息，例如,有主程序段 MAIN、子程序段 X、数据段 D 及栈段 S 等。 段式管理通过段表对应逻辑地址和物理地址。</p><p>段页式管理机制就是把主存先分成若干段，每个段又分成若干页。</p><p><em>快表和多级页表？</em></p><p>快表是为了提高虚拟地址到物理地址的转换速度。我们可以把快表理解为一种特殊的高速缓冲存储器（Cache），其中的内容是页表的一部分或者全部内容。</p><ol><li>根据虚拟地址中的页号查快表；</li><li>如果该页在快表中，直接从快表中读取相应的物理地址；</li><li>如果该页不在快表中，就访问内存中的页表，再从页表中得到物理地址，同时将页表中的该映射表项添加到快表中；</li><li>当快表填满后，又要登记新页时，就按照一定的淘汰策略淘汰掉快表中的一个页。</li></ol><p>引入多级页表的主要目的是为了避免把全部页表一直放在内存中占用过多空间，特别是那些根本就不需要的页表就不需要保留在内存中。</p><p><em>逻辑地址和物理地址？</em></p><p>我们编程一般只有可能和逻辑地址打交道，比如在 C 语言中，指针里面存储的数值就可以理解成为内存里的一个地址，这个地址也就是我们说的逻辑地址，逻辑地址由操作系统决定。物理地址指的是真实物理内存中地址，更具体一点来说就是内存地址寄存器中的地址。物理地址是内存单元真正的地址。</p><p><em>CPU虚拟寻址？</em></p><p>使用虚拟寻址，CPU 需要将虚拟地址翻译成物理地址，这样才能访问到真实的物理内存。实际上完成虚拟地址转换为物理地址转换的硬件是 CPU 中含有一个被称为 内存管理单元（Memory Management Unit, MMU）的硬件。</p><p><em>虚拟内存？</em></p><p><strong>虚拟内存</strong>是计算机系统内存管理的一种技术，我们可以手动设置自己电脑的虚拟内存。不要单纯认为虚拟内存只是“使用硬盘空间来扩展内存“的技术。<strong>虚拟内存的重要意义是它定义了一个连续的虚拟地址空间</strong>，并且 <strong>把内存扩展到硬盘空间</strong>。</p><p><strong>虚拟内存</strong> 使得应用程序认为它拥有连续的可用的内存（一个连续完整的地址空间），而实际上，它通常是被分隔成多个物理内存碎片，还有部分暂时存储在外部磁盘存储器上，在需要时进行数据交换。与没有使用虚拟内存技术的系统相比，使用这种技术的系统使得大型程序的编写变得更容易，对真正的物理内存（例如 RAM）的使用也更有效率。目前，大多数操作系统都使用了虚拟内存，如 Windows 家族的“虚拟内存”；Linux 的“交换空间”等。</p><p><em>局部性原理？</em></p><p>某个较短的时间段内，程序执行局限于某一小部分，程序访问的存储空间也局限于某个区域。时间局部性和空间局部性。</p><p><em>虚拟内存实现 ？</em></p><ol><li>请求分页存储管理 ：建立在分页管理之上，为了支持虚拟存储器功能而增加了请求调页功能和页面置换功能。请求分页是目前最常用的一种实现虚拟存储器的方法。请求分页存储管理系统中，在作业开始运行之前，仅装入当前要执行的部分段即可运行。假如在作业运行的过程中发现要访问的页面不在内存，则由处理器通知操作系统按照对应的页面置换算法将相应的页面调入到主存，同时操作系统也可以将暂时不用的页面置换到外存中。</li><li>请求分段存储管理：建立在分段存储管理之上，增加了请求调段功能、分段置换功能。请求分段储存管理方式就如同请求分页储存管理方式一样，在作业开始运行之前，仅装入当前要执行的部分段即可运行；在执行过程中，可使用请求调入中断动态装入要访问但又不在内存的程序段；当内存空间已满，而又需要装入新的段时，根据置换功能适当调出某个段，以便腾出空间而装入新的段。</li><li>请求段页式存储管理</li></ol><p><em>请求分页和分页存储？</em></p><p>请求分页存储管理建立在分页管理之上。他们的根本区别是是否将程序全部所需的全部地址空间都装入主存，这也是请求分页存储管理可以提供虚拟内存的原因，我们在上面已经分析过了。</p><p>它们之间的根本区别在于是否将一作业的全部地址空间同时装入主存。请求分页存储管理不要求将作业全部地址空间同时装入主存。基于这一点，请求分页存储管理可以提供虚存，而分页存储管理却不能提供虚存。</p><p>不管是上面那种实现方式，我们一般都需要：</p><ol><li>一定容量的内存和外存：在载入程序的时候，只需要将程序的一部分装入内存，而将其他部分留在外存，然后程序就可以执行了；</li><li><strong>缺页中断</strong>：如果<strong>需执行的指令或访问的数据尚未在内存</strong>（称为缺页或缺段），则由处理器通知操作系统将相应的页面或段<strong>调入到内存</strong>，然后继续执行程序；</li><li><strong>虚拟地址空间</strong> ：逻辑地址到物理地址的变换。</li></ol><p><em>页面置换算法？</em></p><ul><li>OPT最佳页面置换算法</li><li>FIFO先进先出页面置换算法</li><li>LRU最近最久未使用页面置换算法</li><li>LFU最少使用页面置换算法</li></ul><h2 id="Linux相关"><a href="#Linux相关" class="headerlink" title="Linux相关"></a>Linux相关</h2><p>Linux是一套免费使用、开源的类Unix操作系统。</p><p>inode：存储文件元信息的区域</p><p>文件目录树</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210408200944.png" alt="image-20210408200944162"></p><p>Shell编程：对一堆Linux命令的逻辑化处理</p>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java</title>
      <link href="2021/04/09/Java/"/>
      <url>2021/04/09/Java/</url>
      
        <content type="html"><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p><em>什么是JVM、字节码、JDK、JRE？</em></p><p>Java 虚拟机（JVM）是运行 Java 字节码的虚拟机。JVM 有针对不同系统的特定实现（Windows，Linux，macOS），目的是使用相同的字节码，它们都会给出相同的结果。</p><p>在 Java 中，JVM 可以理解的代码就叫做字节码（即扩展名为 .class 的文件），它不面向任何特定的处理器，只面向虚拟机。</p><p>JDK 是 Java Development Kit 缩写，它是功能齐全的 Java SDK。它拥有 JRE 所拥有的一切，还有编译器（javac）和工具（如 javadoc 和 jdb）。它能够创建和编译程序。</p><p>JRE 是 Java 运行时环境。它是运行已编译 Java 程序所需的所有内容的集合，包括 Java 虚拟机（JVM），Java 类库，java 命令和其他的一些基础构件。但是，它不能用于创建新程序。</p><p><em>Java和C++的区别？</em></p><ul><li>都是面向对象的语言，都支持封装、继承和多态</li><li>Java 不提供指针来直接访问内存，程序内存更加安全</li><li>Java 的类是单继承的，C++ 支持多重继承；虽然 Java 的类不可以多继承，但是接口可以多继承。</li><li>Java 有自动内存管理垃圾回收机制(GC)，不需要程序员手动释放无用内存</li><li><strong>在 C 语言中，字符串或字符数组最后都会有一个额外的字符<code>&#39;\0&#39;</code>来表示结束。但是，Java 语言中没有结束符这一概念。</strong> </li></ul><p><em>解释Java语言“编译于解释并存”</em></p><p>Java 语言既具有编译型语言的特征，也具有解释型语言的特征，因为 Java 程序要经过先编译，后解释两个步骤，由 Java 编写的程序需要先经过编译步骤，生成字节码（*.class 文件），这种字节码必须由 Java 解释器来解释执行。因此，我们可以认为 Java 语言编译与解释并存。</p><p><em>Java泛型和类型擦除？</em></p><p>Java泛型是JDK5引入的新特性，泛型本质是参数化类型，所操作的数据类型被指定为一个参数，Java的泛型是伪泛型，因为在编译期间，所有泛型信息都会被擦掉，这也就是通常所说类型擦除。</p><p>泛型一般有三种使用方式：泛型类，泛型接口，泛型方法。</p><p><em>==和equals()的区别？</em></p><p>==用于判断两个对象的地址是否相等，即判断两个对象是不是同一个对象，基本类型比较值，引用类型比较内存地址。</p><p>equals()用于判断两个对象是否相等，不能用于比较基本数据类型变量。equals是Object类（所有类的直接或 间接父类）中的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">this</span> == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若没有被覆盖，等价于==；若被覆盖，都覆盖equals()方法比较两个对象内容是否相等。比如String中的equals就是被覆盖的。</p><p><em>hashCode()与equals()</em></p><p>hashCode() 的作用是获取哈希码，也称为散列码；它实际上是返回一个 int 整数。这个哈希码的作用是确定该对象在哈希表中的索引位置。hashCode()定义在 JDK 的 Object 类中，这就意味着 Java 中的任何类都包含有 hashCode() 函数。</p><p>hashCode()在HashSet中的使用：</p><p>当你把对象加入 HashSet 时，HashSet 会先计算对象的 hashcode 值来判断对象加入的位置，同时也会与其他已经加入的对象的 hashcode 值作比较，如果没有相符的 hashcode，HashSet会假设对象没有重复出现。但是如果发现有相同 hashcode 值的对象，这时会调用 equals() 方法来检查 hashcode 相等的对象是否真的相同。如果两者相同，HashSet 就不会让其加入操作成功。如果不同的话，就会重新散列到其他位置。这样就大大减少了equals次数。</p><p>重写equals必须重写hashCode：</p><p>java编程里有关约定：如果两个对象根据equals方法比较是相等的，那么调用这两个对象的任意一个hashcode方法都必须产生相同的结果。没有重写hashcode会导致违反这一条约定。</p><p><em>基本类型的包装类和常量池？</em></p><p>Java 基本类型的包装类的大部分都实现了常量池技术，即 Byte,Short,Integer,Long,Character,Boolean；前面 4 种包装类默认创建了数值[-128，127] 的相应类型的缓存数据，Character 创建了数值在[0,127]范围的缓存数据，Boolean 直接返回 True Or False。如果超出对应范围仍然会去创建新的对象。浮点类型的包装类没有实现常量池技术。</p><p><em>BigDecimal用处？</em></p><p>浮点数之间的等值判断，使用BigDecimal来定义浮点数的值，再进行浮点数的运算操作。大小比较用compareTo()，推荐使用BigDecimal(String)构造方法来构造对象而不是BigDecimal(double)。</p><p><em>Java方法参数使用（值传递）？</em></p><ul><li>一个方法不能修改一个基本数据类型的参数（即数值型或布尔型）。</li><li>一个方法可以改变一个对象参数的状态。</li><li>一个方法不能让对象参数引用一个新的对象。</li></ul><p><em>深拷贝和浅拷贝是什么？</em></p><p>浅拷贝对基本数据类型值传递，对引用数据类型引用传递；深拷贝对基本数据类型值传递，引用数据类型创建一个新对象并复制内容。</p><p><em>三大特征？</em></p><p>封装、继承、多态。</p><p><em>String StringBuffer StringBuilder?</em></p><p>String不可变（线程安全），StringBuffer和StringBuilder可变（都继承自AbstractStringBuilder类），StringBuffer对方法加了同步锁，线程安全，StringBuilder线程不安全。</p><p><em>Object类定义了哪些方法？</em></p><p>11个（Native方法是java调用非java代码的接口）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> Class&lt;?&gt; getClass()<span class="comment">//native方法，用于返回当前运行时对象的Class对象，使用了final关键字修饰，故不允许子类重写。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> <span class="comment">//native方法，用于返回对象的哈希码，主要使用在哈希表中，比如JDK中的HashMap。</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span><span class="comment">//用于比较2个对象的内存地址是否相等，String类对该方法进行了重写用户比较字符串的值是否相等。</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">native</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException<span class="comment">//native方法，用于创建并返回当前对象的一份拷贝。一般情况下，对于任何对象 x，表达式 x.clone() != x 为true，x.clone().getClass() == x.getClass() 为true。Object本身没有实现Cloneable接口，所以不重写clone方法并且进行调用的话会发生CloneNotSupportedException异常。</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span><span class="comment">//返回类的名字@实例的哈希码的16进制的字符串。建议Object所有的子类都重写这个方法。</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">()</span><span class="comment">//native方法，并且不能重写。唤醒一个在此对象监视器上等待的线程(监视器相当于就是锁的概念)。如果有多个线程在等待只会任意唤醒一个。</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">notifyAll</span><span class="params">()</span><span class="comment">//native方法，并且不能重写。跟notify一样，唯一的区别就是会唤醒在此对象监视器上等待的所有线程，而不是一个线程。</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">long</span> timeout)</span> <span class="keyword">throws</span> InterruptedException<span class="comment">//native方法，并且不能重写。暂停线程的执行。注意：sleep方法没有释放锁，而wait方法释放了锁 。timeout是等待时间。</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">long</span> timeout, <span class="keyword">int</span> nanos)</span> <span class="keyword">throws</span> InterruptedException<span class="comment">//多了nanos参数，这个参数表示额外时间（以毫微秒为单位，范围是 0-999999）。 所以超时的时间还需要加上nanos毫秒。</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException<span class="comment">//跟之前的2个wait方法一样，只不过该方法一直等待，没有超时时间这个概念</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123; &#125;<span class="comment">//实例被垃圾回收器回收的时候触发的操作</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><em>transient关键字？</em></p><p>用于阻止变量被序列化。</p><p><em>键盘输入方法？</em></p><p>Scanner或BufferedReader。</p><p><em>什么是反射机制？</em></p><p>JAVA 反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为 java 语言的反射机制。常用于框架设计。</p><ol><li>我们在使用 JDBC 连接数据库时使用 Class.forName()通过反射加载数据库的驱动程序；</li><li>Spring 框架的 IOC（动态加载管理 Bean）创建对象以及 AOP（动态代理）功能都和反射有联系；</li></ol><p><em>Java异常有哪些？</em></p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210406135021.png" alt="image-20210406135014592"></p><p>所有异常都继承自Throwable类，Exception能被程序本身用try-catch-finally处理，Error无法处理，Exception又分为受检异常（必须处理，不处理不能通过编译）和不受检异常（可以不处理，都是RuntimeException及其子类）</p><p>try-with-resources用于任何实现 java.lang.AutoCloseable或者 java.io.Closeable的对象，catch或finally块在资源关闭后运行。</p><p><em>java中的I/O流？</em></p><ul><li>输入流和输出流</li><li>字节流和字符流</li><li>节点流和处理流</li></ul><p><em>字节流和字符流？</em></p><p>虽然信息存储的最小单位都是字节，但Java虚拟机将字节转换成字符非常耗时，且容易出现乱码，所以提供了一个直接操作字符的接口，方便平时对字符进行流操作。</p><p><em>BIO,NIO,AIO?</em></p><p>BIO是同步阻塞IO模型，数据读写必须阻塞在一个线程内，模型简单，但处理不了连接量很高的情况。</p><p>NIO是同步非阻塞IO模型，它支持面向缓冲的，基于通道的 I/O 操作方法。 NIO 提供了与传统 BIO 模型中的 <code>Socket</code> 和 <code>ServerSocket</code> 相对应的 <code>SocketChannel</code> 和 <code>ServerSocketChannel</code> 两种不同的套接字通道实现,两种通道都支持阻塞和非阻塞两种模式。</p><p>AIO（NIO2）是异步非阻塞IO模型，对于 NIO 来说，我们的业务线程是在 IO 操作准备好时，得到通知，接着就由这个线程自行进行 IO 操作，IO 操作本身是同步的。异步 IO 是基于事件和回调机制实现的，也就是应用操作之后会直接返回，不会堵塞在那里，当后台处理完成，操作系统会通知相应的线程进行后续的操作。</p><p><em>Collection.toArray()方法？</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String [] s= <span class="keyword">new</span> String[]&#123;</span><br><span class="line">    <span class="string">&quot;dog&quot;</span>, <span class="string">&quot;lazy&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;over&quot;</span>, <span class="string">&quot;jumps&quot;</span>, <span class="string">&quot;fox&quot;</span>, <span class="string">&quot;brown&quot;</span>, <span class="string">&quot;quick&quot;</span>, <span class="string">&quot;A&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line">List&lt;String&gt; list = Arrays.asList(s);</span><br><span class="line">Collections.reverse(list);</span><br><span class="line">s=list.toArray(<span class="keyword">new</span> String[<span class="number">0</span>]);<span class="comment">//没有指定类型的话会报错</span></span><br></pre></td></tr></table></figure><p>new String[0]起到了一个模板作用，指定类型同时节省空间。</p><p><em>枚举实现单例模式</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">PizzaDeliverySystemConfiguration</span> </span>&#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">    PizzaDeliverySystemConfiguration() &#123;</span><br><span class="line">        <span class="comment">// Initialization configuration which involves</span></span><br><span class="line">        <span class="comment">// overriding defaults like delivery strategy</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> PizzaDeliveryStrategy deliveryStrategy = PizzaDeliveryStrategy.NORMAL;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PizzaDeliverySystemConfiguration <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> PizzaDeliveryStrategy <span class="title">getDeliveryStrategy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deliveryStrategy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210406145500.png" alt="image-20210406145500525"></p><p><em>List、Set、Map？</em></p><p>List：有序、可重复；Set：无序、不可重复；Map：键值对存储，无序、可重复。</p><p><em>ArrayList的扩容机制？</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>无参数创建ArrayList赋值给一个空数组，添加元素操作时才分配容量（大小为10）</p><p>添加元素时使用 ensureCapacityInternal() 方法来保证容量足够，如果不够时，需要使用 grow() 方法进行扩容，新容量的大小为 <code>oldCapacity + (oldCapacity &gt;&gt; 1)</code>，即 oldCapacity+oldCapacity/2。其中 oldCapacity &gt;&gt; 1 需要取整，所以新容量大约是旧容量的 1.5 倍左右。（oldCapacity 为偶数就是 1.5 倍，为奇数就是 1.5 倍-0.5）</p><p>扩容操作需要调用 <code>Arrays.copyOf()</code> 把原数组整个复制到新数组中，这个操作代价很高，因此最好在创建 ArrayList 对象时就指定大概的容量大小，减少扩容操作的次数。</p><p><em>comparable和comparator</em></p><ul><li><code>comparable</code> 接口实际上是出自<code>java.lang</code>包 它有一个 <code>compareTo(Object obj)</code>方法用来排序</li><li><code>comparator</code>接口实际上是出自 java.util 包它有一个<code>compare(Object obj1, Object obj2)</code>方法用来排序</li></ul><p>comparator定制排序（升序改成降序）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Collections.sort(arrayList, <span class="keyword">new</span> Comparator&lt;Integer&gt;() &#123;</span><br><span class="line"></span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer o1, Integer o2)</span> </span>&#123;</span><br><span class="line">               <span class="keyword">return</span> o2.compareTo(o1);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure><p>重写compareTo方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// person对象没有实现Comparable接口，所以必须实现，这样才不会出错，才可以使treemap中的数据按顺序排列</span></span><br><span class="line"><span class="comment">// 像Integer类等都已经实现了Comparable接口，所以不需要另外实现了</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Person</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * T重写compareTo方法实现按年龄来排序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Person o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.age &gt; o.getAge()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.age &lt; o.getAge()) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>HashSet,LinkedHashSet和TreeSet</em></p><p><code>HashSet</code> 是 <code>Set</code> 接口的主要实现类 ，<code>HashSet</code> 的底层是 <code>HashMap</code>，线程不安全的，可以存储 null 值；</p><p><code>LinkedHashSet</code> 是 <code>HashSet</code> 的子类，能够按照添加的顺序遍历；</p><p><code>TreeSet</code> 底层使用红黑树，能够按照添加元素的顺序进行遍历，排序的方式有自然排序和定制排序。</p><p><em>HashMap的底层实现？</em></p><p>JDK1.8以前，数组和链表结合的链表散列，用扰动函数减少哈希碰撞，用拉链法解决冲突。</p><p>JDK1.8 之后在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为 8）（将链表转换成红黑树前会判断，如果当前数组的长度小于 64，那么会选择先进行数组扩容，而不是转换为红黑树）时，将链表转化为红黑树，以减少搜索时间。</p><p><em>Collections工具类</em></p><p>排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">(List list)</span><span class="comment">//反转</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shuffle</span><span class="params">(List list)</span><span class="comment">//随机排序</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(List list)</span><span class="comment">//按自然排序的升序排序</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(List list, Comparator c)</span><span class="comment">//定制排序，由Comparator控制排序逻辑</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(List list, <span class="keyword">int</span> i , <span class="keyword">int</span> j)</span><span class="comment">//交换两个索引位置的元素</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(List list, <span class="keyword">int</span> distance)</span><span class="comment">//旋转。当distance为正数时，将list后distance个元素整体移到前面。当distance为负数时，将 list的前distance个元素整体移到后面</span></span></span><br></pre></td></tr></table></figure><p>查找替换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(List list, Object key)</span><span class="comment">//对List进行二分查找，返回索引，注意List必须是有序的</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(Collection coll)</span><span class="comment">//根据元素的自然顺序，返回最大的元素。 类比int min(Collection coll)</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(Collection coll, Comparator c)</span><span class="comment">//根据定制排序，返回最大元素，排序规则由Comparatator类控制。类比int min(Collection coll, Comparator c)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fill</span><span class="params">(List list, Object obj)</span><span class="comment">//用指定的元素代替指定list中的所有元素。</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">frequency</span><span class="params">(Collection c, Object o)</span><span class="comment">//统计元素出现次数</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">indexOfSubList</span><span class="params">(List list, List target)</span><span class="comment">//统计target在list中第一次出现的索引，找不到则返回-1，类比int lastIndexOfSubList(List source, list target).</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">replaceAll</span><span class="params">(List list, Object oldVal, Object newVal)</span>, 用新元素替换旧元素</span></span><br></pre></td></tr></table></figure><p>还提供了一些同步控制方法，但效率很低，需要线程安全的集合类型应该使用JUC包下的并发集合。</p><h2 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h2><p><em>什么是线程和进程？</em></p><p>进程是程序的一次执行过程，是系统运行程序的基本单位，因此进程是动态的。系统运行一个程序即是一个进程从创建，运行到消亡的过程。</p><p>在 Java 中，当我们启动 main 函数时其实就是启动了一个 JVM 的进程，而 main 函数所在的线程就是这个进程中的一个线程，也称主线程。</p><p>线程与进程相似，但线程是一个比进程更小的执行单位。一个进程在其执行的过程中可以产生多个线程。</p><p>与进程不同的是同类的多个线程共享进程的<strong>堆</strong>和<strong>方法区</strong>资源，但每个线程有自己的<strong>程序计数器</strong>、<strong>虚拟机栈</strong>和<strong>本地方法栈</strong>，所以系统在产生一个线程，或是在各个线程之间作切换工作时，负担要比进程小得多，也正因为如此，线程也被称为轻量级进程。</p><p>一个Java程序的运行是main线程和多个其他线程同时运行。</p><p><em>程序计数器？</em></p><ol><li>字节码解释器通过改变程序计数器来依次读取指令，从而实现代码的流程控制，如：顺序执行、选择、循环、异常处理。</li><li>在多线程的情况下，程序计数器用于记录当前线程执行的位置，从而当线程被切换回来的时候能够知道该线程上次运行到哪儿了。</li></ol><p>程序计数器私有主要是为了线程切换后能恢复到正确的执行位置。</p><p><em>虚拟机栈和本地方法栈？</em></p><p>虚拟机栈：每个 Java 方法在执行的同时会创建一个栈帧用于存储局部变量表、操作数栈、常量池引用等信息。从方法调用直至执行完成的过程，就对应着一个栈帧在 Java 虚拟机栈中入栈和出栈的过程。</p><p>本地方法栈： 和虚拟机栈所发挥的作用非常相似，区别是： <strong>虚拟机栈为虚拟机执行 Java 方法 （也就是字节码）服务，而本地方法栈则为虚拟机使用到的 Native 方法服务。</strong> 在 HotSpot 虚拟机中和 Java 虚拟机栈合二为一。</p><p>私有是为了线程中的局部变量不被别的线程访问到。</p><p><em>堆和方法区？</em></p><p>堆和方法区是所有线程共享的资源，其中堆是进程中最大的一块内存，主要用于存放新创建的对象 (几乎所有对象都在这里分配内存)，方法区主要用于存放已被加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</p><p><em>线程的生命周期和状态？</em></p><div class="table-container"><table><thead><tr><th>状态名称</th><th>说明</th></tr></thead><tbody><tr><td>NEW</td><td>初始状态，线程被构建，但还没有调用start()方法</td></tr><tr><td>RUNNABLE</td><td>运行状态，Java线程将操作系统中的就绪和运行两种装填笼统地称作“运行中”</td></tr><tr><td>BLOCKED</td><td>阻塞状态，表示线程阻塞于锁</td></tr><tr><td>WAITING</td><td>等待状态，表示线程进入等待状态，进入该状态表示当前线程需要等待其他线程做出一些特定动作(通知或中断)</td></tr><tr><td>TIME_WAITING</td><td>超时状态，该状态不同于WAITING，它是可以在指定的时间自行返回的</td></tr><tr><td>TERMINATED</td><td>终止状态，表示当前线程已经执行完毕</td></tr></tbody></table></div><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210408151713.png" alt="image-20210408151705840"></p><p><em>上下文切换？</em></p><p>多线程编程中一般线程的个数都大于 CPU 核心的个数，而一个 CPU 核心在任意时刻只能被一个线程使用，为了让这些线程都能得到有效执行，CPU 采取的策略是为每个线程分配时间片并轮转的形式。当一个线程的时间片用完的时候就会重新处于就绪状态让给其他线程使用，这个过程就属于一次上下文切换。</p><p>概括来说就是：当前任务在执行完 CPU 时间片切换到另一个任务之前会先保存自己的状态，以便下次再切换回这个任务时，可以再加载这个任务的状态。<strong>任务从保存到再加载的过程就是一次上下文切换</strong>。</p><p><em>线程死锁？</em></p><p>四个条件</p><ul><li>互斥等待</li><li>请求和保持</li><li>不剥夺</li><li>循环等待</li></ul><p>避免死锁：破坏四个条件之一</p><p><em>sleep()和wait()？</em></p><p>二者都可以暂停线程的执行，sleep()方法没有释放锁，wait()方法释放了锁，wait()一般用于线程交互/通信，调用后，线程需要别的线程调用notify()或notifyAll()方法；sleep()用于暂停执行，执行完毕后，线程会自动苏醒。</p><p><em>为什么不直接调用run()，而要调用start()？</em></p><p>调用start()方法可以启动线程并使线程进入就绪状态，直接执行run()方法不会以多线程方式执行，只会把它当作main线程下的一个普通方法执行。</p><p><em>synchronized关键字？</em></p><p>用于解决多个线程之间访问资源的同步性，可以保证它修饰的方法或者代码块在任意时刻只能有一个线程执行。以前效率很低下，现在引入优化效率很不错，应用广泛。</p><p><em>怎么使用synchronized关键字的？</em></p><p>主要有三种，一是修饰实例方法；二是修饰静态方法，也就是给当前类加锁；三是修饰代码块，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">  <span class="comment">//业务代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>双重校验锁实现对象单例（线程安全）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton uniqueInstance;</span><br><span class="line">    <span class="comment">// volatile可以禁止JVM指令重排</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">static</span> Singleton <span class="title">getUniqueInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">//先判断对象是否已经实例过，没有实例化过才进入加锁代码</span></span><br><span class="line">        <span class="keyword">if</span> (uniqueInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//类对象加锁</span></span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (uniqueInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    uniqueInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> uniqueInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意：构造方法本身就是线程安全的，不能使用synchronized关键字修饰</p><p><em>原理？</em></p><p><code>synchronized</code> 同步语句块的实现使用的是 <code>monitorenter</code> 和 <code>monitorexit</code> 指令，其中 <code>monitorenter</code> 指令指向同步代码块的开始位置，<code>monitorexit</code> 指令则指明同步代码块的结束位置。</p><p><code>synchronized</code> 修饰的方法并没有 <code>monitorenter</code> 指令和 <code>monitorexit</code> 指令，取得代之的确实是 <code>ACC_SYNCHRONIZED</code> 标识，该标识指明了该方法是一个同步方法。</p><p>本质都是对对象监视器monitor的获取。</p><p><em>优化（JDK1.6）？</em></p><ol><li><p>自旋锁：让一个线程在请求一个共享数据的锁时执行忙循环（自旋）一段时间，如果在这段时间内能获得锁，就可以避免进入阻塞状态。</p><p>自旋锁虽然能避免进入阻塞状态从而减少开销，但是它需要进行忙循环操作占用 CPU 时间，它只适用于共享数据的锁定状态很短的场景。</p></li><li><p>锁消除：对于被检测出不可能存在金正的共享数据的锁进行消除。锁消除主要是通过逃逸分析来支持，如果堆上的共享数据不可能逃逸出去被其它线程访问到，那么就可以把它们当成私有数据对待，也就可以将它们的锁进行消除。</p></li><li><p>锁粗化：如果一系列的连续操作都对同一个对象反复加锁和解锁，频繁的加锁操作就会导致性能损耗。如果虚拟机探测到由这样的一串零碎的操作都对同一个对象加锁，将会把加锁的范围扩展（粗化）到整个操作序列的外部。</p></li><li><p>轻量级锁</p></li><li><p>偏向锁</p></li></ol><p><em>synchronized和ReentrantLock区别？</em></p><p>前者依赖于jvm后者依赖于api，后者增加了一些高级功能：</p><ol><li>等待可中断</li><li>可实现公平锁</li><li>可实现选择性通知</li></ol><p><em>volatile关键字？</em></p><p>在 JDK1.2 之前，Java 的内存模型实现总是从主存（即共享内存）读取变量，是不需要进行特别的注意的。而在当前的 Java 内存模型下，线程可以把变量保存本地内存（比如机器的寄存器）中，而不是直接在主存中进行读写。这就可能造成一个线程在主存中修改了一个变量的值，而另外一个线程还继续使用它在寄存器中的变量值的拷贝，造成数据的不一致。</p><p>要解决这个问题，就需要把变量声明为volatile，这就指示 JVM，这个变量是共享且不稳定的，每次使用它都到主存中进行读取。</p><p>所以，volatile关键字 除了防止 JVM 的指令重排 ，还有一个重要的作用就是保证变量的可见性。</p><p><em>并发编程的三个重要特性？</em></p><ol><li><strong>原子性</strong> : 一个的操作或者多次操作，要么所有的操作全部都得到执行并且不会收到任何因素的干扰而中断，要么所有的操作都执行，要么都不执行。<code>synchronized</code> 可以保证代码片段的原子性。</li><li><strong>可见性</strong> ：当一个变量对共享变量进行了修改，那么另外的线程都是立即可以看到修改后的最新值。<code>volatile</code> 关键字可以保证共享变量的可见性。</li><li><strong>有序性</strong> ：代码在执行的过程中的先后顺序，Java 在编译器以及运行期间的优化，代码的执行顺序未必就是编写代码时候的顺序。<code>volatile</code> 关键字可以禁止指令进行重排序优化。</li></ol><p><em>synchronized和volatile关键字的区别？</em></p><p>二者互补。</p><p>volatile关键字是线程同步的轻量级实现，所以volatile性能肯定比synchronized关键字要好。但是volatile关键字只能用于变量而 synchronized关键字可以修饰方法以及代码块。<br>volatile关键字能保证数据的可见性，但不能保证数据的原子性。synchronized关键字两者都能保证。<br>volatile关键字主要用于解决变量在多个线程之间的可见性，而 synchronized关键字解决的是多个线程之间访问资源的同步性。</p><p><em>ThreadLocal</em></p><p>ThreadLocal用于修饰专属本地变量，如果创建一个ThreadLocal变量，那么访问这个变量的每个线程都会有这个变量的本地副本。他们可以使用 <code>get</code> 和 <code>set</code> 方法来获取默认值或将其值更改为当前线程所存的副本的值，从而避免了线程安全问题。</p><p>每个<code>Thread</code>中都具备一个<code>ThreadLocalMap</code>，而<code>ThreadLocalMap</code>可以存储以<code>ThreadLocal</code>为 key ，Object 对象为 value 的键值对。</p><p><em>线程池？</em></p><p>池化思想主要是为了减少每次获取资源的消耗，提高对资源的利用率。</p><p><strong>线程池</strong>提供了一种限制和管理资源（包括执行一个任务）。 每个<strong>线程池</strong>还维护一些基本统计信息，例如已完成任务的数量。</p><p><strong>使用线程池的好处</strong>：</p><ul><li><strong>降低资源消耗</strong>。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。</li><li><strong>提高响应速度</strong>。当任务到达时，任务可以不需要的等到线程创建就能立即执行。</li><li><strong>提高线程的可管理性</strong>。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。</li></ul><p><em>Runnable接口和Callable接口？</em></p><p>前者不会返回抛出检查异常，后者可以。Executors可以实现转换。</p><p><em>execute()和submit()？</em></p><p>execute()方法用于提交不需要返回值的任务，所以无法判断任务是否被线程池执行成功与否；<br>submit()方法用于提交需要返回值的任务。线程池会返回一个 Future 类型的对象，通过这个Future对象可以判断任务是否执行成功。</p><p><em>创建线程池?</em></p><p>推荐用ThreadPoolExecutor。</p><p><em>Atomic原子类？</em></p><p>有原子/原子操作特征的类，JUC的包都在原子类。有四种类型：</p><ol><li>基本类型：使用原子方式更新基本类型</li><li>数组类型：使用原子方式更新数组元素</li><li>引用类型</li><li>对象修改属性类型</li></ol><p><em>举例，比如AtomicInteger是怎么用的？</em></p><p>使用后不加锁也能保证线程安全。</p><p><em>AQS？</em></p><p>AQS 是一个用来构建锁和同步器的框架，使用 AQS 能简单且高效地构造出应用广泛的大量的同步器。</p><p>主要组件有：信号量Semaphore，倒计时器CountDownLatch、循环栅栏CyclicBarrier。</p><p><em>CountDownLatch？</em></p><p><code>CountDownLatch</code> 的作用就是 允许 count 个线程阻塞在一个地方，直至所有线程的任务都执行完毕。之前在项目中，有一个使用多线程读取多个文件处理的场景，我用到了 <code>CountDownLatch</code> 。具体场景是下面这样的：</p><p>我们要读取处理 6 个文件，这 6 个任务都是没有执行顺序依赖的任务，但是我们需要返回给用户的时候将这几个文件的处理的结果进行统计整理。</p><p>为此我们定义了一个线程池和 count 为 6 的<code>CountDownLatch</code>对象 。使用线程池处理读取任务，每一个线程处理完之后就将 count-1，调用<code>CountDownLatch</code>对象的 <code>await()</code>方法，直到所有文件读取完之后，才会接着执行后面的逻辑。</p><h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><p><em>内存区域</em></p><p><strong>线程私有的：</strong></p><ul><li>程序计数器</li><li>虚拟机栈</li><li>本地方法栈</li></ul><p><strong>线程共享的：</strong></p><ul><li>堆</li><li>方法区</li><li>直接内存 (非运行时数据区的一部分)</li></ul><p><em>对象创建过程？</em></p><ol><li><p>类加载检查</p></li><li><p>分配内存</p><ol><li><p>分配方式</p><ol><li><p>指针碰撞：没有内存碎片的情况下，用过的内存整合到一边，没用过的放另一边，中间有一个分界指针，只需要向没用过的内存方向将该指针移动对象内存大小位置即可。</p></li><li><p>空闲列表：堆内存不规整情况下，维护一个列表，记录哪些可用，分配的时候找一个足够大的内存块给对象实例，最后更新表。</p></li></ol></li><li>内存分配并发<ul><li><strong>CAS+失败重试：</strong> CAS 是乐观锁的一种实现方式。所谓乐观锁就是，每次不加锁而是假设没有冲突而去完成某项操作，如果因为冲突失败就重试，直到成功为止。<strong>虚拟机采用 CAS 配上失败重试的方式保证更新操作的原子性。</strong></li><li><strong>TLAB：</strong> 为每一个线程预先在 Eden 区分配一块内存，JVM 在给线程中的对象分配内存时，首先在 TLAB 分配，当对象大于 TLAB 中的剩余内存或 TLAB 的内存已用尽时，再采用上述的 CAS 进行内存分配。</li></ul></li></ol></li><li><p>初始化零值</p></li><li>设置对象头</li><li>执行init方法</li></ol><p><strong>垃圾回收</strong></p><p>Java 堆是垃圾收集器管理的主要区域，因此也被称作<strong>GC 堆（Garbage Collected Heap）</strong>.从垃圾回收的角度，由于现在收集器基本都采用分代垃圾收集算法，所以 Java 堆还可以细分为：新生代和老年代：再细致一点有：Eden 空间、From Survivor、To Survivor 空间等。进一步划分的目的是更好地回收内存，或者更快地分配内存。</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210408211212.png" alt="image-20210408211212836"></p><p>对象优先在eden区分配，大对象直接进入老年代，长期存活的对象进入老年代。</p><p><em>怎样垃圾回收？</em></p><p>两大种GC</p><p>部分收集 (Partial GC)：</p><ul><li>新生代收集（Minor GC / Young GC）：只对新生代进行垃圾收集；</li><li>老年代收集（Major GC / Old GC）：只对老年代进行垃圾收集。需要注意的是 Major GC 在有的语境中也用于指代整堆收集；</li><li>混合收集（Mixed GC）：对整个新生代和部分老年代进行垃圾收集。</li></ul><p>整堆收集 (Full GC)：收集整个 Java 堆和方法区。</p><p><em>判断对象是否死亡？</em></p><p>引用计数法：给对象中添加一个引用计数器，每当有一个地方引用它，计数器就加 1；当引用失效，计数器就减 1；任何时候计数器为 0 的对象就是不可能再被使用的。简单，但很难解决循环引用问题。</p><p>可达性分析算法：过一系列的称为 <strong>“GC Roots”</strong> 的对象作为起点，从这些节点开始向下搜索，节点所走过的路径称为引用链，当一个对象到 GC Roots 没有任何引用链相连的话，则证明此对象是不可用的。</p><p><em>引用？</em></p><ol><li>强引用：不回收、new创建</li><li>软引用：内存不够才会回收、使用 SoftReference 类来创建软引用。</li><li>弱引用：被弱引用关联的对象一定会被回收，也就是说它只能存活到下一次垃圾回收发生之前。使用 WeakReference 类来创建弱引用。</li><li>虚引用：又称为幽灵引用或者幻影引用，一个对象是否有虚引用的存在，不会对其生存时间造成影响，也无法通过虚引用得到一个对象。为一个对象设置虚引用的唯一目的是能在这个对象被回收时收到一个系统通知。使用 PhantomReference 来创建虚引用。</li></ol><p><em>垃圾收集算法？</em></p><p>标记清除、标记复制、标记整理、分代收集。</p><p><em>垃圾收集器？</em></p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210408212105.png" alt="image-20210408212105530"></p><ul><li><p>Serial收集器：以串行的方式执行。它是单线程的收集器，只会使用一个线程进行垃圾收集工作。</p></li><li><p>ParNew收集器：前者的多线程版本</p></li><li><p>Parallel Scavenge 收集器</p><p>与 ParNew 一样是多线程收集器。其它收集器目标是尽可能缩短垃圾收集时用户线程的停顿时间，而它的目标是达到一个可控制的吞吐量，因此它被称为“吞吐量优先”收集器。</p></li><li><p>Serial Old收集器：Serial的老年代版本</p></li><li><p>Parallel Old：是 Parallel Scavenge 收集器的老年代版本。</p></li><li><p>CMS（Concurrent Mark Sweep），Mark Sweep 指的是标记 - 清除算法。</p></li><li><p>G1（Garbage-First），它是一款面向服务端应用的垃圾收集器，在多 CPU 和大内存的场景下有很好的性能。HotSpot 开发团队赋予它的使命是未来可以替换掉 CMS 收集器。</p><p>堆被分为新生代和老年代，其它收集器进行收集的范围都是整个新生代或者老年代，而 G1 可以直接对新生代和老年代一起回收。</p></li></ul><p><em>类加载过程？</em></p><ol><li>加载：<ul><li>通过类的完全限定名称获取定义该类的二进制字节流。</li><li>将该字节流表示的静态存储结构转换为方法区的运行时存储结构。</li><li>在内存中生成一个代表该类的 Class 对象，作为方法区中该类各种数据的访问入口。</li></ul></li><li>验证：确保 Class 文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。</li><li>准备：准备阶段为类变量分配内存并设置初始值，使用的是方法区的内存。</li><li>解析：将常量池的符号引用替换为直接引用的过程。</li><li>初始化：初始化阶段才真正开始执行类中定义的 Java 程序代码。</li></ol><p><em>类加载器？</em></p><p>类加载器之间的层次关系称为双亲委派模型（Parents Delegation Model）。该模型要求除了顶层的启动类加载器外，其它的类加载器都要有自己的父类加载器。这里的父子关系一般通过组合关系（Composition）来实现，而不是继承关系（Inheritance）。</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210408212637.png" alt="image-20210408212636962"></p><p>使得 Java 类随着它的类加载器一起具有一种带有优先级的层次关系，从而使得基础类得到统一。</p>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>网络</title>
      <link href="2021/04/09/%E7%BD%91%E7%BB%9C/"/>
      <url>2021/04/09/%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<p><em>五层协议？</em></p><p><strong>应用层(application-layer）的任务是通过应用进程间的交互来完成特定网络应用。</strong>应用层协议定义的是应用进程（进程：主机中正在运行的程序）间的通信和交互的规则。对于不同的网络应用需要不同的应用层协议。应用层交互的数据单元称为报文。</p><p><strong>运输层(transport layer)的主要任务就是负责向两台主机进程之间的通信提供通用的数据传输服务</strong>。应用进程利用该服务传送应用层报文。“通用的”是指并不针对某一个特定的网络应用，而是多种应用可以使用同一个运输层服务。由于一台主机可同时运行多个线程，因此运输层有复用和分用的功能。所谓复用就是指多个应用层进程可同时使用下面运输层的服务，分用和复用相反，是运输层把收到的信息分别交付上面应用层中的相应进程。主要使用TCP（传输控制协议）和UDP（用户数据协议）。</p><p><strong>在 计算机网络中进行通信的两个计算机之间可能会经过很多个数据链路，也可能还要经过很多通信子网。网络层的任务就是选择合适的网间路由和交换结点， 确保数据及时传送。</strong> 在发送数据时，网络层把运输层产生的报文段或用户数据报封装成分组和包进行传送。在 TCP/IP 体系结构中，由于网络层使用 <strong>IP 协议</strong>，因此分组也叫 <strong>IP 数据报</strong> ，简称 <strong>数据报</strong>。</p><p><strong>数据链路层(data link layer)通常简称为链路层。两台主机之间的数据传输，总是在一段一段的链路上传送的，这就需要使用专门的链路层的协议。</strong> 在两个相邻节点之间传送数据时，<strong>数据链路层将网络层交下来的 IP 数据报组装成帧</strong>，在两个相邻节点间的链路上传送帧。每一帧包括数据和必要的控制信息（如同步信息，地址信息，差错控制等）。</p><p><strong>物理层(physical layer)的作用是实现相邻计算机节点之间比特流的透明传送，尽可能屏蔽掉具体传输介质和物理设备的差异，</strong> 使其上面的数据链路层不必考虑网络的具体传输介质是什么。“透明传送比特流”表示经实际电路传送后的比特流没有发生变化，对传送的比特流来说，这个电路好像是看不见的。</p><p>最重要的就是TCP/IP协议，因此有时候用TCP/IP代指整个协议族。</p><p><em>TCP三次握手和四次挥手？</em></p><p>三次握手是为了准确无误地把数据送达目标处。</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210408161515.png" alt="image-20210408161515387"></p><p>SYN 同步序列编号(Synchronize Sequence Numbers) 是 TCP/IP 建立连接时使用的握手信号。在客户机和服务器之间建立正常的 TCP 网络连接时，客户机首先发出一个 SYN 消息，服务器使用 SYN-ACK 应答表示接收到了这个消息，最后客户机再以 ACK(Acknowledgement）消息响应。这样在客户机和服务器之间才能建立起可靠的 TCP 连接，数据才可以在客户机和服务器之间传递。</p><p>断开TCP连接需要使用“四次挥手”</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210408163040.png" alt="image-20210408163040225"></p><p>任何一方都可以在数据传送结束后发出连接释放的通知，待对方确认后进入半关闭状态。当另一方也没有数据再发送的时候，则发出连接释放通知，对方确认后就完全关闭了TCP连接。</p><p>具体过程：</p><p>三次握手</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210408163121.png" alt="image-20210408163121462"></p><p>四次挥手</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210408163331.png" alt="image-20210408163331761"></p><p>FIN=1表示连接释放报文，客户端发送了 FIN 连接释放报文之后，服务器收到了这个报文，就进入了 CLOSE-WAIT 状态。这个状态是为了让服务器端发送还未传送完毕的数据，传送完毕之后，服务器会发送 FIN 连接释放报文。</p><p>客户端接收到服务器端的 FIN 报文后进入此状态，此时并不是直接进入 CLOSED 状态，还需要等待一个时间计时器设置的时间 2MSL。这么做有两个理由：</p><ul><li>确保最后一个确认报文能够到达。如果 B 没收到 A 发送来的确认报文，那么就会重新发送连接释放请求报文，A 等待一段时间就是为了处理这种情况的发生。</li><li>等待一段时间是为了让本连接持续时间内所产生的所有报文都从网络中消失，使得下一个新的连接不会出现旧的连接请求报文。</li></ul><p><em>TCP和UDP有什么区别？</em></p><p>前者面向连接可靠，一般用于文件传输；后者无连接不可靠，一般用于即使通信，比如QQ视频等。</p><p><em>TCP如何保证可靠传输？</em></p><ol><li>应用数据被分割成 TCP 认为最适合发送的数据块。</li><li>TCP 给发送的每一个包进行编号，接收方对数据包进行排序，把有序数据传送给应用层。</li><li><strong>校验和：</strong> TCP 将保持它首部和数据的检验和。这是一个端到端的检验和，目的是检测数据在传输过程中的任何变化。如果收到段的检验和有差错，TCP 将丢弃这个报文段和不确认收到此报文段。</li><li>TCP 的接收端会丢弃重复的数据。</li><li><strong>流量控制：</strong> TCP 连接的每一方都有固定大小的缓冲空间，TCP的接收端只允许发送端发送接收端缓冲区能接纳的数据。当接收方来不及处理发送方的数据，能提示发送方降低发送的速率，防止包丢失。TCP 使用的流量控制协议是可变大小的滑动窗口协议。 （TCP 利用滑动窗口实现流量控制）</li><li><strong>拥塞控制：</strong> 当网络拥塞时，减少数据的发送。</li><li><strong>ARQ协议：</strong> 也是为了实现可靠传输的，它的基本原理就是每发完一个分组就停止发送，等待对方确认。在收到确认后再发下一个分组。</li><li><strong>超时重传：</strong> 当 TCP 发出一个段后，它启动一个定时器，等待目的端确认收到这个报文段。如果不能及时收到一个确认，将重发这个报文段。</li></ol><p><em>拥塞控制过程？</em></p><ol><li>慢开始：主机开始发送数据时，如果立即把大量数据字节注入到网络，那么可能会引起网络阻塞，因为现在还不知道网络的符合情况。经验表明，较好的方法是先探测一下，即由小到大逐渐增大发送窗口，也就是由小到大逐渐增大拥塞窗口数值。cwnd初始值为1，每经过一个传播轮次，cwnd加倍。</li><li>拥塞避免：拥塞避免算法的思路是让拥塞窗口cwnd缓慢增大，即每经过一个往返时间RTT就把发送放的cwnd加1。</li><li>在 TCP/IP 中，快速重传和恢复（fast retransmit and recovery，FRR）是一种拥塞控制算法，它能快速恢复丢失的数据包。没有 FRR，如果数据包丢失了，TCP 将会使用定时器来要求传输暂停。在暂停的这段时间内，没有新的或复制的数据包被发送。有了 FRR，如果接收机接收到一个不按顺序的数据段，它会立即给发送机发送一个重复确认。如果发送机接收到三个重复确认，它会假定确认件指出的数据段丢失了，并立即重传这些丢失的数据段。有了 FRR，就不会因为重传时要求的暂停被耽误。当有单独的数据包丢失时，快速重传和恢复（FRR）能最有效地工作。当有多个数据信息包在某一段很短的时间内丢失时，它则不能很有效地工作。</li></ol><p><em>在浏览器中输入url地址到显示主页的过程？</em></p><ol><li>DNS解析：寻找哪台计算机上有你需要的资源，将网址转变为计算机的IP地址。优化：DNS缓存、DNS负载均衡（又叫DNS重定向，CDN技术就使用了）。</li><li>TCP连接</li><li>发送HTTP请求</li><li>服务器处理请求并返回HTTP报文</li><li>浏览器解析渲染页面</li><li>连接结束</li></ol><p><em>HTTP状态码</em></p><div class="table-container"><table><thead><tr><th></th><th>类别</th><th>原因短语</th></tr></thead><tbody><tr><td>1XX</td><td>信息性状态码</td><td>接受的请求正在处理</td></tr><tr><td>2XX</td><td>成功状态码</td><td>请求正常处理完毕</td></tr><tr><td>3XX</td><td>重定向状态码</td><td>需要进行附加操作以完成请求</td></tr><tr><td>4XX</td><td>客户端错误状态码</td><td>服务器无法处理请求</td></tr><tr><td>5XX</td><td>服务器错误状态码</td><td>服务器处理请求出错</td></tr></tbody></table></div><p><em>长连接，短连接？</em></p><p>HTTP/1.0默认使用短连接，也就是说，客户端和服务器每进行一次HTTP操作，就建立一次连接，任务结束就中断连接。</p><p>而从HTTP/1.1起，默认使用长连接，用以保持连接特性。</p><p><em>HTTP是无状态协议，如何保存用户状态？</em></p><p>Session机制，通过服务端记录用户状态。服务端给特定的用户创建特定的 Session 之后就可以标识这个用户并且跟踪这个用户了（一般情况下，服务器会在一定时间内保存这个 Session，过了时间限制，就会销毁这个Session）。</p><p>在服务端保存 Session 的方法很多，最常用的就是内存和数据库(比如是使用内存数据库redis保存)。</p><p><em>Cookie的作用是什么？和Session有什么区别？</em></p><p>Cookie和Session都是用来跟踪浏览器用户身份的会话方式，但应用场景不一样。</p><p>Cookie一般用来保存用户信息，Session一般用来保存用户状态。Cookie 存储在客户端中，而Session存储在服务器上，相对来说 Session 安全性更高。如果要在 Cookie 中存储一些敏感信息，不要直接写入 Cookie 中，最好能将 Cookie 信息加密然后使用到的时候再去服务器端解密。</p><p><em>HTTP1.0和HTTP1.1的主要区别？</em></p><ol><li>长连接和短连接</li><li>HTTP1.1中新增了24个错误状态响应码</li><li>:在HTTP1.0中主要使用header里的If-Modified-Since,Expires来做为缓存判断的标准，HTTP1.1则引入了更多的缓存控制策略例如Entity tag，If-Unmodified-Since, If-Match, If-None-Match等更多可供选择的缓存头来控制缓存策略。</li><li>HTTP1.0中，存在一些浪费带宽的现象，例如客户端只是需要某个对象的一部分，而服务器却将整个对象送过来了，并且不支持断点续传功能，HTTP1.1则在请求头引入了range头域，它允许只请求资源的某个部分，即返回码是206（Partial Content），这样就方便了开发者自由的选择以便于充分利用带宽和连接。</li></ol><p><em>URI和URL的区别？</em></p><ul><li>URI(Uniform Resource Identifier) 是统一资源标志符，可以唯一标识一个资源。</li><li>URL(Uniform Resource Location) 是统一资源定位符，可以提供该资源的路径。它是一种具体的 URI，即 URL 可以用来标识一个资源，而且还指明了如何 locate 这个资源。</li></ul><p>URI的作用像身份证号一样，URL的作用更像家庭住址一样。URL是一种具体的URI，它不仅唯一标识资源，而且还提供了定位该资源的信息。</p><p><em>HTTP和HTTPS的区别？</em></p><p>HTTP的URL由“<a href="http://”起始且默认使用端口80，而HTTPS的URL由“https://”起始且默认使用端口443。">http://”起始且默认使用端口80，而HTTPS的URL由“https://”起始且默认使用端口443。</a></p><p>HTTP协议运行在TCP之上，所有传输的内容都是明文，客户端和服务器端都无法验证对方的身份。HTTPS是运行在SSL/TLS之上的HTTP协议，SSL/TLS 运行在TCP之上。所有传输的内容都经过加密，加密采用对称加密，但对称加密的密钥用服务器方的证书进行了非对称加密。所以说，HTTP 安全性没有 HTTPS高，但是 HTTPS 比HTTP耗费更多服务器资源。</p><ul><li>对称加密：密钥只有一个，加密解密为同一个密码，且加解密速度快，典型的对称加密算法有DES、AES等；</li><li>非对称加密：密钥成对出现（且根据公钥无法推知私钥，根据私钥也无法推知公钥），加密解密使用不同密钥（公钥加密需要私钥解密，私钥加密需要公钥解密），相对对称加密速度较慢，典型的非对称加密算法有RSA、DSA等。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库</title>
      <link href="2021/04/09/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>2021/04/09/%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p><em>mysql存储引擎 MyISAM和InnoDB的区别？</em></p><p>MyISAM是MySQL的默认数据库引擎（5.5版之前）。虽然性能极佳，而且提供了大量的特性，包括全文索引、压缩、空间函数等，但MyISAM不支持事务和行级锁，而且最大的缺陷就是崩溃后无法安全恢复。不过，5.5版本之后，MySQL引入了InnoDB（事务性数据库引擎），MySQL 5.5版本后默认的存储引擎为InnoDB。</p><p>一般情况下都选用后者。</p><p><em>mysql索引？</em></p><p>MySQL索引使用的数据结构主要有<strong>BTree索引</strong> 和 <strong>哈希索引</strong> 。对于哈希索引来说，底层的数据结构就是哈希表，因此在绝大多数需求为单条记录查询的时候，可以选择哈希索引，查询性能最快；其余大部分场景，建议选择BTree索引。</p><p>MySQL的BTree索引使用的是B树中的B+Tree，但对于主要的两种存储引擎的实现方式是不同的。</p><p><em>查询缓存的使用？</em></p><p>执行查询语句的时候，会先查询缓存。不过，MySQL 8.0 版本后移除，因为这个功能不太实用。</p><p><em>事务？</em></p><p>逻辑上的一组操作，要么都执行，要么都不执行。</p><p>四大特性（ACID）</p><ol><li><strong>原子性（Atomicity）：</strong> 事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；</li><li><strong>一致性（Consistency）：</strong> 执行事务后，数据库从一个正确的状态变化到另一个正确的状态；</li><li><strong>隔离性（Isolation）：</strong> 并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；</li><li><strong>持久性（Durability）：</strong> 一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。</li></ol><p><em>并发事务带来的问题？</em></p><p>脏读、丢失修改、不可重复读、幻影读。</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210408192348.png" alt="image-20210408192348236"></p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210408192408.png" alt="image-20210408192408423"></p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210408192500.png" alt="image-20210408192500356"></p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210408192522.png" alt="image-20210408192522582"></p><p><em>事务的隔离级别？</em></p><div class="table-container"><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻影读</th></tr></thead><tbody><tr><td>READ-UNCOMMITTED 读取未提交</td><td>√</td><td>√</td><td>√</td></tr><tr><td>READ-COMMITTED 读取已提交</td><td>×</td><td>√</td><td>√</td></tr><tr><td>REPEATABLE-READ 可重复读</td><td>×</td><td>×</td><td>√</td></tr><tr><td>SERIALIZABLE 可串行化</td><td>×</td><td>×</td><td>×</td></tr></tbody></table></div><p>InnoDB默认的是可重复读，与 SQL 标准不同的地方在于 InnoDB 存储引擎在 <strong>REPEATABLE-READ（可重读）</strong> 事务隔离级别下使用的是Next-Key Lock 锁算法，因此可以避免幻读的产生。</p><p><em>锁机制？</em></p><ul><li>MyISAM采用表级锁(table-level locking)。</li><li>InnoDB支持行级锁(row-level locking)和表级锁,默认为行级锁。</li></ul><p>表级锁对整张表上锁，实现简单，资源消耗少，不会死锁，但并发度低。</p><p>行级锁只对当前进行操作的行上锁，能大大减少数据库操作的冲突，并发度高。</p><p><strong>InnoDB存储引擎的锁的算法有三种：</strong></p><ul><li>Record lock：单个行记录上的锁</li><li>Gap lock：间隙锁，锁定一个范围，不包括记录本身</li><li>Next-key lock：record+gap 锁定一个范围，包含记录本身</li></ul><p><em>大表优化？</em></p><p>限定数据范围、读写分离、垂直分区、水平分区。</p><p><em>数据库连接池？</em></p><p>池化思想就是每次预设初始资源，减少每次获取资源的消耗。</p><p>数据库连接本质就是一个 socket 的连接。数据库服务端还要维护一些缓存和用户权限信息之类的 所以占用了一些内存。我们可以把数据库连接池是看做是维护的数据库连接的缓存，以便将来需要对数据库的请求时可以重用这些连接。为每个用户打开和维护数据库连接，尤其是对动态数据库驱动的网站应用程序的请求，既昂贵又浪费资源。<strong>在连接池中，创建连接后，将其放置在池中，并再次使用它，因此不必建立新的连接。如果使用了所有连接，则会建立一个新连接并将其添加到池中</strong>。 连接池还减少了用户必须等待建立与数据库的连接的时间。</p><p><em>分库分表后，id主键如何处理？</em></p><ul><li><strong>UUID</strong>：不适合作为主键，因为太长了，并且无序不可读，查询效率低。比较适合用于生成唯一的名字的标示比如文件的名字。</li><li><strong>数据库自增 id</strong> : 两台数据库分别设置不同步长，生成不重复ID的策略来实现高可用。这种方式生成的 id 有序，但是需要独立部署数据库实例，成本高，还会有性能瓶颈。</li><li><strong>利用 redis 生成 id :</strong> 性能比较好，灵活方便，不依赖于数据库。但是，引入了新的组件造成系统更加复杂，可用性降低，编码更加复杂，增加了系统成本。</li><li><strong>Twitter的snowflake算法</strong> </li><li><strong>美团的<a href="https://tech.meituan.com/2017/04/21/mt-leaf.html">Leaf</a>分布式ID生成系统</strong> ：Leaf 是美团开源的分布式ID生成器，能保证全局唯一性、趋势递增、单调递增、信息安全，里面也提到了几种分布式方案的对比，但也需要依赖关系数据库、Zookeeper等中间件。</li></ul><p><em>介绍Redis?</em></p><p>Redis是一个使用C语言开发的数据库，不过于传统数据库不同的是Redis数据是存在内存中的，所以读写非常快，因此Redis被广泛应用于缓存方向。</p><p><em>分布式缓存，Redis和Memecache？</em></p><ol><li>Redis 支持更丰富的数据类型（支持更复杂的应用场景）。Redis 不仅仅支持简单的 k/v 类型的数据，同时还提供 list，set，zset，hash 等数据结构的存储。Memcached 只支持最简单的 k/v 数据类型。</li><li>Redis 支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用,而 Memecache 把数据全部存在内存之中。</li><li>Redis 有灾难恢复机制。因为可以把缓存中的数据持久化到磁盘上。</li><li>Redis 在服务器内存使用完之后，可以将不用的数据放到磁盘上。但是，Memcached 在服务器内存使用完之后，就会直接报异常。</li><li>Memcached 没有原生的集群模式，需要依靠客户端来实现往集群中分片写入数据；但是 Redis 目前是原生支持 cluster 模式的。</li><li>Memcached 是多线程，非阻塞 IO 复用的网络模型；Redis 使用单线程的多路 IO 复用模型。（Redis 6.0 引入了多线程 IO ）</li><li>Redis 支持发布订阅模型、Lua 脚本、事务等功能，而 Memcached 不支持。并且，Redis 支持更多的编程语言。</li><li>Memcached 过期数据的删除策略只用了惰性删除，而 Redis 同时使用了惰性删除与定期删除。</li></ol><p><em>缓存的处理流程？</em></p><ol><li>如果用户请求的数据在缓存中就直接返回。</li><li>缓存中不存在的话就看数据库中是否存在。</li><li>数据库中存在的话就更新缓存中的数据。</li><li>数据库中不存在的话就返回空数据。</li></ol><p><em>为什么用Redis？</em></p><p>高性能角度：</p><p>假如用户第一次访问数据库中的某些数据的话，这个过程是比较慢，毕竟是从硬盘中读取的。但是，如果说，用户访问的数据属于高频数据并且不会经常改变的话，那么我们就可以很放心地将该用户访问的数据存在缓存中。</p><p><strong>这样有什么好处呢？</strong> 那就是保证用户下一次再访问这些数据的时候就可以直接从缓存中获取了。操作缓存就是直接操作内存，所以速度相当快。</p><p>不过，要保持数据库和缓存中的数据的一致性。 如果数据库中的对应数据改变的之后，同步改变缓存中相应的数据即可！</p><p>高并发：</p><p>一般像 MySQL 这类的数据库的 QPS 大概都在 1w 左右（4 核 8g） ，但是使用 Redis 缓存之后很容易达到 10w+，甚至最高能达到 30w+（就单机 redis 的情况，redis 集群的话会更高）。</p><p>所以，直接操作缓存能够承受的数据库请求数量是远远大于直接访问数据库的，所以我们可以考虑把数据库中的部分数据转移到缓存中去，这样用户的一部分请求会直接到缓存这里而不用经过数据库。进而，我们也就提高的系统整体的并发。</p><p><em>Redis过期机制？</em></p><p>缓解内存消耗，Redis使用过期字典来保存。</p><p><em>Redis持久化机制？</em></p><p>快照持久化（默认）：</p><p>Redis 可以通过创建快照来获得存储在内存里面的数据在某个时间点上的副本。Redis 创建快照之后，可以对快照进行备份，可以将快照复制到其他服务器从而创建具有相同数据的服务器副本（Redis 主从结构，主要用来提高 Redis 性能），还可以将快照留在原地以便重启服务器的时候使用。</p><p>AOF（append-only file）机制</p><p>AOF 持久化后每执行一条会更改 Redis 中的数据的命令，Redis 就会将该命令写入硬盘中的 AOF 文件。AOF 文件的保存位置和 RDB 文件的位置相同，都是通过 dir 参数设置的，默认的文件名是 appendonly.aof。</p><p>注意：Redis事务提供了一种将多个命令请求打包的功能。然后，再按顺序执行打包的所有命令，并且不会被中途打断。但不满足原子性。</p><p><em>缓存穿透？</em></p><p>大量请求的 key 根本不存在于缓存中，导致请求直接到了数据库上，根本没有经过缓存这一层。</p><p>解决方法：</p><p>参数校验，不合法的参数请求直接抛出异常。</p><p>布隆过滤器：布隆过滤器是一个非常神奇的数据结构，通过它我们可以非常方便地判断一个给定数据是否存在于海量数据中。我们需要的就是判断 key 是否合法。</p><p>具体是这样做的：把所有可能存在的请求的值都存放在布隆过滤器中，当用户请求过来，先判断用户发来的请求的值是否存在于布隆过滤器中。不存在的话，直接返回请求参数错误信息给客户端，存在的话才会走下面的流程。</p><p>但可能会误判，因为可能有哈希碰撞。</p><p><em>缓存雪崩？</em></p><p>实际上，缓存雪崩描述的就是这样一个简单的场景：缓存在同一时间大面积的失效，后面的请求都直接落到了数据库上，造成数据库短时间内承受大量请求。系统的缓存模块出了问题比如宕机导致不可用。造成系统的所有访问，都要走数据库。</p><p>还有一种缓存雪崩的场景是：有一些被大量访问数据（热点缓存）在某一时刻大面积失效，导致对应的请求直接落到了数据库上。</p><ul><li>针对 Redis 服务不可用的情况：</li></ul><ol><li>采用 Redis 集群，避免单机出现问题整个缓存服务都没办法使用。</li><li>限流，避免同时处理大量的请求。</li></ol><ul><li>针对热点缓存失效的情况：</li></ul><ol><li>设置不同的失效时间比如随机设置缓存的失效时间。</li><li>缓存永不失效。</li></ol><p><em>缓存和数据库数据的一致性？</em></p><p>旁路缓存模式，遇到写请求更新 DB，然后直接删除 cache 。</p>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>剑指offer</title>
      <link href="2021/04/07/%E5%89%91%E6%8C%87offer/"/>
      <url>2021/04/07/%E5%89%91%E6%8C%87offer/</url>
      
        <content type="html"><![CDATA[<h3 id="03-数组中的重复数字"><a href="#03-数组中的重复数字" class="headerlink" title="03 数组中的重复数字"></a>03 数组中的重复数字</h3><p>关键：数字范围是 0 ~  n - 1</p><p>把每个数字都移到对应的索引位置（如果不在），如果有重复就可以发现。也可以用哈希表记录出现次数。</p><h3 id="04-二维数组中的数字"><a href="#04-二维数组中的数字" class="headerlink" title="04 二维数组中的数字"></a>04 二维数组中的数字</h3><p>关键：数字递增</p><p>判断和目标的大小关系，一次排除一行或一列。</p><h3 id="05-替换空格"><a href="#05-替换空格" class="headerlink" title="05 替换空格"></a>05 替换空格</h3><p>用一个新的StringBuffer按规则插入即可。</p><h3 id="06-从尾到头打印链表"><a href="#06-从尾到头打印链表" class="headerlink" title="06 从尾到头打印链表"></a>06 从尾到头打印链表</h3><p>利用栈先进后出的性质存储节点值即可。</p><h3 id="07-重建二叉树"><a href="#07-重建二叉树" class="headerlink" title="07 重建二叉树"></a>07 重建二叉树</h3><p>前序确定根节点，找到在中序中的位置，确定左右子树大小，递归建树。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer, Integer&gt; indexOfOrder = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span>[] preorder, <span class="keyword">int</span>[] inorder)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 这一步省略了之后传inorder参数，同时方便找根节点在中序中的位置</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; inorder.length; i++) &#123;</span><br><span class="line">            indexOfOrder.put(inorder[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> buildTree(preorder,<span class="number">0</span>, preorder.length - <span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// prel~prer表示要构建的树对应的前序范围，inl是正在构建的树中序遍历的第一个元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span>[] preorder, <span class="keyword">int</span> prel, <span class="keyword">int</span> prer, <span class="keyword">int</span> inl)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (prel &gt; prer) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        TreeNode root = <span class="keyword">new</span> TreeNode(preorder[prel]);</span><br><span class="line">        <span class="keyword">int</span> index = indexOfOrder.get(root.val);</span><br><span class="line">        <span class="keyword">int</span> leftsize = index - inl;</span><br><span class="line">        root.left = buildTree(preorder, prel + <span class="number">1</span>, prel + leftsize, inl);</span><br><span class="line">        root.right = buildTree(preorder, prel + leftsize + <span class="number">1</span>, prer, inl + leftsize + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="09-用两个栈实现队列"><a href="#09-用两个栈实现队列" class="headerlink" title="09 用两个栈实现队列"></a>09 用两个栈实现队列</h3><p>一个用来进，一个用来出。</p><h3 id="10-1-斐波那契数列"><a href="#10-1-斐波那契数列" class="headerlink" title="10-1 斐波那契数列"></a>10-1 斐波那契数列</h3><p>只需保存之前的前两个值，时间和空间复杂度最小。</p><h3 id="10-2-青蛙跳台阶问题"><a href="#10-2-青蛙跳台阶问题" class="headerlink" title="10-2 青蛙跳台阶问题"></a>10-2 青蛙跳台阶问题</h3><p>和斐波那契数列一样，f(n) = f(n-1) + f(n-2)，注意其中的动态规划思想，更复杂的场景也能应用。</p><h3 id="11-旋转数组的最小数字"><a href="#11-旋转数组的最小数字" class="headerlink" title="11 旋转数组的最小数字"></a>11 旋转数组的最小数字</h3><p>用二分查找时间最少，关键是判断分开的两个数组中哪一个包含被旋转的子数组。</p><h3 id="12-矩阵中的路径"><a href="#12-矩阵中的路径" class="headerlink" title="12 矩阵中的路径"></a>12 矩阵中的路径</h3><p>回溯法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 记录四个不同的方向</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span>[][] next = &#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,-<span class="number">1</span>&#125;&#125;;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> rows,cols;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exist</span><span class="params">(<span class="keyword">char</span>[][] board, String word)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.rows = board.length;</span><br><span class="line">            <span class="keyword">this</span>.cols = board[<span class="number">0</span>].length;</span><br><span class="line">            <span class="comment">// 标记该位置是否走过</span></span><br><span class="line">            <span class="keyword">boolean</span>[][] marked = <span class="keyword">new</span> <span class="keyword">boolean</span>[rows][cols];</span><br><span class="line">            <span class="keyword">char</span>[] path = word.toCharArray();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rows; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cols; j++) &#123;</span><br><span class="line">                    <span class="comment">// 从任意位置开始，能否找到路径</span></span><br><span class="line">                    <span class="keyword">if</span> ( backtracking(board, path, marked, <span class="number">0</span>, i, j)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 走到了i,j位置，是否找到了该路径</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">backtracking</span><span class="params">(<span class="keyword">char</span>[][] board, <span class="keyword">char</span>[] path, <span class="keyword">boolean</span>[][] marked,<span class="keyword">int</span> pathlen, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 找到了路径</span></span><br><span class="line">            <span class="keyword">if</span> (pathlen == path.length) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 经过i,j位置不可能找到路径，返回</span></span><br><span class="line">            <span class="keyword">if</span> ( i &lt; <span class="number">0</span> || i &gt;= rows || j &lt; <span class="number">0</span> || j &gt;= cols || marked[i][j] ||</span><br><span class="line">            board[i][j] != path[pathlen] )</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 该位置有可能找到路径，先标记该位置已走过</span></span><br><span class="line">            marked[i][j] = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 向每个方向找路径</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span>[] dir : next) &#123;</span><br><span class="line">                <span class="keyword">if</span> (backtracking(board, path, marked, pathlen + <span class="number">1</span>, i + dir[<span class="number">0</span>], j + dir[<span class="number">1</span>]))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 没有找到，此路不通，去除标记</span></span><br><span class="line">            marked[i][j] = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13-机器人的运动路径"><a href="#13-机器人的运动路径" class="headerlink" title="13 机器人的运动路径"></a>13 机器人的运动路径</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 记录四个不同的方向</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> next[][] = &#123;&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,-<span class="number">1</span>&#125;,&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line">    <span class="comment">// 记录能走多少个格子</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">movingCount</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 标记该位置是否判断过</span></span><br><span class="line">            <span class="keyword">boolean</span>[][] marked = <span class="keyword">new</span> <span class="keyword">boolean</span>[m][n];</span><br><span class="line">            backtracking( m, n, k, marked, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">backtracking</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="keyword">int</span> k, <span class="keyword">boolean</span>[][] marked, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123; <span class="comment">// 不是一个矩阵或者该位置已经判断过，直接返回</span></span><br><span class="line">            <span class="keyword">if</span> ( i &lt; <span class="number">0</span> || i &gt;= m || j &lt; <span class="number">0</span> || j &gt;= n || marked[i][j]) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 该位置已判断</span></span><br><span class="line">            marked[i][j] = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 不能走，返回</span></span><br><span class="line">            <span class="keyword">if</span> ( sum(i, j) &gt; k ) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 能走，能走的格子数+1</span></span><br><span class="line">            count++;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 向四个方向再找能走的格子</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span>[] dir : next) &#123;</span><br><span class="line">                backtracking(m, n, k, marked, i + dir[<span class="number">0</span>], j + dir[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (i/<span class="number">10</span> + i%<span class="number">10</span>) + (j/<span class="number">10</span> + j%<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="14-1-剪绳子I"><a href="#14-1-剪绳子I" class="headerlink" title="14-1 剪绳子I"></a>14-1 剪绳子I</h3><p>动态规划法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">cuttingRope</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// dp[n]表示n段绳子最大乘积</span></span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">        dp[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; i ++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j &lt; i; j++) <span class="comment">// 至少剪长度为2</span></span><br><span class="line">                <span class="comment">// 状态转移方程</span></span><br><span class="line">                dp[i] = Math.max(dp[i], Math.max(j * (i -j), j * dp[i - j]));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="14-2-剪绳子II"><a href="#14-2-剪绳子II" class="headerlink" title="14-2 剪绳子II"></a>14-2 剪绳子II</h3><p>找规律，剪长度为3最大，最后的剪成2*2</p><h3 id="15-二进制中1的个数"><a href="#15-二进制中1的个数" class="headerlink" title="15 二进制中1的个数"></a>15 二进制中1的个数</h3><p>位运算，n &amp; (n - 1)，每次可以消除一个1，直到n变成0</p><h3 id="16-数组的整数次方"><a href="#16-数组的整数次方" class="headerlink" title="16 数组的整数次方"></a>16 数组的整数次方</h3><p>递归实现，注意考虑正负</p><h3 id="17-打印从1到最大的n位数"><a href="#17-打印从1到最大的n位数" class="headerlink" title="17 打印从1到最大的n位数"></a>17 打印从1到最大的n位数</h3><p>略</p><h3 id="18-删除链表的结点"><a href="#18-删除链表的结点" class="headerlink" title="18 删除链表的结点"></a>18 删除链表的结点</h3><p>两个指针一前一后跑</p><h3 id="19-正则表达式的匹配"><a href="#19-正则表达式的匹配" class="headerlink" title="19 正则表达式的匹配"></a>19 正则表达式的匹配</h3><p>复杂问题考虑动态规划</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isMatch</span><span class="params">(String s, String p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = s.length(); <span class="comment">// m表示要检测字符串的长度</span></span><br><span class="line">        <span class="keyword">int</span> n = p.length(); <span class="comment">// n表示模式的长度</span></span><br><span class="line">        <span class="keyword">boolean</span>[][] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[m + <span class="number">1</span>][n + <span class="number">1</span>]; <span class="comment">// dp[i][j]表示s的前i项和p的前j项是否匹配</span></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="keyword">true</span>;<span class="comment">// 初始化，两个空串肯定匹配</span></span><br><span class="line">    <span class="comment">// 有*的位置，前一个字符可以任意匹配，所以这两个字符不影响结果</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p.charAt(i - <span class="number">1</span>) == <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">                dp[<span class="number">0</span>][i] = dp[<span class="number">0</span>][i - <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">               <span class="comment">// .可以匹配任意一个字符</span></span><br><span class="line">                <span class="keyword">if</span> ( s.charAt(i - <span class="number">1</span>) == p.charAt(j - <span class="number">1</span>) || p.charAt(j - <span class="number">1</span>) == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                <span class="comment">// 遇到*</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (p.charAt(j - <span class="number">1</span>) == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                     <span class="keyword">if</span> (s.charAt(i - <span class="number">1</span>) == p.charAt(j - <span class="number">2</span>) || p.charAt(j - <span class="number">2</span>) == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                         dp[i][j] |= dp[i][j - <span class="number">1</span>]; <span class="comment">// *可以当单个字符</span></span><br><span class="line">                         dp[i][j] |= dp[i - <span class="number">1</span>][j]; <span class="comment">// *可以当多个字符</span></span><br><span class="line">                         dp[i][j] |= dp[i][j - <span class="number">2</span>]; <span class="comment">// *可以当空字符</span></span><br><span class="line">                     &#125;</span><br><span class="line">                     <span class="keyword">else</span></span><br><span class="line">                         dp[i][j] = dp[i][j - <span class="number">2</span>]; </span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m][n];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="21-表示数值的字符串"><a href="#21-表示数值的字符串" class="headerlink" title="21 表示数值的字符串"></a>21 表示数值的字符串</h3><p>用正则表达式匹配</p><h3 id="22-调整数组顺序使得奇数位于偶数前面"><a href="#22-调整数组顺序使得奇数位于偶数前面" class="headerlink" title="22 调整数组顺序使得奇数位于偶数前面"></a>22 调整数组顺序使得奇数位于偶数前面</h3><p>建一个新数组来存</p><h3 id="23-链表中倒数第k个结点"><a href="#23-链表中倒数第k个结点" class="headerlink" title="23 链表中倒数第k个结点"></a>23 链表中倒数第k个结点</h3><p>关键：不知道链表中有多少个结点，无法确定第k个位置</p><p>用双指针，一个比另一个多跑k次，第一个到达终点，第二个在倒数第k个位置</p><h3 id="24-反转链表"><a href="#24-反转链表" class="headerlink" title="24 反转链表"></a>24 反转链表</h3><p>用头插法，注意要使用一个辅助节点</p><h3 id="25-合并两个排序链表"><a href="#25-合并两个排序链表" class="headerlink" title="25 合并两个排序链表"></a>25 合并两个排序链表</h3><p>用递归的思想，确定每一步要把哪两个子链表合并到哪一个节点后面</p><h3 id="26-树的子结构"><a href="#26-树的子结构" class="headerlink" title="26 树的子结构"></a>26 树的子结构</h3><p>递归判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断B是不是A的子结构 </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSubStructure</span><span class="params">(TreeNode A, TreeNode B)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ( A == <span class="keyword">null</span> || B == <span class="keyword">null</span> )</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> isSubTree(A, B) || isSubStructure(A.left, B) || isSubStructure(A.right, B);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 判断B是不是A的子树</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSubTree</span><span class="params">(TreeNode A, TreeNode B)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( B == <span class="keyword">null</span> )</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">if</span> ( A == <span class="keyword">null</span> )</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> ( A.val != B.val)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">return</span> isSubTree(A.left, B.left) &amp;&amp; isSubTree(A.right, B.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="27-二叉树的镜像"><a href="#27-二叉树的镜像" class="headerlink" title="27 二叉树的镜像"></a>27 二叉树的镜像</h3><p>递归，交换子树再交换子树的子树，直到没有能交换的</p><h3 id="28-对称的二叉树"><a href="#28-对称的二叉树" class="headerlink" title="28 对称的二叉树"></a>28 对称的二叉树</h3><p>递归判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断以root为根的树是否对成</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSymmetric</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> isSymmetric(root.left, root.right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 判断left和rigth是否对称</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isSymmetric</span><span class="params">(TreeNode left, TreeNode right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left == <span class="keyword">null</span> &amp;&amp; right == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (left == <span class="keyword">null</span> || right == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (left.val != right.val)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">// 左子树的左子树和右子树的右子树，以及左子树的右子树和右子树的左子树是否对称</span></span><br><span class="line">    <span class="keyword">return</span> isSymmetric(left.left, right.right) &amp;&amp; isSymmetric(left.right, right.left);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="29-顺时针打印矩阵"><a href="#29-顺时针打印矩阵" class="headerlink" title="29 顺时针打印矩阵"></a>29 顺时针打印矩阵</h3><p>按顺序输出即可，注意矩阵范围的变化</p><h3 id="31-栈的压入弹出序列"><a href="#31-栈的压入弹出序列" class="headerlink" title="31 栈的压入弹出序列"></a>31 栈的压入弹出序列</h3><p>用一个栈模拟弹出过程，看是否可行</p><h3 id="32-1-从上到下打印二叉树"><a href="#32-1-从上到下打印二叉树" class="headerlink" title="32-1 从上到下打印二叉树"></a>32-1 从上到下打印二叉树</h3><p>用队列存，一层一层打印</p><h3 id="32-2-从上到下打印二叉树II"><a href="#32-2-从上到下打印二叉树II" class="headerlink" title="32-2 从上到下打印二叉树II"></a>32-2 从上到下打印二叉树II</h3><p>略</p><h3 id="32-3-从上到下打印二叉树III"><a href="#32-3-从上到下打印二叉树III" class="headerlink" title="32-3 从上到下打印二叉树III"></a>32-3 从上到下打印二叉树III</h3><p>注意可以使用Collection.reverse()</p><h3 id="33-二叉搜索树的后序遍历序列"><a href="#33-二叉搜索树的后序遍历序列" class="headerlink" title="33 二叉搜索树的后序遍历序列"></a>33 二叉搜索树的后序遍历序列</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">verifyPostorder</span><span class="params">(<span class="keyword">int</span>[] postorder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (postorder == <span class="keyword">null</span> || postorder.length == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> verify(postorder, <span class="number">0</span>, postorder.length - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">verify</span><span class="params">(<span class="keyword">int</span>[] postorder, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (end - start &lt;= <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="comment">// 后序遍历最后一个元素是根节点</span></span><br><span class="line">    <span class="keyword">int</span> rootval = postorder[end];</span><br><span class="line">    <span class="keyword">int</span> cutindex = start;</span><br><span class="line">    <span class="comment">// 找到第一个大于根节点的节点，即左右子树的分解</span></span><br><span class="line">    <span class="keyword">while</span> (cutindex &lt; end &amp;&amp; postorder[cutindex] &lt;= rootval) &#123;</span><br><span class="line">        cutindex++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 检查右子树是否都大于根节点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = cutindex; i &lt; end; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (postorder[i] &lt; rootval)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 递归判断左右子树是否也是二叉搜索树的后序遍历序列</span></span><br><span class="line">    <span class="keyword">return</span> verify(postorder, start, cutindex - <span class="number">1</span>) &amp;&amp; verify(postorder, cutindex, end - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="35-复杂链表的复制"><a href="#35-复杂链表的复制" class="headerlink" title="35 复杂链表的复制"></a>35 复杂链表的复制</h3><p>第一步，在每个节点后面插入复制节点；</p><p>第二步，给复制节点的random赋值；</p><p>第三步，拆分。</p><p>为什么不能直接复制：链表不能随机访问，直接复制想找到random节点的位置，只能顺序查找，复杂度高。</p><h3 id="36-二叉搜索树和双向链表"><a href="#36-二叉搜索树和双向链表" class="headerlink" title="36 二叉搜索树和双向链表"></a>36 二叉搜索树和双向链表</h3><p>双指针+中序遍历构建</p><h3 id="37-序列化二叉树"><a href="#37-序列化二叉树" class="headerlink" title="37 序列化二叉树"></a>37 序列化二叉树</h3><p>难点在于反序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> TreeNode <span class="title">deserialize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (deserializeStr.length() == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// 找根节点</span></span><br><span class="line">    <span class="keyword">int</span> index = deserializeStr.indexOf(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    <span class="comment">// 根节点的值</span></span><br><span class="line">    String node = index == -<span class="number">1</span> ? deserializeStr : deserializeStr.substring(<span class="number">0</span>, index);</span><br><span class="line">    <span class="comment">// 剩下需要反序列化的字符串</span></span><br><span class="line">    deserializeStr = index == -<span class="number">1</span> ? <span class="string">&quot;&quot;</span> : deserializeStr.substring(index + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (node.equals(<span class="string">&quot;#&quot;</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> val = Integer.valueOf(node);</span><br><span class="line">    <span class="comment">// 构建二叉树</span></span><br><span class="line">    TreeNode t = <span class="keyword">new</span> TreeNode(val);</span><br><span class="line">    t.left = deserialize();</span><br><span class="line">    t.right = deserialize();</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="38-字符串的排列"><a href="#38-字符串的排列" class="headerlink" title="38 字符串的排列"></a>38 字符串的排列</h3><p>搜索</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> ArrayList&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String[] permutation(String s) &#123;</span><br><span class="line">    <span class="keyword">if</span> ( s.length() == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> res.toArray(<span class="keyword">new</span> String[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">char</span>[] chars = s.toCharArray();</span><br><span class="line">    Arrays.sort(chars);</span><br><span class="line">    backtracking(chars, <span class="keyword">new</span> <span class="keyword">boolean</span>[chars.length], <span class="keyword">new</span> StringBuilder());</span><br><span class="line">    <span class="keyword">return</span> res.toArray(<span class="keyword">new</span> String[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">backtracking</span><span class="params">(<span class="keyword">char</span>[] chars, <span class="keyword">boolean</span>[] hasused, StringBuilder s)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 字符串已经用完，存入结果</span></span><br><span class="line">    <span class="keyword">if</span> (s.length() == chars.length) &#123;</span><br><span class="line">        res.add(s.toString());</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">        <span class="comment">// 查找字符数组，已经用过跳到下一轮</span></span><br><span class="line">        <span class="keyword">if</span> (hasused[i]) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 保证不重复</span></span><br><span class="line">        <span class="keyword">if</span> (i != <span class="number">0</span> &amp;&amp; chars[i] == chars[i - <span class="number">1</span>] &amp;&amp; !hasused[i - <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 标记用过</span></span><br><span class="line">        hasused[i] = <span class="keyword">true</span>;</span><br><span class="line">        s.append(chars[i]);</span><br><span class="line">        backtracking(chars, hasused, s);</span><br><span class="line">        s.deleteCharAt(s.length() - <span class="number">1</span>);</span><br><span class="line">        hasused[i] = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="39-数组中出现超过一半的数字"><a href="#39-数组中出现超过一半的数字" class="headerlink" title="39 数组中出现超过一半的数字"></a>39 数组中出现超过一半的数字</h3><p>利用出现超过一半的数字满足的特点，和其他数字两两相消最后会剩下</p><h3 id="40-最小的k个数字"><a href="#40-最小的k个数字" class="headerlink" title="40 最小的k个数字"></a>40 最小的k个数字</h3><p>用一个最大堆，每次超过k个就把最大的poll，最后留下的就是最小的k个数字</p><h3 id="41-数据流中的中位数"><a href="#41-数据流中的中位数" class="headerlink" title="41 数据流中的中位数"></a>41 数据流中的中位数</h3><p>用一个大顶堆一个小顶堆，一左一右，中位数就是堆顶值的平均（注意奇偶的处理）</p><h3 id="42-连续子数组的最大和"><a href="#42-连续子数组的最大和" class="headerlink" title="42 连续子数组的最大和"></a>42 连续子数组的最大和</h3><p>用动态规划</p><h3 id="43-1-n整数中1出现的次数"><a href="#43-1-n整数中1出现的次数" class="headerlink" title="43 1~n整数中1出现的次数"></a>43 1~n整数中1出现的次数</h3><p>用数学思想</p><h3 id="44-数字序列中某一位的数字"><a href="#44-数字序列中某一位的数字" class="headerlink" title="44 数字序列中某一位的数字"></a>44 数字序列中某一位的数字</h3><p>同样用数学思想</p><h3 id="45-把数组排成最小的数"><a href="#45-把数组排成最小的数" class="headerlink" title="45 把数组排成最小的数"></a>45 把数组排成最小的数</h3><p>定义新的比较方法<code>Arrays.sort(res, (s1, s2) -&gt; (s1 + s2).compareTo(s2 + s1));</code>，从而得出最小排列</p><h3 id="46-把数字翻译成字符串"><a href="#46-把数字翻译成字符串" class="headerlink" title="46 把数字翻译成字符串"></a>46 把数字翻译成字符串</h3><p>动态规划</p><h3 id="47-礼物的最大价值"><a href="#47-礼物的最大价值" class="headerlink" title="47 礼物的最大价值"></a>47 礼物的最大价值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxValue</span><span class="params">(<span class="keyword">int</span>[][] values)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (values == <span class="keyword">null</span> || values.length == <span class="number">0</span> || values[<span class="number">0</span>].length == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> n = values[<span class="number">0</span>].length;</span><br><span class="line">    <span class="comment">// dp[n]表示走n步能拿到的最大价值，最多能走n-1步</span></span><br><span class="line">    <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span>[] value : values) &#123;</span><br><span class="line">        dp[<span class="number">0</span>] += value[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">            dp[i] = Math.max(dp[i], dp[i - <span class="number">1</span>]) + value[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="48-最长不含重复字符的子字符串"><a href="#48-最长不含重复字符的子字符串" class="headerlink" title="48 最长不含重复字符的子字符串"></a>48 最长不含重复字符的子字符串</h3><p>用哈希表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    Map&lt;Character, Integer&gt; dic = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>, tmp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; s.length(); j++) &#123;</span><br><span class="line">        <span class="keyword">int</span> i = dic.getOrDefault(s.charAt(j), -<span class="number">1</span>); <span class="comment">// 获取索引 i</span></span><br><span class="line">        dic.put(s.charAt(j), j); <span class="comment">// 更新哈希表</span></span><br><span class="line">        tmp = tmp &lt; j - i ? tmp + <span class="number">1</span> : j - i; <span class="comment">// dp[j - 1] -&gt; dp[j]</span></span><br><span class="line">        res = Math.max(res, tmp); <span class="comment">// max(dp[j - 1], dp[j])</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="49-丑数"><a href="#49-丑数" class="headerlink" title="49 丑数"></a>49 丑数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">nthUglyNumber</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (N &lt;= <span class="number">6</span>)</span><br><span class="line">        <span class="keyword">return</span> N;</span><br><span class="line">    <span class="keyword">int</span> i2 = <span class="number">0</span>, i3 = <span class="number">0</span>, i5 = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// dp[i-1]表示第i个丑数</span></span><br><span class="line">    <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> next2 = dp[i2] * <span class="number">2</span>, next3 = dp[i3] * <span class="number">3</span>, next5 = dp[i5] * <span class="number">5</span>;</span><br><span class="line">        dp[i] = Math.min(next2, Math.min(next3, next5));</span><br><span class="line">        <span class="keyword">if</span> (dp[i] == next2)</span><br><span class="line">            i2++;</span><br><span class="line">        <span class="keyword">if</span> (dp[i] == next3)</span><br><span class="line">            i3++;</span><br><span class="line">        <span class="keyword">if</span> (dp[i] == next5)</span><br><span class="line">            i5++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[N - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="50-第一个只出现一次的字符"><a href="#50-第一个只出现一次的字符" class="headerlink" title="50 第一个只出现一次的字符"></a>50 第一个只出现一次的字符</h3><p>用哈希表存储字符的出现次数</p><h3 id="51-数组中的逆序对"><a href="#51-数组中的逆序对" class="headerlink" title="51 数组中的逆序对"></a>51 数组中的逆序对</h3><p>利用归并排序</p><h3 id="52-两个链表的第一个公共节点"><a href="#52-两个链表的第一个公共节点" class="headerlink" title="52 两个链表的第一个公共节点"></a>52 两个链表的第一个公共节点</h3><p>两个指针分别先后在两个链表上走，第一次相遇在公共节点</p><h3 id="53-I-在排序数组中查找数字I"><a href="#53-I-在排序数组中查找数字I" class="headerlink" title="53-I 在排序数组中查找数字I"></a>53-I 在排序数组中查找数字I</h3><p>顺序查找即可</p><h3 id="53-II-0-n-1中缺失的数字"><a href="#53-II-0-n-1中缺失的数字" class="headerlink" title="53-II 0~n-1中缺失的数字"></a>53-II 0~n-1中缺失的数字</h3><p>二分查找，先根据中值判断这个数字在哪边，然后根据和前一个数的距离判断这个数字在哪</p><h3 id="54-二叉搜索树的第k大节点"><a href="#54-二叉搜索树的第k大节点" class="headerlink" title="54 二叉搜索树的第k大节点"></a>54 二叉搜索树的第k大节点</h3><p>中序遍历存到数组里面</p><h3 id="55-I-二叉树的深度"><a href="#55-I-二叉树的深度" class="headerlink" title="55-I 二叉树的深度"></a>55-I 二叉树的深度</h3><p>递归，深度等于两个字数深度比较大的+1</p><h3 id="55-II-平衡二叉树"><a href="#55-II-平衡二叉树" class="headerlink" title="55-II 平衡二叉树"></a>55-II 平衡二叉树</h3><p>利用深度函数，同样递归判断</p><h3 id="56-I-数组中数字出现的次数"><a href="#56-I-数组中数字出现的次数" class="headerlink" title="56-I 数组中数字出现的次数"></a>56-I 数组中数字出现的次数</h3><p>用哈希表即可</p><h3 id="56-II-数组中数字出现的次数II"><a href="#56-II-数组中数字出现的次数II" class="headerlink" title="56-II 数组中数字出现的次数II"></a>56-II 数组中数字出现的次数II</h3><p>同上</p><h3 id="57-和为s的两个数字"><a href="#57-和为s的两个数字" class="headerlink" title="57 和为s的两个数字"></a>57 和为s的两个数字</h3><p>利用排序性质，双指针解决</p><h3 id="57-II-和为s的连续正数序列"><a href="#57-II-和为s的连续正数序列" class="headerlink" title="57-II 和为s的连续正数序列"></a>57-II 和为s的连续正数序列</h3><p>用双指针标记序列范围，注意指针变化情况</p><h3 id="58-I-翻转单词顺序"><a href="#58-I-翻转单词顺序" class="headerlink" title="58-I 翻转单词顺序"></a>58-I 翻转单词顺序</h3><p>先翻转每个单词，再翻转整个字符串</p><h3 id="58-II-左旋转字符串"><a href="#58-II-左旋转字符串" class="headerlink" title="58-II 左旋转字符串"></a>58-II 左旋转字符串</h3><p>先翻转整个字符串，再分别翻转左右字符串</p><h3 id="59-队列的最大值"><a href="#59-队列的最大值" class="headerlink" title="59 队列的最大值"></a>59 队列的最大值</h3><p>借助双端队列实现</p><h3 id="60-n个骰子的点数"><a href="#60-n个骰子的点数" class="headerlink" title="60 n个骰子的点数"></a>60 n个骰子的点数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">double</span>[] dicesProbability(<span class="keyword">int</span> n) &#123;</span><br><span class="line">    <span class="keyword">double</span>[] dp = <span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">6</span>];</span><br><span class="line">    Arrays.fill(dp, <span class="number">1.0</span> / <span class="number">6.0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">double</span>[] tmp = <span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">5</span> * i + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; dp.length; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">6</span>; k++) &#123;</span><br><span class="line">                tmp[j + k] += dp[j] / <span class="number">6.0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dp = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="61-扑克牌中的顺子"><a href="#61-扑克牌中的顺子" class="headerlink" title="61 扑克牌中的顺子"></a>61 扑克牌中的顺子</h3><p>记录下0的数量，判断顺子的时候使用0，如果0不够则不是顺子</p><h3 id="62-圆圈中最后剩下的数字"><a href="#62-圆圈中最后剩下的数字" class="headerlink" title="62 圆圈中最后剩下的数字"></a>62 圆圈中最后剩下的数字</h3><p>可以按正常思路求解，也可以利用少一个人后的情况递归求解</p><h3 id="63-股票的利润"><a href="#63-股票的利润" class="headerlink" title="63 股票的利润"></a>63 股票的利润</h3><p>最大子数组问题的变化</p><h3 id="64-求1-2-…-n"><a href="#64-求1-2-…-n" class="headerlink" title="64 求1+2+…+n"></a>64 求1+2+…+n</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sumNums</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = n;</span><br><span class="line">    <span class="keyword">boolean</span> b = (n &gt; <span class="number">0</span>) &amp;&amp; ((sum += sumNums(n - <span class="number">1</span>)) &gt; <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="65-不用加减乘除做加法"><a href="#65-不用加减乘除做加法" class="headerlink" title="65 不用加减乘除做加法"></a>65 不用加减乘除做加法</h3><p>递归+移位 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b == <span class="number">0</span> ? a : add(a^b, (a &amp; b) &lt;&lt; <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="66-构建乘积数组"><a href="#66-构建乘积数组" class="headerlink" title="66 构建乘积数组"></a>66 构建乘积数组</h3><p>从两边分别累乘</p><h3 id="67-把字符串转换成整数"><a href="#67-把字符串转换成整数" class="headerlink" title="67 把字符串转换成整数"></a>67 把字符串转换成整数</h3><p>根据题目要求逐步求解即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">strToInt</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>, bndry = Integer.MAX_VALUE / <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, sign = <span class="number">1</span>, length = str.length();</span><br><span class="line">    <span class="keyword">if</span>(length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(str.charAt(i) == <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span>(++i == length) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(str.charAt(i) == <span class="string">&#x27;-&#x27;</span>) sign = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(str.charAt(i) == <span class="string">&#x27;-&#x27;</span> || str.charAt(i) == <span class="string">&#x27;+&#x27;</span>) i++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt; length; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(str.charAt(j) &lt; <span class="string">&#x27;0&#x27;</span> || str.charAt(j) &gt; <span class="string">&#x27;9&#x27;</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(res &gt; bndry || res == bndry &amp;&amp; str.charAt(j) &gt; <span class="string">&#x27;7&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> sign == <span class="number">1</span> ? Integer.MAX_VALUE : Integer.MIN_VALUE;</span><br><span class="line">        res = res * <span class="number">10</span> + (str.charAt(j) - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sign * res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="68-I-二叉搜索树的最近公共祖先"><a href="#68-I-二叉搜索树的最近公共祖先" class="headerlink" title="68-I 二叉搜索树的最近公共祖先"></a>68-I 二叉搜索树的最近公共祖先</h3><p>递归查找，如果找到和二者之一相等的则是该节点，否则是上一层的根节点</p><h3 id="68-II-二叉树的最近公共祖先"><a href="#68-II-二叉树的最近公共祖先" class="headerlink" title="68-II 二叉树的最近公共祖先"></a>68-II 二叉树的最近公共祖先</h3><p>同上</p>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>软件工程 第8章 面向对象建模</title>
      <link href="2021/04/03/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B-%E7%AC%AC8%E7%AB%A0-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%BB%BA%E6%A8%A1/"/>
      <url>2021/04/03/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B-%E7%AC%AC8%E7%AB%A0-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%BB%BA%E6%A8%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="用况建模"><a href="#用况建模" class="headerlink" title="用况建模"></a>用况建模</h2><p>用况建模时用于描述一个系统应该做什么的建模技术。</p><p><strong>用况建模步骤</strong></p><ol><li>定义系统</li><li>确定执行者</li><li>确定用况</li><li>描述用况</li><li>确定用况间的关系</li><li>确认模型</li></ol><h2 id="静态建模"><a href="#静态建模" class="headerlink" title="静态建模"></a>静态建模</h2><p>静态建模描述系统中包含的类以及类之间的关系，展示了软件系统的静态结构。</p><p><em>CRC技术</em></p><p>类-责任-协作者技术，一组表示类的索引卡片，每张卡片分成三个部分，分别描述类、类的责任和类的协作者</p><p><em>类之间的关系</em></p><div class="table-container"><table><thead><tr><th>关系</th><th>功能</th><th>符号</th></tr></thead><tbody><tr><td>关联</td><td>类实例间连接的描述</td><td>——</td></tr><tr><td>依赖</td><td>二个模型元素之间的一种关系</td><td>——-&gt;</td></tr><tr><td>泛化</td><td>更特殊描述与更一般描述之间的一种关系，用于继承和多态性类型声明</td><td>——$\vartriangleright$</td></tr><tr><td>实现</td><td>规约（specification）与它的实现之间的关系</td><td>———$\vartriangleright$</td></tr></tbody></table></div><h2 id="动态建模"><a href="#动态建模" class="headerlink" title="动态建模"></a>动态建模</h2><p>动态建模用来描述系统的动态行为，显示对象在运行期间不同时刻的动态交互。UML中用状态机图、活动图、顺序图、通信图和协作图来建立动态模型。</p><p><em>状态机图</em></p><p>画状态机图的步骤：</p><ol><li>列出对象具有的所有状态</li><li>标识导致状态转换的事件</li><li>为状态和迁移定义状态变量和动作</li></ol><p><em>活动图</em></p><p><em>顺序图</em></p><p><em>通信图</em></p><p><em>协作图</em></p><h2 id="物理体系结构建模"><a href="#物理体系结构建模" class="headerlink" title="物理体系结构建模"></a>物理体系结构建模</h2><p>系统的体系结构用来描述系统各部分的结构、接口以及它们用于通信的机制。</p><p>物理体系结构涉及系统的详细描述（根据系统所包含的硬件和软件），显示了硬件的结构，包括不同的结点以及这些结点之间如何连接，还表示了代码模块的物理结构和依赖关系，并展示了对进程、程序、构建等软件在运行时的物理分配。</p><p><em>回答的问题</em></p><ol><li>类和对象物理上位于哪个程序或进程？</li><li>程序和进程在哪台计算机上执行？</li><li>系统中有哪些计算机和其他硬件设备？它们如何相互连接？</li><li>不同的代码文件之间有什么依赖关系？如果一个指定文件被改变，那么那些其他文件需要重新编译？</li></ol><p>UML使用中物理体系结构用构件图、内部结构图和部署图来描述</p><p><em>构件图</em>：显示构件类型定义、内部结构和依赖。</p><p><em>部署图</em>：部署图展示了运行时处理结点和在结点上生存的制品的配置。</p>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>软件工程 第2章 系统工程</title>
      <link href="2021/04/01/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B-%E7%AC%AC2%E7%AB%A0-%E7%B3%BB%E7%BB%9F%E5%B7%A5%E7%A8%8B/"/>
      <url>2021/04/01/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B-%E7%AC%AC2%E7%AB%A0-%E7%B3%BB%E7%BB%9F%E5%B7%A5%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="基于计算机的系统"><a href="#基于计算机的系统" class="headerlink" title="基于计算机的系统"></a>基于计算机的系统</h2><p>软件、硬件、人员、数据库、文档、规程</p><h2 id="系统工程的任务"><a href="#系统工程的任务" class="headerlink" title="系统工程的任务"></a>系统工程的任务</h2><ol><li>识别用户的要求</li><li>系统建模和模拟<ul><li>硬件系统模型</li><li>软件系统模型</li><li>人机接口模型</li><li>数据模型</li></ul></li><li>成本估算及进度安排</li><li>可行性分析</li><li>生成系统规格说明</li></ol><h2 id="可行性分析"><a href="#可行性分析" class="headerlink" title="可行性分析"></a>可行性分析</h2><p><strong>经济可行性</strong></p><p>经济可行性主要进行成本效益分析，从经济角度，确定系统是否值得开发。</p><p><strong>技术可行性</strong></p><p>技术可行性主要根据系统的功能、性能、约束条件等，分析在现有资源和技术条件下系统能否实现。包括风险分析、资源分析和技术分析。</p><p><strong>法律可行性</strong></p>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>软件工程 第5章 结构化分析与设计</title>
      <link href="2021/04/01/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B-%E7%AC%AC5%E7%AB%A0-%E7%BB%93%E6%9E%84%E5%8C%96%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/"/>
      <url>2021/04/01/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B-%E7%AC%AC5%E7%AB%A0-%E7%BB%93%E6%9E%84%E5%8C%96%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="结构化分析方法的概述"><a href="#结构化分析方法的概述" class="headerlink" title="结构化分析方法的概述"></a>结构化分析方法的概述</h2><ol><li><p>抽象（自底向上）和分解（自顶向下）</p></li><li><p>结构化分析的过程</p><ol><li>理解当前的现实环境，获得当前系统的具体模型</li><li>从当前系统的具体模型抽象出当前系统的逻辑模型</li><li>分析目标系统与当前系统逻辑上的差别，建立目标系统的逻辑模型</li><li>为目标系统的逻辑模型作补充</li></ol></li><li><p>结构化分析模型的描述形式</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210401160457.png" alt="image-20210401160457326"></p></li></ol><h2 id="数据流图（DFD）"><a href="#数据流图（DFD）" class="headerlink" title="数据流图（DFD）"></a>数据流图（DFD）</h2><p>描述输入数据流到输出数据流的变换（即加工），用于对系统的功能建模</p><p><strong>数据流图的图形表示</strong></p><ol><li>基本图形元素</li></ol><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210401161352.png" alt="image-20210401161352705"></p><p>例：图书馆订购系统的DFD</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210401161621.png" alt="image-20210401161621374"></p><ol><li><p>扩充符号</p><ol><li>星号 * ：表示数据流之间存在”与“关系</li><li>加号 + ：表示数据流之间存在”或“关系</li><li>异或 $\bigoplus$：表示数据流之间存在”异或“（互斥）关系</li></ol></li><li><p>层次结构</p><p>每张图的加工数控制在 7$\pm$2</p></li></ol><p><strong>分层数据流的画法</strong></p><ol><li>画出系统的输入和输出</li><li>画出系统内部</li><li>画出加工内部</li><li>重复第三步，直至每个尚未分解的加工都足够简单</li></ol><h2 id="分层数据流图的审查"><a href="#分层数据流图的审查" class="headerlink" title="分层数据流图的审查"></a>分层数据流图的审查</h2><p><strong>一致性和完整性</strong></p><p><em>一致性</em></p><ol><li>父图与子图平衡</li><li>数据守恒</li><li>局部文件</li><li>一个加工的输出数据流不能与该加工的输入数据流同名</li></ol><p><em>完整性</em></p><ol><li>每个加工至少有一个输入数据流和一个输出数据流</li><li>在整套分层数据流图中，每个文件至少有一个加工该读文件，有另一个加工写该文件</li><li><p>分层数据流图中的每个数据流和文件都必须命名（除了流入或流出文件的数据流），并保持与数据字典一致</p></li><li><p>分层DFD中的每个基本加工都应该有一个加工规约</p></li></ol><p><strong>构造分层DFD时需要注意的问题</strong></p><ol><li>适当命名</li><li>画数据流而不是画控制流</li><li>避免一个加工有过多的数据流</li><li>分解尽可能均匀</li><li>先考虑稳定状态，忽略琐碎的枝节</li><li>随时准备重画</li></ol><p><strong>分解程度</strong></p><h2 id="数据字典"><a href="#数据字典" class="headerlink" title="数据字典"></a>数据字典</h2><p>数据流图 + 数据字典 = 软件逻辑模型</p><p><em>字典条目的种类</em></p><p>数据流、文件、数据项、加工、源或宿</p><p><em>字典数据中使用的描述符号</em></p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210401185616.png" alt="image-20210401185616134"></p><p><strong>字典条目</strong></p><p>DFD中的每个元素都对应一个数据字典条目的描述，不同种类的有不同的描述内容。</p><ol><li>数据流条目</li><li>文件条目</li><li>数据项条目</li><li>加工条目</li><li>源或宿条目</li><li>别名条目</li></ol><h2 id="描述基本加工的小说明"><a href="#描述基本加工的小说明" class="headerlink" title="描述基本加工的小说明"></a>描述基本加工的小说明</h2><p>DFD每个基本加工都用一条小说明进行描述，小说明就是基本加工的加工规约。</p><p>加工逻辑的描述方法有结构化语言、判定表和判定树。</p><h2 id="结构化设计概述"><a href="#结构化设计概述" class="headerlink" title="结构化设计概述"></a>结构化设计概述</h2><p>结构化设计（SD）是将结构化分析得到的数据流图映射成软件体系结构的一种设计方法，SD强调模块化、自顶向下逐步求精、信息隐蔽、高内聚低耦合等设计准则。</p><p><strong>结构图</strong></p><p>结构化设计方法中用结构图描述软件系统的体系结构，指出一个软件系统由哪些模块组成，以及模块之间的调用关系</p><p><strong>启发式设计策略</strong></p><ol><li>改造程序结构图，降低耦合度，提高内聚度</li><li>避免高扇出，并随着深度的增加，力求高扇入</li><li>模块的影响范围应限制在该模块的控制范围内</li><li>降低模块结构的复杂程度和冗余程度，提高一致性</li><li>模块的功能应是可预测的，避免对模块施加过多的限制</li><li>尽可能设计单入口和单出口的模块</li></ol><p><strong>结构化设计的步骤</strong></p><ol><li>建立初始结构图</li><li>对结构图的改进</li><li>书写设计文档</li><li>设计评审</li></ol><h2 id="数据流图到软件体系结构的映射"><a href="#数据流图到软件体系结构的映射" class="headerlink" title="数据流图到软件体系结构的映射"></a>数据流图到软件体系结构的映射</h2><p>结构化设计是将结构化分析的结果（数据流图）映射成软件的体系结构（结构图）。根据信息流的特点，可将数据流图分为数据流图和事务型数据流图，其对应的映射分别成为变化分析和事务分析。</p><p><strong>信息流</strong>：变换流和事务流</p><p><strong>数据流图映射到结构图的步骤</strong></p><ol><li>复审和精细数据流图</li><li>确定数据流图类型</li><li>将DFD映射成初始结构图</li><li>改进初始结构图</li></ol><p><strong>变换分析</strong></p><p>将变换型的DFD映射成初始的结构图</p><ol><li>划定输入流和输出流的边界，确定变换中心</li><li>进行第一级分解</li><li>进行第二级分解</li><li>标注输入输出信息</li></ol><p><strong>事务分析</strong>：确定事务中心、将DFD映射成事务性的结构图、分解每条动作路径的结构图</p><p><strong>分层DFD的映射</strong></p><h2 id="初始结构图的改进"><a href="#初始结构图的改进" class="headerlink" title="初始结构图的改进"></a>初始结构图的改进</h2><p>技巧：减少模块间的耦合度、消除重复功能、消除”管道模块“、模块大小适中、避免高扇出、考虑全局</p>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>软件工程 第4章 设计工程</title>
      <link href="2021/04/01/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B-%E7%AC%AC4%E7%AB%A0-%E8%AE%BE%E8%AE%A1%E5%B7%A5%E7%A8%8B/"/>
      <url>2021/04/01/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B-%E7%AC%AC4%E7%AB%A0-%E8%AE%BE%E8%AE%A1%E5%B7%A5%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="软件设计工程概述"><a href="#软件设计工程概述" class="headerlink" title="软件设计工程概述"></a>软件设计工程概述</h2><p>软件设计时是把软件需求变成软件表示的过程</p><p><strong>任务</strong></p><ol><li>数据/类设计</li><li>体系结构设计</li><li>接口设计</li><li>部件级设计</li></ol><p><strong>目标</strong></p><p><strong>过程</strong></p><ol><li>制定规范</li><li>体系结构和接口设计</li><li>数据/类设计</li><li>部件级（过程）设计</li><li>编写设计文档</li><li>设计评审</li></ol><h2 id="软件设计原则"><a href="#软件设计原则" class="headerlink" title="软件设计原则"></a>软件设计原则</h2><ul><li>抽象与逐步求精</li><li>模块化</li><li>信息隐藏</li><li>功能独立<ul><li>内聚：一个模块内部各个元素彼此结合的紧密程度的度量</li><li>耦合：模块之间的相对独立性的度量</li></ul></li></ul><h2 id="软件体系结构设计"><a href="#软件体系结构设计" class="headerlink" title="软件体系结构设计"></a>软件体系结构设计</h2><p><strong>软件体系结构的风格</strong></p><ol><li>以数据为中心的体系结构</li><li>数据流风格的体系结构</li><li>调用和返回风格的体系结构</li><li>面向对象风格的体系结构</li><li>层次式风格的体系结构</li></ol><h2 id="部件级设计技术"><a href="#部件级设计技术" class="headerlink" title="部件级设计技术"></a>部件级设计技术</h2><p>结构化程序设计</p><p><strong>图形表示法</strong></p><ul><li>程序流程图</li><li>N-S图</li><li>PAD</li></ul><p><strong>判定表</strong></p><p><strong>设计语言PDL</strong></p><p>一种用于描述功能部件的算法设计和处理细节的语言，是一种伪代码</p><h2 id="设计规约与设计评审"><a href="#设计规约与设计评审" class="headerlink" title="设计规约与设计评审"></a>设计规约与设计评审</h2><p>软件设计阶段的主要输出是设计规约，为了确保文档的质量，还必须对设计文档进行评审</p>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>软件工程 第3章 需求工程</title>
      <link href="2021/04/01/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B-%E7%AC%AC3%E7%AB%A0-%E9%9C%80%E6%B1%82%E5%B7%A5%E7%A8%8B/"/>
      <url>2021/04/01/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B-%E7%AC%AC3%E7%AB%A0-%E9%9C%80%E6%B1%82%E5%B7%A5%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="需求工程概述"><a href="#需求工程概述" class="headerlink" title="需求工程概述"></a>需求工程概述</h2><p>六个阶段：需求获取、需求分析和协商、系统建模、需求规约、需求验证和需求管理。</p><h2 id="需求获取"><a href="#需求获取" class="headerlink" title="需求获取"></a>需求获取</h2><p><strong>软件需求</strong></p><p>功能、性能、用户或人的因素、环境、界面、文档、数据、资源使用、安全保密、可靠性、软件成本消耗与进度开发、其他非功能性需求</p><p><strong>需求获取方法与策略</strong></p><p>建立顺畅的通信路径、访谈与调查、观察用户操作流程、组成联合小组、用例</p><h2 id="需求分析、协商与建模"><a href="#需求分析、协商与建模" class="headerlink" title="需求分析、协商与建模"></a>需求分析、协商与建模</h2><p><strong>需求分析原则</strong></p><ol><li>必须能够表示和理解问题的信息域</li><li>必须能够定义软件将完成的功能</li><li>必须能够表示软件的行为（作为外部事件的结果）</li><li>必规划分描述数据、功能和行为的模型， 从而可以分层次地揭示细节</li><li>分析过程应该从要素信息移向细节信息</li></ol><p><strong>需求协商</strong></p><p><strong>需求建模</strong></p><ul><li>面向数据流的结构化分析方法（SA）</li><li>面向数据结构的分析方法</li><li>面向对象的分析方法（OOA）</li></ul><h2 id="需求规约与验证"><a href="#需求规约与验证" class="headerlink" title="需求规约与验证"></a>需求规约与验证</h2><p><strong>需求规约</strong></p><p>软件需求规约框架</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210401094605.png" alt="image-20210401094558294"></p><p><strong>需求验证</strong></p><p>检验需求是否能反映用户的意愿</p><h2 id="需求管理"><a href="#需求管理" class="headerlink" title="需求管理"></a>需求管理</h2>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库引论 第四章 关系数据库的规范化设计</title>
      <link href="2021/03/30/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%95%E8%AE%BA%20%E7%AC%AC%E5%9B%9B%E7%AB%A0%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%A7%84%E8%8C%83%E5%8C%96%E8%AE%BE%E8%AE%A1/"/>
      <url>2021/03/30/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%95%E8%AE%BA%20%E7%AC%AC%E5%9B%9B%E7%AB%A0%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%A7%84%E8%8C%83%E5%8C%96%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="4-1-关系模式的设计问题"><a href="#4-1-关系模式的设计问题" class="headerlink" title="4.1 关系模式的设计问题"></a>4.1 关系模式的设计问题</h2><p><strong>关系模型的外延和内涵</strong></p><ul><li>外延：关系、表或当前值</li><li>内涵：对数据的定义以及数据完整性约束（静态约束和动态约束）的定义</li></ul><p><strong>模式冗余和异常问题</strong></p><p>数据的冗余可能会引起操作异常</p><p><strong>关系模式的非形式化设计准则</strong></p><ol><li>应尽可能只包含有直接联系的属性</li><li>应尽可能使得相关关系中不出现插入、删除和修改操作异常现象</li><li>应尽可能使得相应关系中避免放置尽可能为空值的属性</li><li>尽可能使得关系的等值连接在主键和外键属性上</li></ol><p><strong>符号规定</strong></p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210330184809.png" alt="image-20210330184801036"></p><h2 id="4-2-函数依赖"><a href="#4-2-函数依赖" class="headerlink" title="4.2 函数依赖"></a>4.2 函数依赖</h2><p><strong>函数依赖（FD）的定义</strong></p><p>关系模式R（U），X和Y是属性集U的子集，函数依赖是形为X-&gt;Y的一个命题，只要r是R的当前关系，对r中任意两个元组t和s，都有t[X] = s[X]蕴含t[Y] = s[Y]，那么称FD X -&gt; Y在关系模式R（U）中成立</p><p><strong>FD的逻辑蕴含</strong></p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210402125442.png" alt="image-20210402125442774"></p><p><strong>FD的推理规则</strong></p><p>U是关系模式R中的属性集，F是R上成立的只涉及U中属性的函数依赖集，FD的推理规则有以下三条：</p><p>A1 自反性 $若Y\subseteq X \subseteq U,则X\rightarrow Y在R上成立$</p><p>A2 增广性 $若X\rightarrow Y,且Z\subseteq U,则XZ\rightarrow YZ在R上成立$</p><p>A3 传递性 $若X \rightarrow Y,Y \rightarrow Z,则 X\rightarrow Z在R上成立$</p><p>其他五条规则</p><p>A4 合并性  $\lbrace X\rightarrow Y,X \rightarrow Z \rbrace \models X \rightarrow YZ $</p><p>A5 分解性 $\lbrace X \rightarrow Y,Z \subseteq Y \rbrace \models X \rightarrow Z$</p><p>A6 伪传递性 $\lbrace X \rightarrow Y, WY \rightarrow Z \rbrace \models WX \rightarrow Z$</p><p>A7 复合性 $\lbrace X \rightarrow Y, W \rightarrow Z \rbrace \models XW \rightarrow YZ$</p><p>A8  $\lbrace X \rightarrow Y, W \rightarrow Z \rbrace \models X\bigcup (W - Y) \rightarrow YZ$</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210402125908.png" alt="image-20210402125908142"></p><p><strong>FD和关键码的联系</strong></p><p><em>超键和候选键</em></p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210402151448.png" alt="image-20210402151448761"></p><p><strong>属性集的闭包</strong></p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210402151645.png" alt="image-20210402151645328"></p><p><strong>FD推理规则的完备性</strong></p><p><em>正确性</em>：从FD集F使用推理规则集推出的FD必定在F+中</p><p><em>完备性</em>：F+中的FD都能从F集使用推理规则导出</p><p>FD推理规则{A1,A2,A3}是完备的</p><p><strong>FD集的最小依赖集</strong></p><p>若F+=G+，则称F和G是等价的函数依赖集</p><p><em>最小依赖集Fmin</em></p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210402151940.png" alt="image-20210402151940110"></p><h2 id="4-3-模式的分解特性"><a href="#4-3-模式的分解特性" class="headerlink" title="4.3 模式的分解特性"></a>4.3 模式的分解特性</h2><p><strong>模式分解问题</strong></p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210402155820.png" alt="image-20210402155820123"></p><p><em>泛关系模式</em></p><p>现实问题的所有属性组成的关系模式（包括属性集和属性集上的数据完整性约束）称为泛关系模式，关系r是关系模式的当前值，是元组的集合，称为泛关系</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210402160117.png" alt="image-20210402160117469"></p><p><strong>无损分解</strong></p><p>r和$\sigma$是否等价</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210402160225.png" alt="image-20210402160224973"></p><p><em>幂等性</em></p><p><strong>无损分解的测试方法</strong></p><p><em>算法如下：</em></p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210404124444.png" alt="image-20210404124437456"></p><script type="math/tex; mode=display">定理:设\rho=\{R1,R2\}是关系模式R的一个分解，F是R上成立的FD集，那么分解\rho相对于F是无损分解的充分条件是\\(R1\bigcap R2)\rightarrow (R1-R2)(或(R2-R1))</script><script type="math/tex; mode=display">定理:如果FD\,X\rightarrow Y在模式R上成立，且X\bigcap Y=\varphi，\\那么R分解成\rho=\{R-Y,XY\}是无损分解</script><p><strong>保持函数依赖的分解</strong></p><p>F和{F1,F2,…,Fn}是否等价</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210404131605.png" alt="image-20210404131605106"></p><p><strong>模式分解与模式等价问题</strong></p><p>两个数据库的等价包括数据等价和依赖等价两个方面</p><ul><li>数据等价指两个数据库实例应标识同样的信息内容，用“无损分解”衡量。如果是无损分解，那么对泛关系反复的投影和连接都不会丢失信息。</li><li>依赖等价是指两个数据库模式有相同的依赖集闭包。在依赖集闭包相等的情况下，数据的语义是不会出差错的。</li></ul><h2 id="4-4-关系模式的范式"><a href="#4-4-关系模式的范式" class="headerlink" title="4.4 关系模式的范式"></a>4.4 关系模式的范式</h2><p><strong>第一范式 1NF</strong></p><p>定义：如果关系模式R的每个关系r的属性值都是不可分的原子值，那么称R是第一范式的模式</p><p>满足1NF的称为规范化关系，否则称为非规范化关系</p><p><strong>第二范式</strong></p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210404132729.png" alt="image-20210404132729028"></p><p>分解成2NF模式集的算法</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210404132814.png" alt="image-20210404132814460"></p><p><strong>第三范式</strong></p><p>定义：如果$X\rightarrow Y,Y\rightarrow A$，且$Y\nrightarrow X$ 和$A\notin Y$，那么称$X\rightarrow A$是传递依赖（A传递依赖于X）</p><p>定义：如果关系模式R是1NF，且每个非主属性都不传递于R的候选键，那么称R是第三范式（3NF）的模式，如果数据库模式种每个关系模式都是3NF，则称其为3NF的数据库模式。</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210404134254.png" alt="image-20210404134254589"></p><p>定理：如果R是3NF模式，那么R也是2NF模式</p><p>定理：设关系模式R，当R上每一个FD X-&gt;A都满足下列三个条件之一时</p><ol><li>A∈X</li><li>X是R的超键</li><li>A是主属性</li></ol><p>则关系模式R就是3NF模式</p><p><strong>BCNF</strong></p><p>定义：如果关系模式R是1NF，且每个属性都不传递依赖于R的候选键，那么称R是BCNF模式。如果数据库模式中每个关系模式都是BCNF，则称为BCNF的数据库模式。</p><p>定理：如果R是BCNF模式，那么R也是3NF模式</p><p>定义：设F是关系模式R的FD集，如果对F中每个非平凡的FD X-&gt;Y，都有X是R的超键，那么称R是BCNF的模式</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210404134912.png" alt="image-20210404134912083"></p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210404134944.png" alt="image-20210404134944537"></p><p><strong>模式设计方法的原则</strong></p><ul><li>数据库设计者在进行关系数据库的设计时，应作权衡，尽可能使数据库保持最好的特性。一般尽可能设计成BCNF模式集。如果设计成BCNF模式集时达不到FD的特点，那么只能降低要求，设计成3NF模式集，以求达到保持FD和无损分解的特点。</li><li>模式分解并不单指把泛关系模式分解成数据库模式，也可以把数据库模式转换成另一个数据库模式，分解和转换的关键是要“等价”地分解。一个好的模式设计方法应符合三条原则：表达性、分离性和最小冗余性。</li></ul><h2 id="4-5-模式的进一步规范化处理"><a href="#4-5-模式的进一步规范化处理" class="headerlink" title="4.5 模式的进一步规范化处理"></a>4.5 模式的进一步规范化处理</h2><p>FD还不足以描绘现实世界中数据之间的全部联系，有些联系就要用其他数据来刻画，例如多值依赖或连接依赖。</p><p><em>第四范式</em></p><p>（是4NF的模式肯定是BCNF模式）</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第七章 快速排序</title>
      <link href="2021/03/24/%E7%AC%AC%E4%B8%83%E7%AB%A0%20%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
      <url>2021/03/24/%E7%AC%AC%E4%B8%83%E7%AB%A0%20%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="快速排序的描述"><a href="#快速排序的描述" class="headerlink" title="快速排序的描述"></a>快速排序的描述</h2><p>使用分治的思想，分成三步</p><ol><li>分解：分成A[p…q-1]和A[q+1…r]，此时A[q]已经被放在了正确的位置，A[q]：pivot</li><li>解决：通过递归调用对子数组排序</li><li>合并：因为子数组已经有序，故不需要合并操作</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">QUICKSORT(A,p,r)</span><br><span class="line">if p &lt; r</span><br><span class="line">q &#x3D; PARTITION(A,p,r)</span><br><span class="line">QUICKSORT(A,p,q-1)</span><br><span class="line">QUICKSORT(A,q+1,r)</span><br><span class="line"></span><br><span class="line">PARTITION(A,p,r)</span><br><span class="line">x &#x3D; A[r]</span><br><span class="line">i &#x3D; p - 1</span><br><span class="line">for j &#x3D; p to r - 1</span><br><span class="line">if A[j] &lt;&#x3D; x</span><br><span class="line">i &#x3D; i + 1</span><br><span class="line">exchange A[i] with A[j]</span><br><span class="line">exchange A[i+1] with A[r]</span><br><span class="line">return i + 1</span><br></pre></td></tr></table></figure><h2 id="快速排序的性能"><a href="#快速排序的性能" class="headerlink" title="快速排序的性能"></a>快速排序的性能</h2><p>依赖于划分是否平衡，如果平衡，性能近似于归并排序；如果不平衡，性能近似于插入排序</p><ul><li><p>最坏情况划分（完全不平衡）</p><script type="math/tex; mode=display">T(n)=T(n-1)+T(0)+\Theta(n)</script><script type="math/tex; mode=display">T(n)=\Theta(n^2)</script></li></ul><ul><li>最好情况划分（完全平衡）<script type="math/tex; mode=display">T(n)=2T(n/2)+\Theta(n)</script></li></ul><script type="math/tex; mode=display">  T(n)=\Theta(n\lg n)</script><ul><li>平均情况的划分：平均情况事实上接近于最好情况（例如数组长度9：1时）</li></ul><h2 id="快速排序的随机化版本"><a href="#快速排序的随机化版本" class="headerlink" title="快速排序的随机化版本"></a>快速排序的随机化版本</h2><p>显示地对输入进行重新排列，使得算法实现随机化</p><p>在划分前进行一次交换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RANDOMIZED-PARTITION(A,p,r)</span><br><span class="line">i &#x3D; RANDOM(p,r)</span><br><span class="line">exchange A[r] with A[i]</span><br><span class="line">return PARTITION(A,p,r)</span><br></pre></td></tr></table></figure><h2 id="快速排序分析"><a href="#快速排序分析" class="headerlink" title="快速排序分析"></a>快速排序分析</h2><p><strong>最坏情况分析</strong></p><p>$O(n^2)$</p><p><strong>期望运行时间</strong></p><p>$O(n\lg n)$</p><p>证明过程略</p>]]></content>
      
      
      <categories>
          
          <category> 算法导论 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第六章 堆排序</title>
      <link href="2021/03/24/%E7%AC%AC%E5%85%AD%E7%AB%A0%20%E5%A0%86%E6%8E%92%E5%BA%8F/"/>
      <url>2021/03/24/%E7%AC%AC%E5%85%AD%E7%AB%A0%20%E5%A0%86%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>堆排序时间复杂度：$O(n\lg n)$，和归并排序一样</p><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><p>一个近似完全的二叉树</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210324140442.png" alt="image-20210324140441665"></p><ul><li>根节点A[1]</li><li>A[i]的父节点A[$\lfloor i/2 \rfloor$]</li><li>A[i]左子节点A[2i]</li><li>A[i]右子节点A[2i+1]</li></ul><p>最大堆：子节点小于等于父节点，根节点最大，用于堆排序</p><p>(一个叶子节点本身是一个最大堆)</p><p>最小堆：子节点大于等于父节点，根节点最小，用于构造优先级队列</p><p>n个节点的堆的高度 $\lfloor \lg n \rfloor$</p><h2 id="维护堆的性质"><a href="#维护堆的性质" class="headerlink" title="维护堆的性质"></a>维护堆的性质</h2><p>最大堆</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">MAX-HEAPIFY(A,i) &#x2F;&#x2F; Sub-tree rooted at node i</span><br><span class="line">l &#x3D; LEFT(i)</span><br><span class="line">r &#x3D; RIGHT(i)</span><br><span class="line">if l &lt; heap-size[A] and A[l] &gt; A[i]</span><br><span class="line">then largest &#x3D; l</span><br><span class="line">else largest &#x3D; i</span><br><span class="line">    if r &lt;&#x3D; heap-size[A] and A[r] &gt; A[largest]</span><br><span class="line">    then largest &#x3D; r</span><br><span class="line">    if largest !&#x3D; i</span><br><span class="line">    then exchange A[i] and A[largest]</span><br><span class="line">    MAX-HEAPIFY(A,largest)</span><br></pre></td></tr></table></figure><h2 id="建堆"><a href="#建堆" class="headerlink" title="建堆"></a>建堆</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BUILD-MAX-HEAP(A)</span><br><span class="line"> heap-size[A] &#x3D; length[A]</span><br><span class="line"> for i &#x3D; length[A]&#x2F;2 downto 1</span><br><span class="line">  do MAX-HEAPIFY(A,i)</span><br></pre></td></tr></table></figure><p>时间代价 $O(n\lg n)$</p><h2 id="堆排序算法"><a href="#堆排序算法" class="headerlink" title="堆排序算法"></a>堆排序算法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HEAPSORT(A)</span><br><span class="line">BUILD-MAX-HEAP(A)</span><br><span class="line">for i &#x3D; length[A] downto 2</span><br><span class="line">do exchange A[1] and A[i]</span><br><span class="line">heap-size[A] &#x3D; heap-size[A] - 1</span><br><span class="line">MAX-HEAPIFY(A,1)</span><br></pre></td></tr></table></figure><p>时间代价 $O(n\lg n)$</p><h2 id="优先级队列"><a href="#优先级队列" class="headerlink" title="优先级队列"></a>优先级队列</h2><p>一种用来维护一组元素构成的集合S的数据结构，其中每个元素有一个关键字key。</p><p>支持的操作：</p><ul><li>INSERT(S, x)，把元素x插入集合S中</li><li>MAXINUM(S)，返回S中具有最大键字的元素</li><li>EXTRACT-MAX(S)，去掉并返回S中具有最大键字的元素</li><li>INCREASE-KEYS(S, x, k)，将元素x的关键字增加到k（比原来大）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法导论 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库引论 第五章 数据库设计和ER模型</title>
      <link href="2021/03/23/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%95%E8%AE%BA%20%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E5%92%8CER%E6%A8%A1%E5%9E%8B/"/>
      <url>2021/03/23/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%95%E8%AE%BA%20%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E5%92%8CER%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="数据库设计概论"><a href="#数据库设计概论" class="headerlink" title="数据库设计概论"></a>数据库设计概论</h2><p>数据库生存期：</p><p>规划、需求分析、概念设计、逻辑设计、物理设计、实现、运行和维护</p><h2 id="数据库设计全过程"><a href="#数据库设计全过程" class="headerlink" title="数据库设计全过程"></a>数据库设计全过程</h2><p><strong>规划</strong></p><p>系统调查、可行性分析、确定数据库系统的总目标和制定项目开发计划</p><p><strong>需求分析</strong></p><ul><li>分析用户活动产生，产生业务流程图（TFD）</li><li>确定系统范围，产生系统范围图</li><li>分析用户活动涉及的数据，产生数据流图（DFD）</li><li>分析系统数据，产生数据字典</li></ul><p><strong>概念设计</strong></p><p>从每个用户的角度出发定义ER图，然后合并</p><p><strong>逻辑设计</strong></p><p>根据概念模式转换成逻辑模式、模式评价、修正</p><p><strong>物理设计</strong></p><ul><li>存储记录结构设计</li><li>确定数据存放位置</li><li>存取方法的设计</li><li>完整性和安全性考虑</li><li>程序设计</li></ul><p><strong>数据库实现</strong></p><ul><li>用DDL定义数据库结构</li><li>组织数据入库</li><li>编制与调试应用程序</li><li>数据库试运行<ul><li>功能测试</li><li>性能测试（时空代价）</li></ul></li></ul><p><strong>数据库的运行与维护工作</strong></p><ul><li>数据库的转储和恢复</li><li>数据库安全性、完整性控制</li><li>数据库性能的监督、分析和改进</li><li>数据库的重组织和重构造</li></ul><h2 id="ER模型"><a href="#ER模型" class="headerlink" title="ER模型"></a>ER模型</h2><p><strong>基本元素</strong>：实体、联系、属性、例子</p><h2 id="ER模型到关系模型的转换"><a href="#ER模型到关系模型的转换" class="headerlink" title="ER模型到关系模型的转换"></a>ER模型到关系模型的转换</h2><p>将每个实体类型转换成一个关系模式，实体的属性即为关系模式的属性，实体标识符即为关系模式的键。</p><p>二元联系关系的转换：</p><ul><li>实体联系1：1 …</li><li>实体联系1：N …</li><li>实体联系M：N …</li></ul><h2 id="ER模型实例分析"><a href="#ER模型实例分析" class="headerlink" title="ER模型实例分析"></a>ER模型实例分析</h2><p>略</p><h2 id="ER模型的扩充"><a href="#ER模型的扩充" class="headerlink" title="ER模型的扩充"></a>ER模型的扩充</h2><p><strong>弱实体</strong></p><p>例如：职工的亲属的关系依附于职工，是弱实体</p><p><strong>子类实体与超类实体</strong></p><p>继承性、子类本身比超类具有更多属性、子类和超类有相同的标识符</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>32位ALU设计</title>
      <link href="2021/03/18/32%E4%BD%8DALU%E8%AE%BE%E8%AE%A1/"/>
      <url>2021/03/18/32%E4%BD%8DALU%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="设计思路及代码"><a href="#设计思路及代码" class="headerlink" title="设计思路及代码"></a>设计思路及代码</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> ALU32(</span><br><span class="line">ALUcont,A,B,</span><br><span class="line">zero,result</span><br><span class="line">);</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] A,B;</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">2</span>:<span class="number">0</span>] ALUcont;</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span>[<span class="number">31</span>:<span class="number">0</span>] result;</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> zero;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">always</span>@(*)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">case</span>(ALUcont)</span><br><span class="line">        <span class="comment">//AND</span></span><br><span class="line">        <span class="number">3&#x27;b000</span>:</span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">            result=A&amp;B;</span><br><span class="line">            zero=(result==<span class="number">0</span>)?<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="comment">//OR</span></span><br><span class="line">        <span class="number">3&#x27;b001</span>:</span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">            result=A|B;</span><br><span class="line">            zero=(result==<span class="number">0</span>)?<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="comment">//+</span></span><br><span class="line">        <span class="number">3&#x27;b010</span>:</span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">            result=A+B;</span><br><span class="line">            zero=(result==<span class="number">0</span>)?<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="comment">//not used</span></span><br><span class="line">        <span class="comment">//3&#x27;b011:</span></span><br><span class="line">        <span class="comment">//AND !</span></span><br><span class="line">        <span class="number">3&#x27;b100</span>:</span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">         result=A&amp;(~B);</span><br><span class="line">            zero=(result==<span class="number">0</span>)?<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="comment">//OR !</span></span><br><span class="line">        <span class="number">3&#x27;b101</span>:</span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">            result=A|(~B);</span><br><span class="line">            zero=(result==<span class="number">0</span>)?<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="comment">//-</span></span><br><span class="line">        <span class="number">3&#x27;b110</span>:</span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">            result=A-B;</span><br><span class="line">            zero=(A==B)?<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="comment">//SLT</span></span><br><span class="line">        <span class="number">3&#x27;b111</span>:</span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">                <span class="keyword">if</span>(A[<span class="number">31</span>]==<span class="number">1</span>&amp;&amp;B[<span class="number">31</span>]==<span class="number">0</span>)</span><br><span class="line">                    result=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(A[<span class="number">31</span>]==<span class="number">0</span>&amp;&amp;B[<span class="number">31</span>]==<span class="number">0</span>)</span><br><span class="line">                    result=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span> </span><br><span class="line">                    result=(A&lt;B)?<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">                zero=(result==<span class="number">0</span>)?<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">endcase</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span>        </span><br><span class="line">    </span><br></pre></td></tr></table></figure><h2 id="测试代码及表格补全"><a href="#测试代码及表格补全" class="headerlink" title="测试代码及表格补全"></a>测试代码及表格补全</h2><div class="table-container"><table><thead><tr><th>Test</th><th>ALUcont</th><th>A</th><th>B</th><th>result</th><th>zero</th></tr></thead><tbody><tr><td>ADD 0+0</td><td>2</td><td>00000000</td><td>00000000</td><td>00000000</td><td>1</td></tr><tr><td>ADD 0+(-1)</td><td>2</td><td>00000000</td><td>FFFFFFFF</td><td>FFFFFFFF</td><td>0</td></tr><tr><td>ADD 1+(-1)</td><td>2</td><td>00000001</td><td>FFFFFFFF</td><td>00000000</td><td>1</td></tr><tr><td>ADD FF+1</td><td>2</td><td>000000FF</td><td>00000001</td><td><u>00000100</u></td><td><u>0</u></td></tr><tr><td>SUB 0-0</td><td>6</td><td>00000000</td><td>00000000</td><td>00000000</td><td>1</td></tr><tr><td>SUB 0-(-1)</td><td>6</td><td>00000000</td><td>FFFFFFFF</td><td>00000001</td><td>0</td></tr><tr><td>SUB 1-1</td><td>6</td><td>00000001</td><td><u>00000001</u></td><td><u>00000000</u></td><td><u>1</u></td></tr><tr><td>SUB 100-1</td><td>6</td><td>00000100</td><td><u>00000001</u></td><td><u>000000ff</u></td><td><u>0</u></td></tr><tr><td>SLT 0,0</td><td>7</td><td>00000000</td><td>00000000</td><td>00000000</td><td>1</td></tr><tr><td>SLT 0,1</td><td>7</td><td>00000000</td><td><u>00000001</u></td><td>00000001</td><td>0</td></tr><tr><td>SLT 0,-1</td><td>7</td><td>00000000</td><td><u>FFFFFFFF</u></td><td><u>00000000</u></td><td><u>1</u></td></tr><tr><td>SLT 1,0</td><td>7</td><td>00000001</td><td><u>00000000</u></td><td><u>00000000</u></td><td><u>1</u></td></tr><tr><td>SLT -1,0</td><td>7</td><td>FFFFFFFF</td><td><u>00000000</u></td><td><u>00000001</u></td><td><u>0</u></td></tr><tr><td>AND FFFFFFFF,FFFFFFFF</td><td><u>0</u></td><td>FFFFFFFF</td><td>FFFFFFFF</td><td><u>FFFFFFFF</u></td><td><u>0</u></td></tr><tr><td>AND FFFFFFFF,12345678</td><td><u>0</u></td><td>FFFFFFFF</td><td>12345678</td><td>12345678</td><td>0</td></tr><tr><td>AND 12345678,87654321</td><td><u>0</u></td><td>12345678</td><td>87654321</td><td><u>02244220</u></td><td><u>0</u></td></tr><tr><td>AND 00000000,FFFFFFFF</td><td><u>0</u></td><td>00000000</td><td>FFFFFFFF</td><td><u>00000000</u></td><td><u>1</u></td></tr><tr><td>OR FFFFFFFF,FFFFFFFF</td><td><u>1</u></td><td>FFFFFFFF</td><td>FFFFFFFF</td><td><u>FFFFFFFF</u></td><td><u>0</u></td></tr><tr><td>OR 12345678,87654321</td><td><u>1</u></td><td>12345678</td><td>87654321</td><td><u>97755779</u></td><td><u>0</u></td></tr><tr><td>OR 00000000,FFFFFFFF</td><td><u>1</u></td><td>00000000</td><td>FFFFFFFF</td><td><u>FFFFFFFF</u></td><td><u>0</u></td></tr><tr><td>OR 00000000,00000000</td><td><u>1</u></td><td>00000000</td><td>00000000</td><td><u>00000000</u></td><td><u>1</u></td></tr></tbody></table></div><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> ALU32_test(</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">2</span>:<span class="number">0</span>] ALUcont;</span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">31</span>:<span class="number">0</span>] A,B;</span><br><span class="line">    <span class="keyword">wire</span> [<span class="number">31</span>:<span class="number">0</span>] result;</span><br><span class="line">    <span class="keyword">wire</span> zero;</span><br><span class="line">    ALU32 alu(ALUcont,A,B,zero,result); </span><br><span class="line">    <span class="keyword">initial</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">    <span class="comment">//add</span></span><br><span class="line">        ALUcont=<span class="number">3&#x27;b010</span>;</span><br><span class="line">        A=<span class="number">32&#x27;h00000000</span>;</span><br><span class="line">        B=<span class="number">32&#x27;h00000000</span>;</span><br><span class="line">    #<span class="number">20</span> A=<span class="number">32&#x27;h00000000</span>;</span><br><span class="line">        B=<span class="number">32&#x27;hffffffff</span>;</span><br><span class="line">    #<span class="number">20</span> A=<span class="number">32&#x27;h00000001</span>;</span><br><span class="line">        B=<span class="number">32&#x27;hffffffff</span>;</span><br><span class="line">    #<span class="number">20</span> A=<span class="number">32&#x27;h000000ff</span>;</span><br><span class="line">        B=<span class="number">32&#x27;h00000001</span>;</span><br><span class="line">    <span class="comment">//sub</span></span><br><span class="line">    #<span class="number">20</span> ALUcont=<span class="number">3&#x27;b110</span>;</span><br><span class="line">        A=<span class="number">32&#x27;h00000000</span>;</span><br><span class="line">        B=<span class="number">32&#x27;h00000000</span>;</span><br><span class="line">    #<span class="number">20</span> A=<span class="number">32&#x27;h00000000</span>;</span><br><span class="line">        B=<span class="number">32&#x27;hffffffff</span>;</span><br><span class="line">    #<span class="number">20</span> A=<span class="number">32&#x27;h00000001</span>;</span><br><span class="line">        B=<span class="number">32&#x27;h00000001</span>;</span><br><span class="line">    #<span class="number">20</span> A=<span class="number">32&#x27;h00000100</span>;</span><br><span class="line">        B=<span class="number">32&#x27;h00000001</span>;</span><br><span class="line">    <span class="comment">//slt</span></span><br><span class="line">    #<span class="number">20</span> ALUcont=<span class="number">3&#x27;b111</span>;</span><br><span class="line">        A=<span class="number">32&#x27;h00000000</span>;</span><br><span class="line">        B=<span class="number">32&#x27;h00000000</span>;</span><br><span class="line">    #<span class="number">20</span> A=<span class="number">32&#x27;h00000000</span>;</span><br><span class="line">        B=<span class="number">32&#x27;h00000001</span>;</span><br><span class="line">    #<span class="number">20</span> A=<span class="number">32&#x27;h00000000</span>;</span><br><span class="line">        B=<span class="number">32&#x27;hffffffff</span>;</span><br><span class="line">    #<span class="number">20</span> A=<span class="number">32&#x27;h00000001</span>;</span><br><span class="line">        B=<span class="number">32&#x27;h00000000</span>;</span><br><span class="line">    #<span class="number">20</span> A=<span class="number">32&#x27;hffffffff</span>;</span><br><span class="line">        B=<span class="number">32&#x27;h00000000</span>;</span><br><span class="line">    <span class="comment">//and</span></span><br><span class="line">    #<span class="number">20</span> ALUcont=<span class="number">3&#x27;b000</span>;</span><br><span class="line">        A=<span class="number">32&#x27;hffffffff</span>;</span><br><span class="line">        B=<span class="number">32&#x27;hffffffff</span>;</span><br><span class="line">    #<span class="number">20</span> A=<span class="number">32&#x27;hffffffff</span>;</span><br><span class="line">        B=<span class="number">32&#x27;h12345678</span>;</span><br><span class="line">    #<span class="number">20</span> A=<span class="number">32&#x27;h12345678</span>;</span><br><span class="line">        B=<span class="number">32&#x27;h87654321</span>;</span><br><span class="line">    #<span class="number">20</span> A=<span class="number">32&#x27;h00000000</span>;</span><br><span class="line">        B=<span class="number">32&#x27;hffffffff</span>;</span><br><span class="line">    <span class="comment">//or</span></span><br><span class="line">    #<span class="number">20</span> ALUcont=<span class="number">3&#x27;b001</span>;</span><br><span class="line">        A=<span class="number">32&#x27;hffffffff</span>;</span><br><span class="line">        B=<span class="number">32&#x27;hffffffff</span>;</span><br><span class="line">    #<span class="number">20</span> A=<span class="number">32&#x27;h12345678</span>;</span><br><span class="line">        B=<span class="number">32&#x27;h87654321</span>;</span><br><span class="line">    #<span class="number">20</span> A=<span class="number">32&#x27;h00000000</span>;</span><br><span class="line">        B=<span class="number">32&#x27;hffffffff</span>;</span><br><span class="line">    #<span class="number">20</span> A=<span class="number">32&#x27;h00000000</span>;</span><br><span class="line">        B=<span class="number">32&#x27;h00000000</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure><h2 id="仿真波形图"><a href="#仿真波形图" class="headerlink" title="仿真波形图"></a>仿真波形图</h2><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210318081405.png" alt="image-20210318081357819"></p>]]></content>
      
      
      <categories>
          
          <category> 体系结构实验 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第2章 指令集基本原理</title>
      <link href="2021/03/17/%E7%AC%AC2%E7%AB%A0%20%E6%8C%87%E4%BB%A4%E9%9B%86%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/"/>
      <url>2021/03/17/%E7%AC%AC2%E7%AB%A0%20%E6%8C%87%E4%BB%A4%E9%9B%86%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="指令集体系结构的分类"><a href="#指令集体系结构的分类" class="headerlink" title="指令集体系结构的分类"></a>指令集体系结构的分类</h2><p>最主要的区别：CPU用来存储操作数的存储单元类型</p><ul><li><p>堆栈：堆栈结构</p></li><li><p>累加器：累加器结构</p></li><li><p>通用寄存器：通用寄存器结构（主流结构）</p><ul><li>寄存器-寄存器型（RR） / load-store结构</li><li>寄存器-存储器型（RM）</li><li>存储器存储器型（MM）</li></ul></li></ul><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210312101636.png" alt="image-20210312101629435"></p><p>根据操作数特征细分：<br>| ALU指令中存储器操作数的个数 | ALU指令中操作数的最多个数 | 结构类型 | 实例 |<br>| —————————————- | ————————————- | ———— | —— |<br>| 0                           | 3                         | RR       | MIPS |<br>| 1                           | 2                         | RM       | x86  |<br>| 2                           | 2                         | MM       | VAX  |<br>| 3                           | 3                         | MM       | VAX  |</p><h2 id="存储器寻址"><a href="#存储器寻址" class="headerlink" title="存储器寻址"></a>存储器寻址</h2><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210312103527.png" alt="image-20210312103527682"></p><ul><li>最常用的是较小立即数（有时候也会用到较大立即数，如地址计算）</li><li>指令集结构设计中，至少要将立即数大小设置为8~16位</li></ul><h2 id="操作数的类型与大小"><a href="#操作数的类型与大小" class="headerlink" title="操作数的类型与大小"></a>操作数的类型与大小</h2><p>由指令中的操作码指定操作数的类型</p><p><strong>大小</strong>：操作数的位数/字节数（字节8位，半字16位，字32位，双字64位）</p><p><strong>类型</strong>：字符（ASCII码表示，一个字节大小）、整数（用二进制补码表示，大小可以是字节、半字或单字）、浮点操作数（单精度1个字，双精度双字，IEEE 754标准）</p><p>十进制操作数类型：</p><ul><li>压缩十进制或二进制编码十进制</li><li>非压缩十进制：字符串表示</li></ul><h2 id="指令集中的操作"><a href="#指令集中的操作" class="headerlink" title="指令集中的操作"></a>指令集中的操作</h2><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210319084147.png" alt="image-20210319084140600"></p><h2 id="控制流指令"><a href="#控制流指令" class="headerlink" title="控制流指令"></a>控制流指令</h2><ul><li>跳转</li><li>分支（占控制流的大部分）</li><li>过程调用</li><li>过程返回</li></ul><h2 id="指令集编码"><a href="#指令集编码" class="headerlink" title="指令集编码"></a>指令集编码</h2><p>变长编码格式（适合寻址方式和操作种类很多时）、定长编码格式（适用于寻址方式和操作类型非常少时）、混合型编码格式</p><h2 id="指令设计风格"><a href="#指令设计风格" class="headerlink" title="指令设计风格"></a>指令设计风格</h2><ul><li>复杂指令集计算机CISC</li><li>精简指令集计算机RISC</li></ul><h2 id="MIPS体系结构"><a href="#MIPS体系结构" class="headerlink" title="MIPS体系结构"></a>MIPS体系结构</h2><p><strong>寄存器</strong></p><ul><li>32个64位通用寄存器（GPRS） R0…R31</li><li><p>32个64位浮点数寄存器（FPRS)   F0…F31</p></li><li><p>一些特殊寄存器，如浮点状态寄存器</p></li></ul><p>功能定义</p><p><strong>数据类型</strong></p><ul><li>整数</li><li>浮点数</li></ul><p><strong>寻址方式</strong></p><p>立即数寻址和偏移量寻址，字段都是16位</p><p><strong>指令格式</strong></p><p>寻址方式编码到操作码中，所有指令都是32位，操作码占6位，3种指令格式</p><ul><li>I类：load、store</li><li>R类：ALU指令、专用寄存器读/写指令、move指令</li><li>J类：跳转、跳转并链接、自陷指令、异常返回指令</li></ul><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210319102420.png" alt="image-20210319102420235"></p><p><strong>MIPS操作</strong></p><ul><li>load和store</li><li>ALU操作</li><li>分支与跳转</li><li>浮点操作</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机体系结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>单周期CPU设计</title>
      <link href="2021/03/17/%E5%8D%95%E5%91%A8%E6%9C%9FCPU%E8%AE%BE%E8%AE%A1/"/>
      <url>2021/03/17/%E5%8D%95%E5%91%A8%E6%9C%9FCPU%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="项目代码"><a href="#项目代码" class="headerlink" title="项目代码"></a>项目代码</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单周期mips处理器</span></span><br><span class="line"><span class="keyword">module</span> mips(<span class="keyword">input</span> <span class="keyword">logic</span> clk,reset,</span><br><span class="line">            <span class="keyword">output</span> <span class="keyword">logic</span>[<span class="number">31</span>:<span class="number">0</span>] pc,</span><br><span class="line">            <span class="keyword">input</span> <span class="keyword">logic</span>[<span class="number">31</span>:<span class="number">0</span>] instr,</span><br><span class="line">            <span class="keyword">output</span> <span class="keyword">logic</span> memwrite,</span><br><span class="line">            <span class="keyword">output</span> <span class="keyword">logic</span>[<span class="number">31</span>:<span class="number">0</span>] aluout,writedata,</span><br><span class="line">            <span class="keyword">input</span> <span class="keyword">logic</span>[<span class="number">31</span>:<span class="number">0</span>] readdata);</span><br><span class="line">    <span class="keyword">logic</span>memtoreg,alusrc,regdst,</span><br><span class="line">    regwrite,jump,pcsrc,zero;</span><br><span class="line">    <span class="keyword">logic</span>[<span class="number">2</span>:<span class="number">0</span>] alucontrol;</span><br><span class="line">    </span><br><span class="line">    controller c(instr[<span class="number">31</span>:<span class="number">26</span>],instr[<span class="number">5</span>:<span class="number">0</span>],zero,</span><br><span class="line">                memtoreg,memwrite,pcsrc,</span><br><span class="line">                alusrc,regdst,regwrite,jump,</span><br><span class="line">                 alucontrol);</span><br><span class="line">    datapath dp(clk,reset,memtoreg,pcsrc,</span><br><span class="line">               alusrc,regdst,regwrite,jump,</span><br><span class="line">               alucontrol,</span><br><span class="line">               zero,pc,instr,</span><br><span class="line">                aluout,writedata,readdata);</span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//控制器</span></span><br><span class="line"><span class="keyword">module</span> controller(<span class="keyword">input</span> <span class="keyword">logic</span>[<span class="number">5</span>:<span class="number">0</span>] op,funct,</span><br><span class="line">                  <span class="keyword">input</span> <span class="keyword">logic</span> zero,</span><br><span class="line">                  <span class="keyword">output</span> <span class="keyword">logic</span> memtoreg,memtowrite,</span><br><span class="line">                  <span class="keyword">output</span> <span class="keyword">logic</span> pcsrc,alusrc,</span><br><span class="line">                  <span class="keyword">output</span> <span class="keyword">logic</span> regdst,regwrite,</span><br><span class="line">                  <span class="keyword">output</span> <span class="keyword">logic</span> jump,</span><br><span class="line">                  <span class="keyword">output</span> <span class="keyword">logic</span>[<span class="number">2</span>:<span class="number">0</span>] alucontrol);</span><br><span class="line">    <span class="keyword">logic</span>[<span class="number">1</span>:<span class="number">0</span>] aluop;</span><br><span class="line">    <span class="keyword">logic</span> branch;</span><br><span class="line">    </span><br><span class="line">    maindec md(op, memtoreg,memwrite,brach,</span><br><span class="line">               alusrc,regdst,regwrite,jump,aluop);</span><br><span class="line">    </span><br><span class="line">    aludec ad(funct,aluop,alucontrol);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">assign</span> pcsrc=branch&amp;zero;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//主译码器</span></span><br><span class="line"><span class="keyword">module</span> maindec(<span class="keyword">input</span> <span class="keyword">logic</span>[<span class="number">5</span>:<span class="number">0</span>] op,</span><br><span class="line">               <span class="keyword">output</span> <span class="keyword">logic</span> memtoreg,memwrite,</span><br><span class="line">               <span class="keyword">output</span> <span class="keyword">logic</span> branch,alusrc,</span><br><span class="line">               <span class="keyword">output</span> <span class="keyword">logic</span> regdst,regwrite,</span><br><span class="line">               <span class="keyword">output</span> <span class="keyword">logic</span> jump,</span><br><span class="line">               <span class="keyword">output</span> <span class="keyword">logic</span>[<span class="number">1</span>:<span class="number">0</span>] aluop);</span><br><span class="line">    <span class="keyword">logic</span>[<span class="number">8</span>:<span class="number">0</span>] controls;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">assign</span> &#123;regwrite,regdst,alusrc,branch,memwrite,</span><br><span class="line">            memtoreg,jump,aluop&#125;=controls;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">always_comb</span></span><br><span class="line">        <span class="keyword">case</span>(op)</span><br><span class="line">            <span class="number">6&#x27;b000000</span>:controls&lt;=<span class="number">9&#x27;b110000010</span>;<span class="comment">//RTYPE</span></span><br><span class="line">            <span class="number">6&#x27;b100011</span>:controls&lt;=<span class="number">9&#x27;b101001000</span>;<span class="comment">//LW</span></span><br><span class="line">            <span class="number">6&#x27;b101011</span>:controls&lt;=<span class="number">9&#x27;b001010000</span>;<span class="comment">//SW</span></span><br><span class="line">            <span class="number">6&#x27;b000100</span>:controls&lt;=<span class="number">9&#x27;b000100001</span>;<span class="comment">//BEQ</span></span><br><span class="line">            <span class="number">6&#x27;b001000</span>:controls&lt;=<span class="number">9&#x27;b101000000</span>;<span class="comment">//ADDI</span></span><br><span class="line">            <span class="number">6&#x27;b000010</span>:controls&lt;=<span class="number">9&#x27;b000000100</span>;<span class="comment">//J</span></span><br><span class="line">            <span class="keyword">default</span>:controls&lt;=<span class="number">9&#x27;bxxxxxxxxx</span>;<span class="comment">//illegle op</span></span><br><span class="line">        <span class="keyword">endcase</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line">                </span><br><span class="line"><span class="comment">//ALU译码器</span></span><br><span class="line"><span class="keyword">module</span> aludec(<span class="keyword">input</span> <span class="keyword">logic</span>[<span class="number">5</span>:<span class="number">0</span>] funct,</span><br><span class="line">              <span class="keyword">input</span> <span class="keyword">logic</span>[<span class="number">1</span>:<span class="number">0</span>] aluop,</span><br><span class="line">              <span class="keyword">output</span> <span class="keyword">logic</span>[<span class="number">2</span>:<span class="number">0</span>] alucontrol);</span><br><span class="line">    <span class="keyword">always_comb</span></span><br><span class="line">        <span class="keyword">case</span>(aluop)</span><br><span class="line">            <span class="number">2&#x27;b00</span>:alucontrol &lt;= <span class="number">3&#x27;b010</span>;</span><br><span class="line">            <span class="number">2&#x27;b01</span>:alucontrol &lt;= <span class="number">3&#x27;b110</span>;</span><br><span class="line">            <span class="keyword">default</span>:<span class="keyword">case</span>(funct)</span><br><span class="line">                <span class="number">6&#x27;b100000</span>:alucontrol &lt;= <span class="number">3&#x27;b010</span>;</span><br><span class="line">                <span class="number">6&#x27;b100010</span>:alucontrol &lt;= <span class="number">3&#x27;b110</span>;</span><br><span class="line">                <span class="number">6&#x27;b100100</span>:alucontrol &lt;= <span class="number">3&#x27;b000</span>;</span><br><span class="line">                <span class="number">6&#x27;b100101</span>:alucontrol &lt;= <span class="number">3&#x27;b001</span>;</span><br><span class="line">                <span class="number">6&#x27;b101010</span>:alucontrol &lt;= <span class="number">3&#x27;b111</span>;</span><br><span class="line">                <span class="keyword">default</span>: alucontrol &lt;= <span class="number">3&#x27;bxxx</span>;</span><br><span class="line">                <span class="keyword">endcase</span></span><br><span class="line">            <span class="keyword">endcase</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数据路径</span></span><br><span class="line"><span class="keyword">module</span> datapath(<span class="keyword">input</span> <span class="keyword">logic</span> clk,reset,</span><br><span class="line">                <span class="keyword">input</span> <span class="keyword">logic</span> memtoreg,pcsrc,</span><br><span class="line">                <span class="keyword">input</span> <span class="keyword">logic</span> alusrc,regdst,</span><br><span class="line">                <span class="keyword">input</span> <span class="keyword">logic</span> regwrite,jump,</span><br><span class="line">                <span class="keyword">input</span> <span class="keyword">logic</span> [<span class="number">2</span>:<span class="number">0</span>] alucontrol,</span><br><span class="line">                <span class="keyword">output</span> <span class="keyword">logic</span> zero,</span><br><span class="line">                <span class="keyword">output</span> <span class="keyword">logic</span> [<span class="number">31</span>:<span class="number">0</span>] pc,</span><br><span class="line">                <span class="keyword">input</span> <span class="keyword">logic</span> [<span class="number">31</span>:<span class="number">0</span>] instr,</span><br><span class="line">                <span class="keyword">output</span> <span class="keyword">logic</span> [<span class="number">31</span>:<span class="number">0</span>] aluout,writedata,</span><br><span class="line">                <span class="keyword">input</span> <span class="keyword">logic</span> [<span class="number">31</span>:<span class="number">0</span>] readdata);</span><br><span class="line">    <span class="keyword">logic</span>[<span class="number">4</span>:<span class="number">0</span>] writereg;</span><br><span class="line">    <span class="keyword">logic</span>[<span class="number">31</span>:<span class="number">0</span>] pcnext,pcnextbr,pcplus4,pcbranch;</span><br><span class="line">    <span class="keyword">logic</span>[<span class="number">31</span>:<span class="number">0</span>] signimm,signimmsh;</span><br><span class="line">    <span class="keyword">logic</span>[<span class="number">31</span>:<span class="number">0</span>] srca,srcb;</span><br><span class="line">    <span class="keyword">logic</span>[<span class="number">31</span>:<span class="number">0</span>] result;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//next PC logic</span></span><br><span class="line">    flopr <span class="variable">#(32) pcreg(cllk,reset,pcnext,pc)</span>;</span><br><span class="line">    adderpcaddl(pc,<span class="number">32&#x27;b100</span>,pcplus4);</span><br><span class="line">    s12immsh(signimm,signimmsh);</span><br><span class="line">    adderpcadd2(pcplus4,pcbranch,pcsrc,pcnextbr);</span><br><span class="line">    mux2<span class="variable">#(32)pcbrmux(pcplus4,pcbranch,pcsrc,pcnextbr)</span>;</span><br><span class="line">    mux2<span class="variable">#(32)</span>pcmux(pcnextbr,pcplus4[<span class="number">31</span>:<span class="number">28</span>],</span><br><span class="line">                      instr[<span class="number">25</span>:<span class="number">0</span>],<span class="number">2&#x27;b001</span>,jump,pcnext);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//register file logic</span></span><br><span class="line">    regfilerf(clk,regwrite,instr[<span class="number">25</span>:<span class="number">21</span>],instr[<span class="number">20</span>:<span class="number">16</span>],</span><br><span class="line">                   writereg,result,srca,writedata);</span><br><span class="line">    mux2<span class="variable">#(5)</span>wrmux(instr[<span class="number">20</span>:<span class="number">16</span>],instr[<span class="number">15</span>:<span class="number">11</span>],</span><br><span class="line">                      regdst,writereg);</span><br><span class="line">    mux2<span class="variable">#(32)resmux(aluout,readdata,memtoreg,result)</span>;</span><br><span class="line">    signextse(instr[<span class="number">15</span>:<span class="number">0</span>],signimm);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//ALU logic</span></span><br><span class="line">    mux2<span class="variable">#(32)srcbmux(wirtedata,signimm,alusrc,srcb)</span>;</span><br><span class="line">    alualu(srca,srcb,alucontrol,aluout,zero);</span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//寄存器文件</span></span><br><span class="line"><span class="keyword">module</span> regfile(<span class="keyword">input</span> <span class="keyword">logic</span>clk,</span><br><span class="line">               <span class="keyword">input</span> <span class="keyword">logic</span>we3,</span><br><span class="line">               <span class="keyword">input</span> <span class="keyword">logic</span>[<span class="number">4</span>:<span class="number">0</span>] ra1,ra2,wa3,</span><br><span class="line">               <span class="keyword">input</span> <span class="keyword">logic</span>[<span class="number">31</span>:<span class="number">0</span>] wd3,</span><br><span class="line">               <span class="keyword">output</span> <span class="keyword">logic</span>[<span class="number">31</span>:<span class="number">0</span>] rd1,rd2);</span><br><span class="line">    <span class="keyword">logic</span>[<span class="number">31</span>:<span class="number">0</span>]rf[<span class="number">31</span>:<span class="number">0</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//three ported register file</span></span><br><span class="line">    <span class="comment">//read two ports combinationally</span></span><br><span class="line">    <span class="comment">//write third port combiantionally</span></span><br><span class="line">    <span class="comment">//register 0 hardwired to 0</span></span><br><span class="line">    <span class="comment">//note: for piedlined processer, write third port</span></span><br><span class="line">    <span class="comment">//on falling edge of clk</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">always_ff</span>@(<span class="keyword">posedge</span> clk)</span><br><span class="line">        <span class="keyword">if</span>(we3) rf[wa3]&lt;=wd3;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">assign</span> rd1=(ra1 !=<span class="number">0</span>)?rf[ra1]:<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">assign</span> rd2=(ra2 !=<span class="number">0</span>)?rf[ra2]:<span class="number">0</span>;</span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//加法器</span></span><br><span class="line"><span class="keyword">module</span> adder(<span class="keyword">input</span> <span class="keyword">logic</span>[<span class="number">31</span>:<span class="number">0</span>]a,b,</span><br><span class="line">             <span class="keyword">output</span> <span class="keyword">logic</span>[<span class="number">31</span>:<span class="number">0</span>]y);</span><br><span class="line">    <span class="keyword">assign</span> y=a+b;</span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//左移二位（乘以4）</span></span><br><span class="line"><span class="keyword">module</span> s12(<span class="keyword">input</span> <span class="keyword">logic</span>[<span class="number">31</span>:<span class="number">0</span>] a,</span><br><span class="line">           <span class="keyword">output</span> <span class="keyword">logic</span>[<span class="number">31</span>:<span class="number">0</span>] y);</span><br><span class="line">    <span class="comment">//shift left by 2</span></span><br><span class="line">    <span class="keyword">assign</span> y=&#123;a[<span class="number">29</span>:<span class="number">0</span>],<span class="number">2&#x27;b00</span>&#125;;</span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//符号扩展</span></span><br><span class="line"><span class="keyword">module</span> signext(<span class="keyword">input</span> <span class="keyword">logic</span>[<span class="number">15</span>:<span class="number">0</span>] a,</span><br><span class="line">               <span class="keyword">output</span> <span class="keyword">logic</span>[<span class="number">31</span>:<span class="number">0</span>] y);</span><br><span class="line">    <span class="keyword">assign</span> y=&#123;&#123;<span class="number">16</span>&#123;a[<span class="number">15</span>]&#125;&#125;,a&#125;;</span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//可复位触发器</span></span><br><span class="line"><span class="keyword">module</span> flopr #(<span class="keyword">parameter</span> WIDTH=<span class="number">8</span>)</span><br><span class="line">        (<span class="keyword">input</span> <span class="keyword">logic</span> clk,reset,</span><br><span class="line">         <span class="keyword">input</span> <span class="keyword">logic</span>[WIDTH-<span class="number">1</span>:<span class="number">0</span>]d,</span><br><span class="line">         <span class="keyword">output</span> <span class="keyword">logic</span>[WIDTH-<span class="number">1</span>:<span class="number">0</span>]q);</span><br><span class="line">    <span class="keyword">always_ff</span>!(<span class="keyword">posedge</span> clk, <span class="keyword">posedge</span> reset)</span><br><span class="line">        <span class="keyword">if</span>(reset) q&lt;=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span>q&lt;=d;</span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//复用器</span></span><br><span class="line"><span class="keyword">module</span> mux2 #(<span class="keyword">parameter</span> WIDTH=<span class="number">8</span>)</span><br><span class="line">            (<span class="keyword">input</span> <span class="keyword">logic</span>[WIDTH-<span class="number">1</span>:<span class="number">0</span>]d0,d1,</span><br><span class="line">             <span class="keyword">input</span> <span class="keyword">logic</span> s,</span><br><span class="line">             <span class="keyword">output</span> <span class="keyword">logic</span>[WIDTH-<span class="number">1</span>:<span class="number">0</span>]Y);</span><br><span class="line">    <span class="keyword">assign</span> y=s?d1:d0;</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h2 id="测试程序"><a href="#测试程序" class="headerlink" title="测试程序"></a>测试程序</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MIPS基准测试程序</span></span><br><span class="line"><span class="keyword">module</span> testbench();</span><br><span class="line">    <span class="keyword">logic</span> clk;</span><br><span class="line">    <span class="keyword">logic</span> reset;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">logic</span>[<span class="number">31</span>:<span class="number">0</span>] writedata,datadr;</span><br><span class="line">    <span class="keyword">logic</span>memewrite;</span><br><span class="line">    </span><br><span class="line">    top dut(clk,reset,writedata,datadr,memwrite);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">initial</span></span><br><span class="line">        <span class="keyword">begin</span></span><br><span class="line">            reset &lt;= <span class="number">1</span>; #<span class="number">22</span>; reset &lt;= <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">always</span></span><br><span class="line">        <span class="keyword">begin</span></span><br><span class="line">            clk &lt;= <span class="number">1</span>; #<span class="number">5</span>; clk &lt;= <span class="number">0</span>; #<span class="number">5</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">always</span>@(<span class="keyword">negedge</span> clk)</span><br><span class="line">        <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span>(memwrite) <span class="keyword">begin</span></span><br><span class="line">                <span class="keyword">if</span>(datadr===<span class="number">84</span> &amp; writedata===<span class="number">7</span>) <span class="keyword">begin</span></span><br><span class="line">                    <span class="built_in">$display</span>(<span class="string">&quot;Simulation succeeded&quot;</span>);</span><br><span class="line">                    <span class="built_in">$stop</span>;</span><br><span class="line">                <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span>(datadr !== <span class="number">80</span>) <span class="keyword">begin</span></span><br><span class="line">                    <span class="built_in">$display</span>(<span class="string">&quot;Simulation failed&quot;</span>);</span><br><span class="line">                    <span class="built_in">$stop</span>;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//MIPS顶层模块</span></span><br><span class="line"><span class="keyword">module</span> top(<span class="keyword">input</span> <span class="keyword">logic</span> clk,reset,</span><br><span class="line">           <span class="keyword">output</span> <span class="keyword">logic</span>[<span class="number">31</span>:<span class="number">0</span>] writedata,datadr,</span><br><span class="line">           <span class="keyword">output</span> <span class="keyword">logic</span> memwrite);</span><br><span class="line">    <span class="keyword">logic</span>[<span class="number">31</span>:<span class="number">0</span>] pc,instr,readdata;</span><br><span class="line">    </span><br><span class="line">    mips mips(clk,reset,pc,instr,memwrite,dataadr,</span><br><span class="line">              writedata,readdata);</span><br><span class="line">    imem imem(pc[<span class="number">7</span>:<span class="number">2</span>], instr);</span><br><span class="line">    dmem dmem(clk,memwrite,dataadr,writedata,readdata);</span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//MIPS数据存储器</span></span><br><span class="line"><span class="keyword">module</span> dmem(<span class="keyword">input</span> <span class="keyword">logic</span> clk,we,</span><br><span class="line">            <span class="keyword">input</span> <span class="keyword">logic</span>[<span class="number">31</span>:<span class="number">0</span>] a,wd,</span><br><span class="line">            <span class="keyword">output</span> <span class="keyword">logic</span>[<span class="number">31</span>:<span class="number">0</span>] rd);</span><br><span class="line">    <span class="keyword">logic</span>[<span class="number">31</span>:<span class="number">0</span>] RAM[<span class="number">63</span>:<span class="number">0</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">assign</span> rd=RAM[a[<span class="number">31</span>:<span class="number">2</span>]];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">always_ff</span>@(<span class="keyword">posedge</span> clk)</span><br><span class="line">        <span class="keyword">if</span>(we) RAM[a[<span class="number">31</span>:<span class="number">2</span>]] &lt;= wd;</span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//MIPS指令存储器</span></span><br><span class="line"><span class="keyword">module</span> imem(<span class="keyword">input</span> <span class="keyword">logic</span>[<span class="number">5</span>:<span class="number">0</span>] a,</span><br><span class="line">            <span class="keyword">output</span> <span class="keyword">logic</span>[<span class="number">31</span>:<span class="number">0</span>] rd);</span><br><span class="line">    <span class="keyword">logic</span>[<span class="number">31</span>:<span class="number">0</span>] RAM[<span class="number">63</span>:<span class="number">0</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">initial</span></span><br><span class="line">        <span class="built_in">$readmemh</span>(<span class="string">&quot;memfile,dat&quot;</span>,RAM);</span><br><span class="line">    <span class="keyword">assign</span> rd=RAM[a];</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><p><em>测试数据(memfile.dat)</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">20020005</span><br><span class="line">2003000c</span><br><span class="line">2067fff7</span><br><span class="line">00e22025</span><br><span class="line">00642824</span><br><span class="line">00a42820</span><br><span class="line">10a7000a</span><br><span class="line">0064202a</span><br><span class="line">10800001</span><br><span class="line">20050000</span><br><span class="line">00e2202a</span><br><span class="line">00853820</span><br><span class="line">00e23822</span><br><span class="line">ac670044</span><br><span class="line">8c020050</span><br><span class="line">08000011</span><br><span class="line">20020001</span><br><span class="line">ac020054</span><br></pre></td></tr></table></figure><h2 id="IO接口的设计"><a href="#IO接口的设计" class="headerlink" title="IO接口的设计"></a>IO接口的设计</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> IO(<span class="keyword">input</span> <span class="keyword">logic</span>clk,</span><br><span class="line">  <span class="keyword">input</span> <span class="keyword">logic</span>reset,</span><br><span class="line">  <span class="keyword">input</span> <span class="keyword">logic</span>pRead,</span><br><span class="line">  <span class="keyword">input</span> <span class="keyword">logic</span>pWrite,</span><br><span class="line">  <span class="keyword">input</span> <span class="keyword">logic</span>[<span class="number">1</span>:<span class="number">0</span>]adder,</span><br><span class="line">  <span class="keyword">input</span> <span class="keyword">logic</span>[<span class="number">31</span>:<span class="number">0</span>] pWriteData,</span><br><span class="line">  <span class="keyword">input</span> <span class="keyword">logic</span>[<span class="number">31</span>:<span class="number">0</span>] pReadData,</span><br><span class="line">  <span class="keyword">input</span> <span class="keyword">logic</span>buttenL,</span><br><span class="line">  <span class="keyword">input</span> <span class="keyword">logic</span>buttenR,</span><br><span class="line">  <span class="keyword">input</span> <span class="keyword">logic</span>[<span class="number">15</span>:<span class="number">0</span>] switch,</span><br><span class="line">  <span class="keyword">output</span> <span class="keyword">logic</span>[<span class="number">11</span>:<span class="number">0</span>] led);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">logic</span> [<span class="number">1</span>:<span class="number">0</span>] status;</span><br><span class="line">    <span class="keyword">logic</span> [<span class="number">15</span>:<span class="number">0</span>] switch1;</span><br><span class="line">    <span class="keyword">logic</span> [<span class="number">11</span>:<span class="number">0</span>] led1;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">always_ff</span> @(<span class="keyword">posedge</span> clk) <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span> (reset) <span class="keyword">begin</span></span><br><span class="line">            status&lt;=<span class="number">2&#x27;b00</span>;</span><br><span class="line">            led1&lt;=<span class="number">12&#x27;h00</span>;</span><br><span class="line">            switch1&lt;=<span class="number">16&#x27;h00</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">            <span class="comment">// 开关位置已经换好，可以输入新数据</span></span><br><span class="line">            <span class="keyword">if</span> (buttonR) <span class="keyword">begin</span></span><br><span class="line">                status[<span class="number">1</span>] &lt;= <span class="number">1</span>;</span><br><span class="line">                switch1&lt;= switch;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// LEDs已经准备好，可以输出新数据</span></span><br><span class="line">            <span class="keyword">if</span> (buttonL) <span class="keyword">begin</span></span><br><span class="line">                status[<span class="number">0</span>] &lt;= <span class="number">1</span>;</span><br><span class="line">                led&lt;= led1;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 向数据输入端口输出(LED)</span></span><br><span class="line">            <span class="keyword">if</span> (pWrite &amp; (addr == <span class="number">2&#x27;b01</span>)) <span class="keyword">begin</span></span><br><span class="line">                led1&lt;= pWriteData[<span class="number">11</span>:<span class="number">0</span>];</span><br><span class="line">                status[<span class="number">0</span>]&lt;= <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 读数据</span></span><br><span class="line">            <span class="keyword">if</span> (pRead) <span class="keyword">begin</span></span><br><span class="line">                <span class="keyword">case</span>(addr)</span><br><span class="line">                    <span class="number">2&#x27;b11</span>:pReadData &lt;= &#123;<span class="number">24&#x27;b0</span>, switch1[<span class="number">15</span>:<span class="number">8</span>]&#125;;</span><br><span class="line">                    <span class="number">2&#x27;b10</span>:pReadData &lt;= &#123;<span class="number">24&#x27;b0</span>, swtich1[<span class="number">7</span>:<span class="number">0</span>]&#125;;</span><br><span class="line">                    <span class="number">2&#x27;b00</span>:pReadData &lt;= &#123;<span class="number">24&#x27;b0</span>, <span class="number">6&#x27;b000000</span>, status&#125;;</span><br><span class="line">                    <span class="keyword">default</span>: pReadData &lt;= <span class="number">32&#x27;b0</span>;</span><br><span class="line">                <span class="keyword">endcase</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line">                </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 体系结构实验 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第3章 流水线</title>
      <link href="2021/03/17/%E7%AC%AC3%E7%AB%A0%20%E6%B5%81%E6%B0%B4%E7%BA%BF/"/>
      <url>2021/03/17/%E7%AC%AC3%E7%AB%A0%20%E6%B5%81%E6%B0%B4%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="流水线基础知识"><a href="#流水线基础知识" class="headerlink" title="流水线基础知识"></a>流水线基础知识</h2><ul><li>把一个重复的过程分解为若干个子过程， 每个子过程由专门的功能部件来实现。（并行进行）</li><li>每个子过程及其功能部件：流水级/段；段数：流水线的深度</li></ul><p>例：</p><p>指令流水线</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210326083341.png" alt="image-20210326083341631"></p><p>浮点加法流水线</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210326083424.png" alt="image-20210326083424707"></p><p><strong>时空图</strong></p><p>横轴时间、纵轴各个段</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210326083526.png" alt="image-20210326083525954"></p><p><strong>特点</strong></p><ul><li>各段时间应该尽量相等，时间长的段将成为流水线的瓶颈</li><li>每个功能部件后面要有一个缓冲寄存器（流水寄存器），用于在相邻两段之间传送数据</li><li>通过时间和排空时间</li></ul><h3 id="流水线的分类"><a href="#流水线的分类" class="headerlink" title="流水线的分类"></a>流水线的分类</h3><ol><li>单功能与多功能流水线</li><li>静态与动态流水线：按同一时间能否执行多种功能对多功能流水线的分类</li><li>线性与非线性流水线：前者没有反馈回路、穿行连接，后者有反馈回路</li><li>顺序流水线和乱序流水线：前者流入流出顺序相同，后者可以后进的先完成</li></ol><h3 id="流水线的性能指标"><a href="#流水线的性能指标" class="headerlink" title="流水线的性能指标"></a>流水线的性能指标</h3><p>k段流水线，n个任务、$\Delta{t}$表示执行时间</p><p><strong>吞吐率</strong></p><p>单位时间内流水线所完成的任务/输出结果数量</p><p>$TP=\frac{n}{T_k}$</p><p>各段时间相等：</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210326090245.png" alt="image-20210326090245212"></p><script type="math/tex; mode=display">TP=\frac{n}{(k+n-1)\Delta{t}}</script><p>最大吞吐率</p><script type="math/tex; mode=display">TP_{max}=\lim_{n\rightarrow+\infty}\frac{n}{(k+n-1)\Delta{t}}=\frac{1}{\Delta{t}}</script><p>各段时间不完全相等：</p><p>最长的叫瓶颈段</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210326091005.png" alt="image-20210326091005492"></p><script type="math/tex; mode=display">TP=\frac{n}{\sum_{i=1}^{k}\Delta{t_i}+(n-1)max(\Delta{t_1},\Delta{t_2},\cdots,\Delta{t_k})}</script><p>最大吞吐率</p><script type="math/tex; mode=display">TP_{max}=\frac{1}{max(\Delta{t_1},\Delta{t_2},\cdots,\Delta{t_k})}</script><p>解决瓶颈问题：细分瓶颈段、重新设置瓶颈段</p><p><strong>加速比</strong></p><p>同一批任务，使用和不使用流水线时间比</p><script type="math/tex; mode=display">S=\frac{T_s}{T_k}</script><p>各段时间相等：</p><script type="math/tex; mode=display">S=\frac{nk}{k+n-1}</script><p>不完全相等：</p><script type="math/tex; mode=display">S=\frac{n\sum_{i=1}^{k}\Delta{t_i}}{\sum_{i=1}^{k}\Delta{t_i}+(n-1)max(\Delta{t_1},\Delta{t_2},\cdots,\Delta{t_k})}</script><p><strong>效率</strong></p><p>设备利用率</p><p>各段时间相等</p><script type="math/tex; mode=display">E=\frac{n}{k+n-1}</script><script type="math/tex; mode=display">E_{max}=1</script><p>各段不相等</p><script type="math/tex; mode=display">E=\frac{n\sum_{i=1}^{k}\Delta{t_i}}{k[\sum_{i=1}^{k}\Delta{t_i}+(n-1)max(\Delta{t_1},\Delta{t_2},\cdots,\Delta{t_k})]}</script><h3 id="一个经典的5段流水线"><a href="#一个经典的5段流水线" class="headerlink" title="一个经典的5段流水线"></a>一个经典的5段流水线</h3><p>非流水情况下，一条指令的执行过程分为以下5个周期</p><ol><li>取指令周期（IF）</li><li>指令译码/读寄存器周期（ID）</li><li>执行/有效地址计算周期（EX）</li><li>存储器访问/分支完成周期（MEM）</li><li>写回周期（WB）</li></ol><p>改为流水线实现：</p><ul><li>每个周期作为一个流水段</li><li>各段之间加上锁存器</li></ul><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210326102646.png" alt="image-20210326102646310"></p><h2 id="流水线冒险"><a href="#流水线冒险" class="headerlink" title="流水线冒险"></a>流水线冒险</h2><p>流水线冒险会阻止指令流中下一条指令不能在指定的时钟周期执行</p><ul><li>结构冒险：因硬件资源满足不了指令重叠执行的要求而出现资源冲突，导致结构冒险</li><li>数据冒险：当指令在流水线中重叠执行时，因需要用到前面指令的执行结果，导致数据冒险</li><li>控制冒险：流水线遇到分支指令和其他会改变PC值的指令，导致控制冒险</li></ul><h3 id="带有停顿的流水线性能"><a href="#带有停顿的流水线性能" class="headerlink" title="带有停顿的流水线性能"></a>带有停顿的流水线性能</h3><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210402083346.png" alt="image-20210402083338983"></p><h3 id="结构冒险"><a href="#结构冒险" class="headerlink" title="结构冒险"></a>结构冒险</h3><p>常见原因：功能部件不是完全流水、资源份数不够</p><p>解决办法：插入暂停周期（“气泡”）、设置相互独立的指令存储器和数据存储器或设置相互独立的指令Cache和数据Cache</p><h3 id="数据冒险"><a href="#数据冒险" class="headerlink" title="数据冒险"></a>数据冒险</h3><p>当相关的指令靠得足够近时，它们在流水线中的重叠执行或者重新排序会改变指令读写操作数的顺序，使之不同于它们非流水实现时的顺序，则发生了数据冒险。</p><ul><li><p>通过转发技术（旁路/短路）减少数据冒险引起的停顿</p></li><li><p>增加流水线互锁硬件、插入“停顿”（或气泡）</p></li></ul><h3 id="分支冒险"><a href="#分支冒险" class="headerlink" title="分支冒险"></a>分支冒险</h3><ul><li><em>降低流水线分支代价</em></li></ul><p>处理分支指令最简单的方法：“冻结”流水线，保留或删除分支之后的所有指令，直到直到分支目标地址。</p><ul><li><p><em>预测未选中（预测分支失败）</em></p></li><li><p><em>预测选中（预测分支成功）</em></p></li></ul><p><em>分支延迟指令的调度</em></p><p>在延迟槽中放入有用的指令，由编译器完成，能否带来好处取决于编译器能否把有用的指令调度到延迟槽中。</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210402102005.png" alt="image-20210402102005229"></p><h3 id="分支预测"><a href="#分支预测" class="headerlink" title="分支预测"></a>分支预测</h3><p>通过预测降低分支成本</p><ul><li>静态分支预测：利用编译时可用信息的低成本静态机制</li><li>动态分支预测：根据程序特性对分支进行动态预测的策略</li></ul><h2 id="实现流水化"><a href="#实现流水化" class="headerlink" title="实现流水化"></a>实现流水化</h2><h3 id="MIPS的简单实现"><a href="#MIPS的简单实现" class="headerlink" title="MIPS的简单实现"></a>MIPS的简单实现</h3><p>一条MIPS指令最多需要以下5个时钟周期</p><p><em>取指令周期（IF）</em></p><p><em>指令译码/读寄存器周期（ID）</em></p><p><em>执行/有效地址计算周期（EX）</em></p><p><em>存储器访问/分支完成周期（MEM）</em></p><p><em>写回周期（WB）</em></p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210402102601.png" alt="image-20210402102601455"></p><h3 id="MIPS基本流水线"><a href="#MIPS基本流水线" class="headerlink" title="MIPS基本流水线"></a>MIPS基本流水线</h3><p>每一个时钟周期完成的工作看作是流水线的一段，每个时钟周期启动一条新的指令。</p><p>段和段之间设置流水寄存器，命名：用其相邻的两个段的名称拼合而成</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210402103054.png" alt="image-20210402103053923"></p><h3 id="MIPS流水线的控制"><a href="#MIPS流水线的控制" class="headerlink" title="MIPS流水线的控制"></a>MIPS流水线的控制</h3><p><em>控制四个多路选择器</em></p><p><em>解决数据冒险的问题</em></p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210402103316.png" alt="image-20210402103316278"></p><h3 id="处理流水线中的分支"><a href="#处理流水线中的分支" class="headerlink" title="处理流水线中的分支"></a>处理流水线中的分支</h3><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210402103408.png" alt="image-20210402103408763"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机体系结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第五章 概率分析和随机算法</title>
      <link href="2021/03/17/%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E6%A6%82%E7%8E%87%E5%88%86%E6%9E%90%E5%92%8C%E9%9A%8F%E6%9C%BA%E7%AE%97%E6%B3%95/"/>
      <url>2021/03/17/%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E6%A6%82%E7%8E%87%E5%88%86%E6%9E%90%E5%92%8C%E9%9A%8F%E6%9C%BA%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="5-1-雇佣问题"><a href="#5-1-雇佣问题" class="headerlink" title="5.1 雇佣问题"></a>5.1 雇佣问题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HIRE-ASSISTANT(n)</span><br><span class="line">best &#x3D; 0</span><br><span class="line">for i &#x3D; 0 to n</span><br><span class="line">interview candidate i</span><br><span class="line">if candidate is better than candidate best</span><br><span class="line">best &#x3D; i</span><br><span class="line">hire candidate i</span><br></pre></td></tr></table></figure><p><strong>最坏情形分析</strong></p><p>应聘者质量按出现的次序严格递增</p><p>如何求平均情况？</p><p><strong>随机算法</strong></p><h2 id="5-2-指示器随机变量"><a href="#5-2-指示器随机变量" class="headerlink" title="5.2 指示器随机变量"></a>5.2 指示器随机变量</h2><p>定义：</p><script type="math/tex; mode=display">I\lbrace A\rbrace=\begin{cases} 1\quad如果A发生\\0\quad如果A不发生\end{cases}</script><p>A发生的概率$Pr\lbrace A\rbrace$，期望 $E[X_A]$</p><p>引理：给定一个样本空间S和S中的一个事件A，设$X_A=I\lbrace A\rbrace$，那么$E[X_A]=Pr\lbrace A\rbrace$</p><p><strong>用指示器随机变量分析雇佣问题</strong></p><script type="math/tex; mode=display">X_i=I\lbrace 应聘者i被雇佣\rbrace = \begin{cases} 1\quad如果应聘者i被雇佣 \\ 0\quad如果应聘者i不被雇佣  \end{cases}</script><p>以及</p><script type="math/tex; mode=display">X=X_1+X_2+\cdots+X_n</script><p>根据引理</p><script type="math/tex; mode=display">E[X_i]=Pr\lbrace 应聘者i被雇佣\rbrace</script><p>应聘者比应聘者1到i-1更有资格的概率是1/i，因此</p><script type="math/tex; mode=display">E[X_i]=1/i</script><p>计算得</p><script type="math/tex; mode=display">E[X]=\ln n+O(1)</script><p>因此尽管面试了n个人，实际上大约只雇佣他们之中的$\ln n$个人</p><h2 id="5-3-随机算法"><a href="#5-3-随机算法" class="headerlink" title="5.3 随机算法"></a>5.3 随机算法</h2><p>先对应聘者进行排列，然后确定最佳应聘者的随机算法。此时建立的算法的性能和假设应聘者以随即次序出现所得的结果是匹配的。</p><p><strong>随机排列数组</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PERMUTE-BY-SORTING(A)</span><br><span class="line">n&#x3D;A.length</span><br><span class="line">let P[1...n] be a new array</span><br><span class="line">for i &#x3D; 1 to n</span><br><span class="line">P[i] &#x3D; RANDOM(1, n^3)</span><br><span class="line">sort A, using P as sort keys</span><br></pre></td></tr></table></figure><p>引理：假设所有优先级都不同，则过程PERMUTE-BY-SORTING产生输入的均匀随机排列</p><p>另一个方法：原址排列给定数组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RANDOMIZE-IN-PLACE(A)</span><br><span class="line">n &#x3D; A.length</span><br><span class="line">for i &#x3D; 1 to n</span><br><span class="line">swap A[i] with A[RANDOM(i, n)]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法导论 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>概论</title>
      <link href="2021/03/17/%E6%A6%82%E8%AE%BA/"/>
      <url>2021/03/17/%E6%A6%82%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="1-1-计算机软件"><a href="#1-1-计算机软件" class="headerlink" title="1.1 计算机软件"></a>1.1 计算机软件</h2><ol><li>软件的发展</li></ol><ul><li><p>1946~1956 第一个程序的出现到高级语言出现</p></li><li><p>1956~1986 高级语言出现到软件工程出现</p></li><li><p>1968至今</p></li></ul><ol><li>软件的特点</li></ol><p>一种逻辑实体、被开发或设计、不会老化，但需要修复。</p><ol><li>软件的分类</li></ol><ul><li><p>系统软件：编译程序、操作系统等</p></li><li><p>支撑软件：数据库管理系统等</p></li><li><p>应用软件：Web应用软件等</p></li></ul><ol><li>软件语言</li></ol><ul><li><p>需求定义语言：PSL/PSA</p></li><li><p>功能性语言：Z语言</p></li><li><p>设计性语言：PDL</p></li><li><p>实现性语言：</p><ul><li><p>低级语言和高级语言</p></li><li><p>过程语言和非过程语言</p></li><li><p>…</p></li></ul></li><li><p>文档语言</p></li></ul><h2 id="1-2-软件工程"><a href="#1-2-软件工程" class="headerlink" title="1.2 软件工程"></a>1.2 软件工程</h2><ul><li>定义：软件工程是应用计算机科学、数学及管理科学等原理，开发软件的工程。</li><li>软件工程框架：目标、过程和原则。</li><li>软件的生存周期：计算机系统工程-&gt;需求分析-&gt;设计-&gt;编码-&gt;测试-&gt;运行和维护</li></ul><h2 id="1-3-软件过程"><a href="#1-3-软件过程" class="headerlink" title="1.3 软件过程"></a>1.3 软件过程</h2><p>能力成熟度模型CMM和能力成熟度模型集成CMMI</p><h2 id="1-4-软件过程模型"><a href="#1-4-软件过程模型" class="headerlink" title="1.4 软件过程模型"></a>1.4 软件过程模型</h2><ul><li>瀑布模型</li><li>演化模型</li><li>增量模型</li><li>原型模型螺旋模型</li><li>喷泉模型</li><li>基于构件的开发模型</li><li>形式化方法模型</li></ul><h2 id="1-5-敏捷软件开发"><a href="#1-5-敏捷软件开发" class="headerlink" title="1.5 敏捷软件开发"></a>1.5 敏捷软件开发</h2><ol><li>敏捷软件开发的价值观及开发原则<ul><li>个人和交互高于过程和工具</li><li>可运行软件高于详尽的文档</li><li>与客户协作高于合同谈判</li><li>对变更及时作出反应高于遵循计划</li></ul></li><li>XP方法</li><li>Agile和CMM</li></ol><h2 id="1-6-CASE工具和环境"><a href="#1-6-CASE工具和环境" class="headerlink" title="1.6 CASE工具和环境"></a>1.6 CASE工具和环境</h2>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo报错</title>
      <link href="2021/03/17/Hexo%E6%8A%A5%E9%94%99/"/>
      <url>2021/03/17/Hexo%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<p>今天在使用hexo博客运行 hexo d 出现报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OpenSSL SSL_connect: Connection was reset in connection to github.com:443</span><br></pre></td></tr></table></figure><p> 查询了很多方案后，发现是代理的问题，如果你使用了VPN，需要设置一下http.proxy，先查看端口号</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210317125202.png" alt="image-20210317125154852"></p><p>我的端口号是2802，设置http.proxy</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy 127.0.0.1:2802</span><br><span class="line">git config --global https.proxy 127.0.0.1:2802</span><br></pre></td></tr></table></figure><p>如果之前已经有过设置，先取消</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure><p>设置好之后再hexo d，部署成功</p><p>附上我的报错和解决截图</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210317125426.png" alt="image-20210317125426084"></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第四章 分治策略</title>
      <link href="2021/03/17/%E7%AC%AC%E5%9B%9B%E7%AB%A0%20%E5%88%86%E6%B2%BB%E7%AD%96%E7%95%A5/"/>
      <url>2021/03/17/%E7%AC%AC%E5%9B%9B%E7%AB%A0%20%E5%88%86%E6%B2%BB%E7%AD%96%E7%95%A5/</url>
      
        <content type="html"><![CDATA[<p>Divide-Conquer-Combine</p><h2 id="4-1-最大子数组问题"><a href="#4-1-最大子数组问题" class="headerlink" title="4.1 最大子数组问题"></a>4.1 最大子数组问题</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">FIND-MAX-CROSSING-SUBARRAY(A,low,mid,high) </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    接受数组A和下表low,mid,high为输入，</span></span><br><span class="line"><span class="comment">    返回一个下标元组划定跨越种点的最大子数组的边界，并返回最大子数组中值的和</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">left-sum = -∞</span><br><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i = mid downto low</span><br><span class="line">    sum = sum + A[i]</span><br><span class="line">    <span class="keyword">if</span> sum &gt; left - sum</span><br><span class="line">        left-sum = sum</span><br><span class="line">        max-left = i</span><br><span class="line">right-sum = -∞</span><br><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> j = mid + <span class="number">1</span> to high</span><br><span class="line">    sum = sum + A[j]</span><br><span class="line">    <span class="keyword">if</span> sum &gt; right-sum</span><br><span class="line">        right-sum = sum</span><br><span class="line">        max-right = j</span><br><span class="line"><span class="keyword">return</span>(max-left, max-right, left-sum + right-sum)</span><br><span class="line"></span><br><span class="line">FIND-MAXIMUM-SUBARRAY(A,low,high) <span class="comment">//求出A[1...n]的最大子数组</span></span><br><span class="line"><span class="keyword">if</span> high == low</span><br><span class="line">    <span class="keyword">return</span> (low,high,A[low])</span><br><span class="line"><span class="keyword">else</span> mid = (low + high)/<span class="number">2</span></span><br><span class="line">    (left-low, left-high, left-sum) = </span><br><span class="line">    FIND-MAXIMUM-SUBARRAY(A,low,mid)</span><br><span class="line">    (right-low, right-high, right-sum) = </span><br><span class="line">    FIND-MAXIMUM-SUBARRAY(A,mid+<span class="number">1</span>,high)</span><br><span class="line">    (cross-low, cross-high, cross-sum) = </span><br><span class="line">    FIND-MAX-CROSSING-SUBARRAY(A,low,mid,high)</span><br><span class="line">    <span class="keyword">if</span> left-sum &gt;= cross-sum and right-sum &gt;= cross-sum</span><br><span class="line">        <span class="keyword">return</span>(left-low, left-high, left-sum)</span><br><span class="line">    <span class="keyword">else</span> right-sum &gt;= cross-sum and right-sum &gt;= cross-sum</span><br><span class="line">        <span class="keyword">return</span>(right-low, right-high, right-sum)</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span>(cross-low, cross-high, cross-sum)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-2-矩阵乘法的Strassen算法"><a href="#4-2-矩阵乘法的Strassen算法" class="headerlink" title="4.2 矩阵乘法的Strassen算法"></a>4.2 矩阵乘法的Strassen算法</h2><p>常规算法花费Θ(n^3)，Strassen算法花费Θ(n^lg7)≈Θ(n^2.81)</p><p>基本思想：减少多余的乘法，把乘法变成乘法+加法</p><h2 id="4-3-代入法求解递归式"><a href="#4-3-代入法求解递归式" class="headerlink" title="4.3 代入法求解递归式"></a>4.3 代入法求解递归式</h2><p><strong>步骤</strong></p><ol><li>猜测解的形式</li><li>用数学归纳法求出解种的常数，并证明解是正确的</li></ol><h2 id="4-4-递归树方法求解递归式"><a href="#4-4-递归树方法求解递归式" class="headerlink" title="4.4 递归树方法求解递归式"></a>4.4 递归树方法求解递归式</h2><p>将递归式转换成一棵树，其节点表示不同层次的递归调用产生的代价。然后采用边界和技巧来求解递归式。</p><h2 id="4-5-主方法求解递归式"><a href="#4-5-主方法求解递归式" class="headerlink" title="4.5 主方法求解递归式"></a>4.5 主方法求解递归式</h2><p>求解形式如 $T(n)=aT(n/b)+f(n)$递归式的界</p>]]></content>
      
      
      <categories>
          
          <category> 算法导论 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库引论 第三章 关系数据库语言-SQL</title>
      <link href="2021/03/16/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%95%E8%AE%BA%20%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%AD%E8%A8%80-SQL/"/>
      <url>2021/03/16/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%95%E8%AE%BA%20%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%AD%E8%A8%80-SQL/</url>
      
        <content type="html"><![CDATA[<h2 id="SQL体系结构："><a href="#SQL体系结构：" class="headerlink" title="SQL体系结构："></a>SQL体系结构：</h2><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210309194458.png" alt=""></p><h2 id="SQL的数据定义"><a href="#SQL的数据定义" class="headerlink" title="SQL的数据定义"></a>SQL的数据定义</h2><p><strong>SQL模式的创建和撤销</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> SCHEMA <span class="operator">&lt;</span>模式名<span class="operator">&gt;</span> <span class="keyword">AUTHORIZATION</span> <span class="operator">&lt;</span>用户名<span class="operator">&gt;</span> <span class="operator">/</span><span class="operator">/</span>创建</span><br><span class="line"><span class="keyword">DROP</span> SCHEMA <span class="operator">&lt;</span>模式名<span class="operator">&gt;</span> [CASCADE<span class="operator">|</span>RESTRICT] <span class="operator">/</span><span class="operator">/</span>删除</span><br></pre></td></tr></table></figure><p>CASCADE级联式，直接删除；RESTRICT约束式，若模式下面有其他模式，则提示</p><p>SQL基本数据类型：数值型、字符串型、位串型、时间型</p><p><strong>基本表的创建</strong>、<strong>修改和撤销</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>创建</span><br><span class="line"><span class="keyword">CREATE</span>  <span class="keyword">TABLE</span>  S</span><br><span class="line">(S#    <span class="type">CHAR</span>(<span class="number">4</span>)  <span class="keyword">NOT</span>  <span class="keyword">NULL</span>,</span><br><span class="line"> SNAME  <span class="type">CHAR</span>(<span class="number">8</span>)  <span class="keyword">NOT</span>  <span class="keyword">NULL</span>,</span><br><span class="line"> AGE<span class="type">CHAR</span>(<span class="number">1</span>),</span><br><span class="line"> SEX    <span class="type">CHAR</span>(<span class="number">1</span>),</span><br><span class="line">   <span class="keyword">PRIMARY</span>  KEY(S#));</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>修改</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>基本表名<span class="operator">&gt;</span> <span class="keyword">ADD</span> <span class="operator">&lt;</span>列名<span class="operator">&gt;</span> <span class="operator">&lt;</span>类型<span class="operator">&gt;</span> </span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>删除</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>基本表名<span class="operator">&gt;</span> <span class="keyword">DROP</span> <span class="operator">&lt;</span>列名<span class="operator">&gt;</span>［CASCADE│RESTRICT］</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>修改某个列</span><br><span class="line"><span class="keyword">ALTER</span>  <span class="keyword">TABLE</span>  S  MODIFY  S#  <span class="type">CHAR</span>(<span class="number">6</span>)</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>删除表</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>基本表名<span class="operator">&gt;</span>［CASCADE│RESTRICT］</span><br></pre></td></tr></table></figure><ul><li>CASCADE表示删除时自动删除该列的视图和约束，RESTRICT则拒绝删除</li><li>CAHR提前给一个固定的地址大小，VARCHAR根据实际情况调整大小（在范围内）</li></ul><p><strong>索引的创建和撤销</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>创建</span><br><span class="line"><span class="keyword">CREATE</span> ［<span class="keyword">UNIQUE</span>］ INDEX  <span class="operator">&lt;</span>索引名<span class="operator">&gt;</span> <span class="keyword">ON</span>  <span class="operator">&lt;</span>基本表名<span class="operator">&gt;</span>(列名表) </span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>撤销</span><br><span class="line"><span class="keyword">DROP</span>  INDEX  <span class="operator">&lt;</span>索引名<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><h2 id="SQL的数据查询"><a href="#SQL的数据查询" class="headerlink" title="SQL的数据查询"></a>SQL的数据查询</h2><p><strong>SELECT查询语句</strong></p><ul><li>SELECT-FROM-WHERE句型</li><li>WHERE子句的条件表达式可用的运算符<ul><li>算数比较 &lt;…</li><li>逻辑 AND…</li><li>集合成员资格 IN…</li><li>谓词 EXISTS…</li><li>聚合函数 AVG…</li><li>另一个SELECT语句嵌套</li><li>集合 UNION…</li></ul></li></ul><p><strong>SLECT语句的图示化</strong></p><p>（C2是常量，P是要打印的数据）</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210316183159.png" alt="image-20210316183152291"></p><p><strong>聚合函数</strong></p><ul><li>COUNT(*) 计算元组个数  </li><li>COUNT(列名) 对一列中的值计算个数</li><li>SUM(列名) 对某一列的值的总和</li><li>AVG</li><li>MAX</li><li>MIN</li><li>…</li></ul><p><strong>其他</strong></p><ul><li>*表示所有的列</li><li>DISTINCT取出不同的</li></ul><p><strong>SELECT完整语句</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 目标表的列名或列表达式序列</span><br><span class="line"><span class="keyword">FROM</span> 基本表名和（或）视图序列</span><br><span class="line">[<span class="keyword">WHERE</span> 行条件表达式]</span><br><span class="line"> [<span class="keyword">GROUP</span> <span class="keyword">BY</span> 列名序列 ]</span><br><span class="line">   [<span class="keyword">HAVING</span> 组条件表达式 ]</span><br><span class="line"> [<span class="keyword">ORDER</span> <span class="keyword">BY</span> 列名[<span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>]，…]</span><br></pre></td></tr></table></figure><p><strong>基本表的连接</strong></p><div class="table-container"><table><thead><tr><th>连接类型</th><th>连接条件</th></tr></thead><tbody><tr><td>INNER JOIN 内连接</td><td>NATURAL</td></tr><tr><td>LEFT OUTER JOIN 左外连接</td><td>ON 等值连接条件</td></tr><tr><td>RIGHT OUTER JOIN 右外连接</td><td>USING(A1,A2,…,An)</td></tr><tr><td>FULL OUTER JOIN 完全外连接</td></tr></tbody></table></div><p><strong>递归查询</strong></p><p>假设课程有先修与后继的联系</p><p>COURSE(C#,CNAME,PC#)</p><p>设临时关系W（C#，PC#）的属性表示课程号、直接或间接先修课的课程号。求W，可以利用这样两个规则：</p><p><strong>① W(x,y)← COURSE(x,u,y)</strong></p><p><strong>② W(x,y)← COURSE(x,u,z)∧ W(z,y)</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> <span class="keyword">RECURSIVE</span> W(C#, PC#) <span class="keyword">AS</span></span><br><span class="line">(<span class="keyword">SELECT</span> C#, PC# <span class="keyword">FROM</span> COURSE)</span><br><span class="line">    <span class="keyword">UNION</span></span><br><span class="line">        (<span class="keyword">SELECT</span> W1.C#, W2.PC#</span><br><span class="line">        <span class="keyword">FROM</span> COURSE <span class="keyword">AS</span> W1, W <span class="keyword">AS</span> W2</span><br><span class="line">        <span class="keyword">WHERE</span> W1.PC#<span class="operator">=</span>W2.C#)</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> W;</span><br></pre></td></tr></table></figure><h2 id="数据更新"><a href="#数据更新" class="headerlink" title="数据更新"></a>数据更新</h2><p><strong>数据插入</strong></p><ul><li><p>单元组插入</p><p> INSERT INTO基本表名[(列名表)] VALUES(元组值)</p></li><li><p>多元组插入</p><p>INSERT INTO 基本表名 [(列名表)]</p><p>VALUES (元组值),(元组值)，……，(元组值)</p></li><li><p>查询结果插入</p><p>INSERT INTO 基本表名 [(列名表)]<SELECT查询语句></p></li><li><p>表的插入</p><p>INSERT INTO 基本表名1[(列名表)]TABLE 基本表名2</p></li></ul><p><strong>数据删除</strong></p><p>DELETE FROM 基本表名</p><p>[WHERE 条件表达式]</p><p><strong>数据修改</strong></p><p>UPDATE</p><h2 id="视图的定义和对视图的操作"><a href="#视图的定义和对视图的操作" class="headerlink" title="视图的定义和对视图的操作"></a>视图的定义和对视图的操作</h2><p><strong>视图的创建和撤销</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> <span class="operator">&lt;</span>视图名<span class="operator">&gt;</span>（列表名）</span><br><span class="line"></span><br><span class="line"><span class="keyword">AS</span> <span class="operator">&lt;</span><span class="keyword">SELECT</span> 查询语句<span class="operator">&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>视图实际上对应一个查询语句</p><p>DROP VIEW</p><p><strong>对视图的更新操作</strong></p><p>如果视图是从单个基本表只使用选择、投影操作导出的，并且包含了基本表的主键，那么这样的视图称为<em>行列子集视图</em>，并且可以被执行更新操作。</p><p><strong>视图的优点</strong></p><ol><li>视图提供了逻辑数据独立性</li><li>简化了用户观点</li><li>数据的安全保护功能</li></ol><h2 id="嵌入式SQL"><a href="#嵌入式SQL" class="headerlink" title="嵌入式SQL"></a>嵌入式SQL</h2><p>SQL的两种使用方式：</p><ol><li>终端交互方式下使用：交互式SQL</li><li>嵌入高级语言的程序中使用：嵌入式SQL</li></ol><p><strong>SQL的运行环境</strong></p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210316202532.png" alt="image-20210316202531831"></p><p><strong>嵌入式SQL的使用规定</strong></p><p>允许嵌入的SQL语句引用宿主语言的程序变量（称为共享变量）</p><ul><li>游标定义语句 DECLARE</li><li>游标打开语句 OPEN</li><li>游标推进语句 FETCH</li><li>游标关闭语句 CLOSE</li></ul><p><strong>嵌入式SQL的使用技术</strong></p><ol><li>不涉及游标的SQL DML语句</li><li>设计游标的SQL DML语句</li><li>卷游标的定义和推进</li></ol><p><strong>动态SQL语句</strong></p><p>EXEC SQL PREPARE &lt;动态SQL语句名&gt;</p><p>FROM &lt;共享变量或字符串&gt;</p><p>这个语句可以在程序运行时由用户输入才组合起来</p><p><strong>ODBC</strong></p><p>公共接口API</p><p>ODBC程序的基本流程</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210316205638.png" alt="image-20210316205638625"></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库引论  第二章 关系运算模型和关系运算理论</title>
      <link href="2021/03/15/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%95%E8%AE%BA%20%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E5%85%B3%E7%B3%BB%E8%BF%90%E7%AE%97%E6%A8%A1%E5%9E%8B%E5%92%8C%E5%85%B3%E7%B3%BB%E8%BF%90%E7%AE%97%E7%90%86%E8%AE%BA/"/>
      <url>2021/03/15/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%95%E8%AE%BA%20%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E5%85%B3%E7%B3%BB%E8%BF%90%E7%AE%97%E6%A8%A1%E5%9E%8B%E5%92%8C%E5%85%B3%E7%B3%BB%E8%BF%90%E7%AE%97%E7%90%86%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="2-1-关系模型的基本概念"><a href="#2-1-关系模型的基本概念" class="headerlink" title="2.1 关系模型的基本概念"></a>2.1 关系模型的基本概念</h2><p>概念</p><ul><li><p>用二维表格表示实体集，用关键码进行数据导航</p></li><li><p>属性、属性值、关系模式、元组、关系、行、列</p></li><li><p>关系元数、基数</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210309183459.png" alt="image-20210309183459413"></p></li><li><p>关键码</p><ul><li>超键</li><li>候选键</li><li>主键</li><li>外键</li></ul></li></ul><p>关系：属性数目和类型相同的元组的集合</p><p>性质</p><ul><li>每个属性值都不可分解</li><li>不允许出现重复元组（重复元组关系码会相同）</li><li>不考虑顺序（即行序）</li><li>属性理论上也无序，但使用时按习惯排列</li></ul><p>完整性规则</p><ol><li>实体完整性规则：主键不能是空值</li><li>参照完整性规则：“不允许引用不存在的实体”</li><li>用户定义的完整性规则：针对具体的数据进行的约束</li></ol><p>ER模型向关系模型的转换规则</p><ol><li>每个实体类型转换成一个关系模式</li><li>二元联系类型的转换<ul><li>1 对 1</li><li>1 对 N</li><li>N 对 N</li></ul></li></ol><p>三级模式</p><ul><li>关系模式</li><li>子模式/外模式：给特定用户使用</li><li>存储模式：文件内部的存储方式</li></ul><p>关系模型的形式定义：</p><ol><li><p>数据结构：全部数据和相互联系</p></li><li><p>数据操纵：一组完备的高级关系运算，关系代数、关系演算、关系逻辑</p></li><li><p>数据完整性规则</p></li></ol><h2 id="2-2-关系代数"><a href="#2-2-关系代数" class="headerlink" title="2.2 关系代数"></a>2.2 关系代数</h2><p>SQL -&gt; 查询优化 -&gt;关系代数表达式 </p><p>五个基本操作：并、差、笛卡尔积、投影（选择特定的列/属性）、选择（选择特定的行/元组）</p><p>四个组合操作</p><ul><li>交</li><li>连接 join<ul><li>θ连接</li><li>F连接</li></ul></li><li>自然连接：公共属性上值相等的进行连接</li><li>除法</li></ul><p>关系代数的七个扩充操作</p><ul><li>改名</li><li>广义投影</li><li>赋值</li><li><strong>外连接</strong></li><li><strong>外部并</strong></li><li><strong>半连接</strong></li><li>聚焦操作</li></ul><h2 id="2-3-关系演算"><a href="#2-3-关系演算" class="headerlink" title="2.3 关系演算"></a>2.3 关系演算</h2><p>元组关系演算</p><p>域关系演算</p><h2 id="2-4-关系代数表达式的优化"><a href="#2-4-关系代数表达式的优化" class="headerlink" title="2.4 关系代数表达式的优化"></a>2.4 关系代数表达式的优化</h2><p>等价变换规则</p><p>优化算法</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库引论 第一章 数据库概论</title>
      <link href="2021/03/15/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%95%E8%AE%BA%20%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E5%BF%B5/"/>
      <url>2021/03/15/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%95%E8%AE%BA%20%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="1-1-数据库的由来和发展"><a href="#1-1-数据库的由来和发展" class="headerlink" title="1.1 数据库的由来和发展"></a>1.1 数据库的由来和发展</h2><p>文件系统-&gt;数据库-&gt;数据仓库</p><p>数据库系统：</p><ul><li>层次数据库：IMS</li><li>网状数据库：IDS</li><li>关系数据库：Oracle、DB2 …</li><li>新一代数据库产品：MySQL、MongoDB、Redis、Neoj4、Kafka、Elastic Search …</li></ul><p>大数据时代：大数据思维 — 关联</p><h2 id="1-2-数据描述"><a href="#1-2-数据描述" class="headerlink" title="1.2 数据描述"></a>1.2 数据描述</h2><p>现实世界（概念设计）-&gt;数据库管理系统（逻辑设计）-&gt;数据库（物理设计）</p><p>数据模型：概念数据模型和逻辑数据模型（包括数据结构、数据操作和数据完整性约束）</p><h3 id="概念设计的数据描述"><a href="#概念设计的数据描述" class="headerlink" title="概念设计的数据描述"></a>概念设计的数据描述</h3><p>实体关系模型：实体、属性、联系。</p><p>数据联系的描述：</p><ul><li>二元联系：一对一、一对多、多对多</li><li>三元联系：乘客、飞机、航班</li><li>一元联系：零件和组成</li></ul><p>实体联系图（ER图）</p><h3 id="逻辑设计的数据描述"><a href="#逻辑设计的数据描述" class="headerlink" title="逻辑设计的数据描述"></a>逻辑设计的数据描述</h3><p>主要的数据模型：</p><ul><li>层次模型：树形</li><li>网状模型：有向图（和ER模型直接的映射）</li><li>关系模型：二维表格</li><li>对象模型：实体的模型化（类），对关系模型的补充（对象关系模型）</li></ul><p>数据描述：</p><ul><li>字段 field</li><li>记录 record</li><li>文件 file</li><li>关键码 key</li></ul><h3 id="物理设计的数据描述"><a href="#物理设计的数据描述" class="headerlink" title="物理设计的数据描述"></a>物理设计的数据描述</h3><p>bit、byte、word、block（内存和外存交换信息的最小单位）、bucket、volume</p><h2 id="1-3-数据库体系结构"><a href="#1-3-数据库体系结构" class="headerlink" title="1.3 数据库体系结构"></a>1.3 数据库体系结构</h2><p>三个层次：外部级（用户视图）、概念级（全局视图）、内部级（存储视图）</p><h2 id="1-4-数据库管理系统（DBMS）"><a href="#1-4-数据库管理系统（DBMS）" class="headerlink" title="1.4 数据库管理系统（DBMS）"></a>1.4 数据库管理系统（DBMS）</h2><h3 id="工作模式"><a href="#工作模式" class="headerlink" title="工作模式"></a>工作模式</h3><p>在应用程序和DB之间发挥作用</p><h3 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h3><ol><li>数据库定义</li><li>数据库操纵</li><li>数据库保护</li><li>数据库维护</li><li>数据字典</li></ol><h3 id="模块组成"><a href="#模块组成" class="headerlink" title="模块组成"></a>模块组成</h3><ul><li><p>数据库用户</p></li><li><p>查询处理器</p></li><li>存储管理器</li><li>磁盘存储器</li></ul><h2 id="1-5-数据库系统-（DBS）"><a href="#1-5-数据库系统-（DBS）" class="headerlink" title="1.5 数据库系统 （DBS）"></a>1.5 数据库系统 （DBS）</h2>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis</title>
      <link href="2021/03/14/Redis/"/>
      <url>2021/03/14/Redis/</url>
      
        <content type="html"><![CDATA[<p>Redis 是速度非常快的非关系型（NoSQL）内存键值数据库，可以存储键和五种不同类型的值之间的映射。</p><p>数据类型</p><ul><li>STRING：字符串、整数或者浮点数</li><li>LIST：列表</li><li>SET：无序集合</li><li>HASH：包含键值对的无序散列表</li><li>ZEST：有序集合</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL</title>
      <link href="2021/03/14/MySQL/"/>
      <url>2021/03/14/MySQL/</url>
      
        <content type="html"><![CDATA[<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>B Tree 平衡树：一颗查找树，且所有叶子节点位于同一层</p><p>B+ Tree：基于B Tree和叶子节点顺序访问指针实现，一个节点中的 key 从左到右非递减排列</p><p>MySQL索引</p><ul><li>B+Tree索引</li><li>哈希索引</li><li>全文索引</li><li>空间数据索引</li></ul><p>索引对中到大型的表十分有效，非常小的表适合直接全表扫描，特大型的表需要使用别的技术，比如分区技术。</p><h2 id="查询性能优化"><a href="#查询性能优化" class="headerlink" title="查询性能优化"></a>查询性能优化</h2><ul><li><p>优化数据访问</p><ul><li>减少请求的数据量</li><li>减少服务器扫描的次数</li></ul></li><li><p>重构查询方式</p><ul><li>切分大查询</li><li>分解大连接查询</li></ul></li></ul><h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><ul><li><p>InnoDB：MySQL默认的事务存储引擎</p></li><li><p>MyISAM</p></li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul><li>整型：TINYINT, SMALLINT, MEDIUMINT, INT, BIGINT </li><li>浮点数：FLOAT，DOUBLE，DECIMAL</li><li>字符串：CHAR，VARCHAR（变长）</li><li>时间：DATETIME 和 TIMESTAMP</li></ul><h2 id="切分"><a href="#切分" class="headerlink" title="切分"></a>切分</h2><ul><li>水平切分：将同一个表中的记录拆分到多个结构相同的表中。</li><li>垂直切分：将一张表按列切分成多个表，通常是按照列的关系密集程度进行切分。</li></ul><h2 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h2><ul><li><p>主从复制</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210314170503.png" alt="image-20210314170503058"></p></li><li><p>读写分离：主服务器处理写操作以及实时性要求比较高的读操作，而从服务器处理读操作</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SQL语法</title>
      <link href="2021/03/14/SQL%E8%AF%AD%E6%B3%95/"/>
      <url>2021/03/14/SQL%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line">## 注释</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> mytable; <span class="comment">-- 注释</span></span><br><span class="line"><span class="comment">/* 注释1</span></span><br><span class="line"><span class="comment">   注释2 */</span></span><br><span class="line">   </span><br><span class="line">## 创建</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE test;</span><br><span class="line">USE test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> mytable (</span><br><span class="line">...</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">## 修改表</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> mytable</span><br><span class="line"><span class="keyword">ADD</span> col <span class="type">CHAR</span>(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> mytable</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">COLUMN</span> col;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> mytable;</span><br><span class="line"></span><br><span class="line">## 插入数据</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> mytable(col1, col2)</span><br><span class="line"><span class="keyword">VALUES</span>(val1, val2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> mytable1(col1, col2)</span><br><span class="line"><span class="keyword">SELECT</span> col1, col2</span><br><span class="line"><span class="keyword">FROM</span> mytable2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> newtable <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> mytable;</span><br><span class="line"></span><br><span class="line">## 更新</span><br><span class="line">UPDATE mytable</span><br><span class="line"><span class="keyword">SET</span> col <span class="operator">=</span> val</span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">## 删除</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">## 查询语法</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> col1, col2</span><br><span class="line"><span class="keyword">FROM</span> mytable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line">LIMIT <span class="number">2</span>, <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">## 排序</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> col1 <span class="keyword">DESC</span>, col2 <span class="keyword">ASC</span>;</span><br><span class="line"></span><br><span class="line">## 过滤</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">WHERE</span> col <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line">## 通配符</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">WHERE</span> col <span class="keyword">LIKE</span> <span class="string">&#x27;[^AB]%&#x27;</span>; </span><br><span class="line"></span><br><span class="line">## 计算</span><br><span class="line"><span class="keyword">SELECT</span> col1 <span class="operator">*</span> col2 <span class="keyword">AS</span> alias</span><br><span class="line"><span class="keyword">FROM</span> mytable;</span><br><span class="line"></span><br><span class="line">## 函数</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(<span class="keyword">DISTINCT</span> col1) <span class="keyword">AS</span> avg_col</span><br><span class="line"><span class="keyword">FROM</span> mytable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">WHERE</span> SOUNDEX(col1) <span class="operator">=</span> SOUNDEX(<span class="string">&#x27;apple&#x27;</span>)</span><br><span class="line"></span><br><span class="line">## 分组</span><br><span class="line"><span class="keyword">SELECT</span> col, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> num</span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> col;</span><br><span class="line"></span><br><span class="line">## 子查询</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> mytable1</span><br><span class="line"><span class="keyword">WHERE</span> col1 <span class="keyword">IN</span> (<span class="keyword">SELECT</span> col2</span><br><span class="line">               <span class="keyword">FROM</span> mytable2);</span><br><span class="line">               </span><br><span class="line">## 连接</span><br><span class="line"><span class="keyword">SELECT</span> A.value, B.value</span><br><span class="line"><span class="keyword">FROM</span> tablea <span class="keyword">AS</span> A <span class="keyword">INNER</span> <span class="keyword">JOIN</span> tableb <span class="keyword">AS</span> B</span><br><span class="line"><span class="keyword">ON</span> A.key <span class="operator">=</span> B.key;<span class="comment">--内连接</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> e1.name</span><br><span class="line"><span class="keyword">FROM</span> employee <span class="keyword">AS</span> e1 <span class="keyword">INNER</span> <span class="keyword">JOIN</span> employee <span class="keyword">AS</span> e2</span><br><span class="line"><span class="keyword">ON</span> e1.department <span class="operator">=</span> e2.department</span><br><span class="line">      <span class="keyword">AND</span> e2.name <span class="operator">=</span> &quot;Jim&quot;;<span class="comment">--自连接</span></span><br><span class="line">      </span><br><span class="line"><span class="keyword">SELECT</span> A.value, B.value</span><br><span class="line"><span class="keyword">FROM</span> tablea <span class="keyword">AS</span> A <span class="keyword">NATURAL</span> <span class="keyword">JOIN</span> tableb <span class="keyword">AS</span> B;<span class="comment">--自然连接</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> Customers.cust_id, Customer.cust_name, Orders.order_id</span><br><span class="line"><span class="keyword">FROM</span> Customers <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> Orders</span><br><span class="line"><span class="keyword">ON</span> Customers.cust_id <span class="operator">=</span> Orders.cust_id;<span class="comment">--外连接</span></span><br><span class="line"></span><br><span class="line">## 组合查询</span><br><span class="line"><span class="keyword">SELECT</span> col</span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">WHERE</span> col <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> col</span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">WHERE</span> col <span class="operator">=</span><span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">## 视图</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> myview <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> Concat(col1, col2) <span class="keyword">AS</span> concat_col, col3<span class="operator">*</span>col4 <span class="keyword">AS</span> compute_col</span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">WHERE</span> col5 <span class="operator">=</span> val;</span><br></pre></td></tr></table></figure><p>其他语法：</p><ul><li>存储</li><li>游标</li><li>触发器</li><li>事务管理</li><li>字符集</li><li>权限管理</li><li>…</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库系统原理</title>
      <link href="2021/03/14/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/"/>
      <url>2021/03/14/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>概念：满足ACID特性的一组操作，Commit提交，Rollback回滚</p><p>ACID：</p><ol><li><p>原子性</p></li><li><p>一致性</p></li><li><p>隔离性</p></li><li><p>持久性</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210311221928.png" alt="image-20210311221928533"></p></li></ol><p>MySQL默认采用自动提交模式，每个查询操作都会被当做一个事务并自动提交</p><h2 id="并发一致性问题"><a href="#并发一致性问题" class="headerlink" title="并发一致性问题"></a>并发一致性问题</h2><p>产生原因：并发环境下，事务的隔离性很难保证</p><ul><li>丢失修改</li><li>读脏数据</li><li>不可重复读</li><li>幻影读</li></ul><h2 id="封锁"><a href="#封锁" class="headerlink" title="封锁"></a>封锁</h2><p>锁开销和并发程度的平衡</p><p>行级锁和表级锁</p><p>类型</p><ol><li>读写锁：互斥锁（X）/共享锁（S） （行级锁）</li><li>意向锁：增加IX/IS（表级锁）</li></ol><p>封锁协议</p><ol><li>三级封锁协议</li><li>两段锁协议</li></ol><h2 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h2><ul><li>未提交读</li><li>提交读</li><li>可重复读</li><li>可串行化</li></ul><p>隔离级别能解决的并发一致性问题</p><div class="table-container"><table><thead><tr><th></th><th>脏读</th><th>不可重复读</th><th>幻影读</th></tr></thead><tbody><tr><td>未提交读</td><td>×</td><td>×</td><td>×</td></tr><tr><td>提交读</td><td>√</td><td>×</td><td>×</td></tr><tr><td>可重复读</td><td>√</td><td>√</td><td>×</td></tr><tr><td>可串行化</td><td>√</td><td>√</td><td>√</td></tr></tbody></table></div><h2 id="多版本并发控制"><a href="#多版本并发控制" class="headerlink" title="多版本并发控制"></a>多版本并发控制</h2><p>MySQL的InnoDB存储引擎实现隔离级别的一种具体方式，用于实现提交读和可重复读这两种隔离级别。</p><h2 id="Next-Key-Locks"><a href="#Next-Key-Locks" class="headerlink" title="Next-Key Locks"></a>Next-Key Locks</h2><p>MySQL的InnoDB存储引擎的一种锁实现。</p><ul><li>Record Locks</li><li>Gap Locks</li><li>Next-Key Locks</li></ul><h2 id="关系数据库设计理论"><a href="#关系数据库设计理论" class="headerlink" title="关系数据库设计理论"></a>关系数据库设计理论</h2><ul><li>函数依赖：B函数依赖于A A-&gt;B</li><li>异常<ul><li>冗余数据</li><li>修改异常</li><li>删除异常</li><li>插入异常</li></ul></li><li>范式：用于解决异常<ul><li>第一范式：属性不可分</li><li>第二范式：每个非主属性完全依赖与键码</li><li>第三范式：非主属性不传递函数依赖于键码</li></ul></li></ul><h2 id="ER图"><a href="#ER图" class="headerlink" title="ER图"></a>ER图</h2><p>Entity-Relationship</p><p>实体、属性、联系</p><p>实体联系</p><ul><li><p>一对一</p></li><li><p>一对多</p></li><li><p>多对多</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210314160721.png" alt="image-20210314160714021"></p></li></ul><p>多次出现的关系</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210314160757.png" alt="image-20210314160757908"></p><p>多向的联系</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210314160905.png" alt="image-20210314160905040"></p><p>子类</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210314160840.png" alt="image-20210314160840089"></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第1章 量化设计与分析基础</title>
      <link href="2021/03/14/%E7%AC%AC1%E7%AB%A0%20%E9%87%8F%E5%8C%96%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90%E5%9F%BA%E7%A1%80/"/>
      <url>2021/03/14/%E7%AC%AC1%E7%AB%A0%20%E9%87%8F%E5%8C%96%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>体系结构：涵盖了计算机设计的所有三个方面：指令集体系结构、组成、硬件</p><h2 id="可信任度"><a href="#可信任度" class="headerlink" title="可信任度"></a>可信任度</h2><ul><li><p>模块可靠性：从一个参考初始时刻开始持续提供服务的度量。</p></li><li><p>模块可用性：系统正常工作的时间在连续两次正常服务间隔时间中所占的比率 </p><script type="math/tex; mode=display">可用性=\frac{MTTF}{MTTF+MTTR}</script></li></ul><h2 id="性能的测量、报告和汇总"><a href="#性能的测量、报告和汇总" class="headerlink" title="性能的测量、报告和汇总"></a>性能的测量、报告和汇总</h2><p>计算机用户关心缩短响应时间（执行时间），数据处理中心的操作人员关心吞吐量</p><p>X比Y快：X的执行时间比Y少</p><p>响应时间和CPU时间</p><p>基准测试程序：对使用同一种语言编写的程序采用同一种编译器和相同的一组编译标志</p><p>基准测试程序套件：由各种不同的真实应用程序构成，SPEC系列</p><p>SPECRatio：将基准计算机上的执行时间除以待评价计算机上的执行时间，得到一个与性能成正比的比值。用几何平均来计算均值。</p><script type="math/tex; mode=display">几何平均=\sqrt[n]{\prod_{i=1}^{n}{样本_i}}</script><h2 id="计算机设计的量化原理"><a href="#计算机设计的量化原理" class="headerlink" title="计算机设计的量化原理"></a>计算机设计的量化原理</h2><p>充分利用并行性、程序局部性原理（时间和空间）、重点关注经常性事件</p><p>Amdahl定律：加快某部件执行速度所能获得的系统性能加速比，受限于该部件的执行时间占系统中总执行时间的百分比。</p><script type="math/tex; mode=display">加速比=\frac{1}{(1-可改进比例)+\frac{可改进比例}{部件加速比}}</script><p>如果只针对整个任务的一部分进行改进和优化，那么所获得的加速比不超过<strong>1/（1-可改进比例）</strong></p><p>处理器性能公式：</p><script type="math/tex; mode=display">CPU时钟周期数=\sum_{n=1}^{n}{(CPI_i*IC_i)}</script><script type="math/tex; mode=display">总CPI=\frac{时钟周期数}{IC}=\sum_{n=1}^{n}{(CPI_i*\frac{IC_i}{IC})}</script><p>其中$\frac{IC_i}{IC}$表示第i种指令在程序中所占比例</p>]]></content>
      
      
      <categories>
          
          <category> 计算机体系结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Home Page</title>
      <link href="2021/03/13/this-is-home-page/"/>
      <url>2021/03/13/this-is-home-page/</url>
      
        <content type="html"><![CDATA[<p>Welcome to my Blog !</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第二章 算法基础</title>
      <link href="2021/03/13/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
      <url>2021/03/13/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="2-1-插入排序"><a href="#2-1-插入排序" class="headerlink" title="2.1 插入排序"></a>2.1 插入排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> j &lt;- <span class="number">2</span> to length[A]</span><br><span class="line"><span class="keyword">do</span> key &lt;- A[j]</span><br><span class="line">    <span class="comment">//将A[j]插入A[1...j-1]</span></span><br><span class="line">    i = j - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i &gt; <span class="number">0</span> and A[i] &gt; key</span><br><span class="line">         A[i + <span class="number">1</span>] &lt;- A[i]</span><br><span class="line">         i &lt;- i - <span class="number">1</span></span><br><span class="line">    A[i + <span class="number">1</span>] &lt;- key</span><br></pre></td></tr></table></figure><p>正确性证明：循环不变式A[1…j-1]</p><ol><li>初始化：循环第一次迭代前为真</li><li>保持：若循环的某次迭代前为真，那么下次迭代前它仍然为真</li><li>终止：在循环终止时，不变式提供一个性质，该性质有助于证明算法正确性</li></ol><h2 id="2-2-分析算法"><a href="#2-2-分析算法" class="headerlink" title="2.2 分析算法"></a>2.2 分析算法</h2><ul><li><p>描述算法所用资源及其代价的模型：随机访问机RAM模型</p></li><li><p>最坏情况与平均情况分析：往往考虑最坏情况（例如输入数组是反向排好序的）</p></li><li><p>增长量级：只考虑运行时间公式中最重要的项，如Θ(n^2)</p></li></ul><h2 id="2-3-算法设计"><a href="#2-3-算法设计" class="headerlink" title="2.3 算法设计"></a>2.3 算法设计</h2><ul><li><p>分治法（Divide Conquer Combine）</p><p>归并排序</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210308152734.png" alt="image-20210308152734063"></p></li><li><p>归并排序的分析：递归树</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210308153637.png" alt="image-20210308153637122"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法导论 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第三章 函数的增长</title>
      <link href="2021/03/13/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%87%BD%E6%95%B0%E7%9A%84%E5%A2%9E%E9%95%BF/"/>
      <url>2021/03/13/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%87%BD%E6%95%B0%E7%9A%84%E5%A2%9E%E9%95%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="渐进记号"><a href="#渐进记号" class="headerlink" title="渐进记号"></a>渐进记号</h2><ul><li>Θ记号：等于（即f(n) = Θ(g(n))，f(n) = g(n)，下同）</li><li>O记号：小于等于、最坏情况，时间复杂度上界</li><li>Ω记号：大于等于</li><li>o记号：小于</li><li>ω记号：大于</li></ul><h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><ul><li>多项式</li><li>指数</li><li>对数</li><li>阶乘</li><li>多重函数（多重对数函数lg*n）</li><li>斐波那契数</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法导论 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络 知识点整理</title>
      <link href="2021/03/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%20%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/"/>
      <url>2021/03/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%20%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li><p>ISP：互联网服务提供商，多层次结构</p></li><li><p>通信方式：客户-服务器（C/S），对等（P2P）</p></li><li><p>电路交换和分组交换（时延=排队时延+处理时延+传输时延+传播时延）</p></li><li><p>OSI（七层协议）、五层协议、TCP/IP（四层）</p></li></ul><h2 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h2><ul><li><p>单工通信、半双工通信和全双工通信</p></li><li><p>带通调制：数字信号（离散）-&gt; 模拟信号（连续）</p></li></ul><h2 id="链路层"><a href="#链路层" class="headerlink" title="链路层"></a>链路层</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul><li>封装成帧：给网络层的分组（IP数据报）添加首部和尾部</li><li>透明传输：给数据中和首部尾部相同的内容加转义字符（透明）</li><li>差错检测：主要使用循环冗余码CRC</li></ul><h3 id="信道"><a href="#信道" class="headerlink" title="信道"></a>信道</h3><ul><li>分类：广播信道（用信道复用技术和CSMA/CD协议控制）和点对点信道（用PPP协议控制）</li><li>信道复用技术：频分复用、时分复用、统计时分复用、波分复用、码分复用（码片正交）</li><li>CSMA/CD协议：每个主机都不停监听信道，如果在发送过程中其他主机正在发送，说明发生了碰撞（因为有传播时延），等待一段时间在发送（用截断二进制指数退避法确定时间）</li><li>争用期：传播时延的两倍</li><li>PPP协议：用户计算机和ISP之间的链路层协议</li></ul><h3 id="其他概念"><a href="#其他概念" class="headerlink" title="其他概念"></a>其他概念</h3><ul><li>MAC地址：6字节，用于唯一标识网络适配器（网卡）</li><li>局域网：一种典型的广播信道，主要以太网（星型）等</li><li>交换机：存储MAC地址到接口的映射</li><li>虚拟局域网：用于建立和物理位置无关的逻辑组</li></ul><h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h2><h3 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h3><ul><li><p>数据报格式</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210307211309.jpg" alt="IP former"></p></li><li><p>编址方式：网络号+子网号+主机号、CIDR记法（无分类，网络前缀号+主机号）</p></li></ul><h3 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h3><ul><li>地址解析协议ARP：<br>实现由IP地址得到MAC地址，每个主机上有一个ARP高速缓存，保存本地局域网上的各主机和路由器的IP地址到MAC地址到映射表。若没有映射会发送广播请求。</li><li>网际控制报文协议ICMP<br>更有效地转发IP数据报和提高交付成功的机会。<br>Ping：用来测试两台主机之间的联通性。<br>Traceroute：用来跟踪一个分组从源点到终点的路径。</li></ul><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><ul><li>路由器<br>功能：路由转发和分组转发<br>组成：交换结构、一组输入端口和一组输出端口</li><li>分组转发流程</li><li>路由选择协议<ol><li>内部网关协议RIP</li><li>内部网关协议OSPF</li><li>外部网关协议BGP</li></ol></li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li>虚拟专用网VPN（机构内使用仅在本机有效的专用地址块，有三个）</li><li>网络地址转换NAT：将专用网内部的主机使用的本地IP转换成全球IP</li></ul><h2 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h2><h3 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h3><ul><li><p>格式</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210307213854.png" alt="image-20210307213853892"></p></li><li><p>三次握手</p></li><li><p>四次挥手</p></li><li><p>可靠传输：采用超时重传机制</p></li><li><p>滑动窗口和流量控制</p></li><li><p>拥塞控制</p><ol><li>慢开始和拥塞避免</li><li>快重传与快恢复</li></ol></li></ul><h3 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h3><p>格式</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210307214238.png" alt="image-20210307214238091" style="zoom:50%;" /></p><h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><p>提供主机名和IP地址之间的相互转换</p><h3 id="Web页面请求过程"><a href="#Web页面请求过程" class="headerlink" title="Web页面请求过程"></a>Web页面请求过程</h3><ol><li>DHCP配置主机信息</li><li>ARP解析MAC地址</li><li>DNS解析域名</li><li>HTTP请求页面</li><li>浏览器渲染</li></ol><h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><ul><li>方法、状态码、首部字段</li><li>HTTPS、HTTP1.1特性</li></ul><h3 id="其他协议"><a href="#其他协议" class="headerlink" title="其他协议"></a>其他协议</h3><ul><li>FTP文件传输协议</li><li>DHCP动态主机配置协议</li><li>TELNET远程登录协议</li><li>电子邮件协议SMTP和POP3/IMAP</li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>操作系统 知识点总结</title>
      <link href="2021/03/13/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%20%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
      <url>2021/03/13/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%20%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><h3 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h3><ul><li>进程是资源分配的单位。</li><li>线程是独立调度的基本单位，是进程内部的一个执行序列。是进程划分的更小的运行单位。</li><li>线程共享进程的堆和方法区（元空间），每个线程有自己的程序计数器、虚拟机栈和本地方法栈。</li></ul><h3 id="进程状态"><a href="#进程状态" class="headerlink" title="进程状态"></a>进程状态</h3><p>5种状态：new, ready, running, waiting, terminated.</p><h3 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h3><p>7种常见方式：管道/匿名管道（父子进程或兄弟进程间）、有名管道（实现本机任意两个进程通信）、信号、消息队列（消息的列表，存放在内核，克服了信号承载信息量少，管道只能承载无格式字节流以及缓冲区大小受限等缺陷）、信号量、共享内存、套接字（客户端和服务器之间）。</p><h3 id="进程调度算法"><a href="#进程调度算法" class="headerlink" title="进程调度算法"></a>进程调度算法</h3><ul><li>先到先服务</li><li>短作业优先</li><li>时间片轮转</li><li>多级反馈队列调度</li><li>优先级调度</li></ul><h3 id="进程同步"><a href="#进程同步" class="headerlink" title="进程同步"></a>进程同步</h3><ul><li>概念：临界区、同步与互斥</li><li>信号量解决同步问题</li><li>管程：把同步互斥问题的代码独立出来</li><li>经典问题：哲学家进餐、读者写者</li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ol><li>孤儿进程（父进程退出，子进程还在，没有危害），僵尸进程（子进程退出，父进程没有释放子进程信息，可能因为没有可用进程号导致不能产生新进程）</li><li>线程同步：互斥量、信号量、事件</li><li>实时系统（硬实时和软实时）</li></ol><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><ul><li><p>必要条件：互斥、占有等待、不可抢占、环路等待</p></li><li><p>处理方法</p></li></ul><ol><li>鸵鸟策略：Unix,Linux,Windows都采用</li><li>死锁检测和恢复</li><li>死多预防（破坏必要条件）</li><li>死锁避免：安全状态、银行家算法</li></ol><h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><p>内存管理主要负责内存的分配和回收以及地址转换。</p><h3 id="内存管理机制"><a href="#内存管理机制" class="headerlink" title="内存管理机制"></a>内存管理机制</h3><ul><li><p>虚拟内存：让物理内存扩充成更大的逻辑内存，MMU管理地址空间和物理内存的转换</p></li><li><p>连续：块式</p></li><li><p>非连续</p></li></ul><ol><li>页式：页表（页和页框段映射表），页面号+偏移量。</li><li>段式：一个段构成一个独立地址空间，共享和保护。</li><li>段页式：先分成若干段，每段再分成若干页。</li></ol><ul><li><p>快表TLB（加速虚拟地址到物理地址的转换）和多级页表（避免把全部页表一直放在内存中占用过多空间）。</p></li><li><p>分页大小固定，分段大小不固定，段是逻辑信息的基本单位。分页是一维的，分段是二维的。</p></li><li><p>内部碎片和外部碎片</p></li><li><p>局部性原理：时间局部性和空间局部性</p></li><li><p>页面置换算法</p></li></ul><ol><li>OPT最佳</li><li>FIFO先进先出</li><li>LRU最近最久未使用</li><li>LFU最少使用</li><li>NRU最近未使用</li><li>第二次机会算法</li><li>时钟算法</li></ol><h2 id="存储管理"><a href="#存储管理" class="headerlink" title="存储管理"></a>存储管理</h2><ul><li><p>磁盘结构：盘面、磁道、扇区、磁头、制动手臂、主轴。</p></li><li><p>磁盘调度算法：</p></li></ul><ol><li>先来先服务</li><li>最短寻道时间优先（可能饥饿）</li><li>电梯算法</li></ol>]]></content>
      
      
      <categories>
          
          <category> OS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>操作系统 概论</title>
      <link href="2021/03/13/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%20%E6%A6%82%E8%AE%BA/"/>
      <url>2021/03/13/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%20%E6%A6%82%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="OS"><a href="#OS" class="headerlink" title="OS:"></a>OS:</h2><ol><li>管理计算机硬件和软件资源的程序</li><li>屏蔽了硬件层的复杂性</li><li>操作系统内核是核心，负责内存、硬件、文件系统和应用程序的管理。</li><li>操作系统的位数：根据CPU位数设计的</li><li>特征</li></ol><ul><li><p>并发：宏观</p></li><li><p>共享：互斥和同时</p></li><li><p>虚拟：时分复用/空分复用</p></li><li><p>异步</p></li></ul><h2 id="系统调用："><a href="#系统调用：" class="headerlink" title="系统调用："></a>系统调用：</h2><ol><li>用户态和系统态</li><li>程序需要使用系统级的功能 -&gt; 系统调用</li></ol><ul><li><p>设备管理</p></li><li><p>文件管理</p></li><li><p>进程控制</p></li><li><p>进程通信</p></li><li><p>内存管理</p></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol><li>宏内核（一个紧密结合整体）和微内核（只有微内核模块运行在内核态，其他在用户态）</li><li>中断分类</li></ol><ul><li><p>外中断：CPU执行以外的事件（I/O中断等）</p></li><li><p>异常：CPU执行的内部事件（地址溢出等）</p></li><li><p>陷入：系统调用</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> OS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JVM</title>
      <link href="2021/03/13/JVM/"/>
      <url>2021/03/13/JVM/</url>
      
        <content type="html"><![CDATA[<h2 id="运行时数据区域"><a href="#运行时数据区域" class="headerlink" title="运行时数据区域"></a>运行时数据区域</h2><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210310190456.png" alt="image-20210310190455920"></p><ul><li>程序计数器：记录正在执行的虚拟机字节码指令的地址</li><li>Java虚拟机栈：局部变量表、操作数栈、常量池引用</li><li>本地方法栈：为本地方法服务</li></ul><ul><li>堆：对象分配的内存</li><li>方法区：用于存放已被加载的类信息、常量、静态变量、即使编译器编译后的代码</li><li>运行常量池：方法区的一部分</li><li>直接内存</li></ul><h2 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h2><ul><li><p>判断一个对象是否可回收</p><ol><li>引用计数法</li><li>可达性分析法</li><li>方法区的回收</li><li>finalize()</li></ol></li><li><p>引用类型</p><ol><li>强引用：不会被回收</li><li>软引用：内存不够会回收</li><li>弱引用：一定会回收</li><li>虚引用：唯一目的是能在这个对象被回收时收到一个系统通知</li></ol></li><li><p>垃圾收集算法</p><ol><li><p>标记-清除</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210311201234.png" alt="image-20210311201234494"></p></li><li><p>标记-整理</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210311201254.png" alt="image-20210311201254800"></p></li><li><p>复制</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210311201310.png" alt="image-20210311201310907"></p></li><li><p>分代收集：将堆分为新生代和老年代，新生代用复制算法，老年代用标记-清除/标记-整理算法</p></li></ol></li><li><p>垃圾收集器</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210311201436.png" alt="image-20210311201436702"></p><ol><li>Serial收集器</li><li>ParNew收集器</li><li>Parallel Scavenge收集器</li></ol></li></ul><ol><li><p>Serial Old收集器</p><ol><li><p>Parallel Old收集器</p></li><li><p>CMS收集器</p></li><li>G1收集器</li></ol></li></ol><h2 id="内存分配和回收策略"><a href="#内存分配和回收策略" class="headerlink" title="内存分配和回收策略"></a>内存分配和回收策略</h2><p>Minor GC：回收新生代，执行频繁，速度快</p><p>Full GC：回收老年代和新生代，很少执行，速度慢</p><ul><li><p>内存分配策略</p><ol><li><p>对象优先在Eden分配</p></li><li><p>大对象直接进入老年代</p></li><li><p>长期存活的对象进入老年代</p></li><li><p>动态对象年龄判定</p></li><li>空间分配担保</li></ol></li><li><p>Full GC的触发条件</p><ol><li>调用System.gc()</li><li>老年代空间不足</li><li>空间分配担保失败</li><li>JDK1.7及以前的永久代空间不足</li><li>Concurrent Mode Failure</li></ol></li></ul><h2 id="类加载机制"><a href="#类加载机制" class="headerlink" title="类加载机制"></a>类加载机制</h2><ul><li>类的生命周期</li></ul><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210310192647.png" alt="image-20210310192647844"></p><ul><li>类加载过程<ol><li>加载：<ul><li>通过类的完全限定名称获取定义该类的二进制字节流。</li><li>将该字节流表示的静态存储结构转换为方法区的运行时存储结构。</li><li>在内存中生成一个代表该类的 Class 对象，作为方法区中该类各种数据的访问入口。</li></ul></li><li>验证：确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身安全</li><li>准备：为类变量分配内存并设置初始值，使用的是方法区的内存</li><li>解析：将常量池的符号引用替换为直接引用的过程</li><li>初始化：真正执行类中定义的Java程序的代码</li></ol></li><li>类初始化时机<ol><li>主动引用：五个场景，必须对类初始化<ol><li>遇到new、getstatic、putstatic、invokestatic</li><li>使用java.lang.reflect进行反射调用</li><li>要初始化类，但父类还没初始化</li><li>执行主类（包含main()）</li><li>当使用 JDK 1.7 的动态语言支持时，如果一个 java.lang.invoke.MethodHandle 实例最后的解析结果为 REF_getStatic, REF_putStatic, REF_invokeStatic 的方法句柄</li></ol></li><li>被动引用：不会触发初始化的引用</li></ol></li></ul><p>类和类加载器</p><ul><li>分类：启动类加载器/其他类加载器</li><li>双亲委派模型</li><li>自定义类加载器实现</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java容器</title>
      <link href="2021/03/13/Java%E5%AE%B9%E5%99%A8/"/>
      <url>2021/03/13/Java%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><p>Collection</p><ol><li>Set：TreeSet HashSet LinkedHashSet</li><li>List：ArrayList Vector(线程安全) LinkedList</li><li>Queue：LinkedList PriorityQueue(基于堆结构实现，可以实现优先级队列，构造大顶堆/小顶堆)</li></ol><p>Map：TreeMap HashMap HashTable(线程安全，但应该使用ConcurrentHashMap，其引入了分段锁，效率更高) LinkedHashMap</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>ArrayList</p><ul><li>支持快速随机访问、默认大小为10</li><li>基于动态数组实现，具有动态扩容性</li></ul><p>Vector</p><ul><li>和ArrayList类似，但用了synchronized进行同步，是线程安全的</li><li>可以用Collections.synchronizedList()得到线程安全的ArrayList代替</li></ul><p>CopyOnWriteArrayList</p><ul><li>读写分离，适用读多写少的情况</li></ul><p>LinkedList</p><ul><li>基于双向链表实现</li><li><p>不支持随机访问但插入删除效率高</p></li><li><p>HashSet基于HashMap实现（都是哈希表），LinkedHashSet是HashSet的子类，内部通过LinkedHashMap实现。</p></li><li><p>TreeSet/TreeMap有序且唯一，基于红黑树实现</p></li><li><p>Map（需要键值存储时）：需要排序使用TreeMap，不需要排序使用HashMap，需要保证线程安全时用ConcurrentHashMap</p></li><li>Collection（只需要存放元素）：需要唯一用Set，否则用List</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java基础</title>
      <link href="2021/03/13/Java%E5%9F%BA%E7%A1%80/"/>
      <url>2021/03/13/Java%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>数据类型：</p><ul><li>八大基本数据类型：byte char short int float long double boolean</li><li>包装类型：和基本类型对应，自动装箱和自动拆箱</li><li>缓存池：valueOf方法，如果数值在缓冲池范围内，直接调用缓冲池的对象</li></ul><p>String字符串</p><ul><li>Java8中内部用char数组存储，Java9之后，改用byte数组，并用coder标识编码方式</li><li>String内部定义为final，不可变（可用于缓存hash值）</li><li>StringBuilder（不是线程安全的）和StringBuffer（线程安全）可变</li><li>String Pool：保存所有字符串的字面量，如果还没有则编译时添加，也可用intern()添加</li></ul><p>运算</p><ul><li>Java参数使用值传递</li><li>类型转换：不能隐式向下转型，但++运算符会进行隐式类型转换</li></ul><p>关键字</p><ol><li>final：声明数据常量、声明不可重写方法、声明不可继承类</li><li>static：静态变量、静态方法等</li></ol><p>Object类的通用方法：</p><ul><li>equals()</li><li>hashcode()</li><li>toString()</li><li>clone()：浅拷贝引用同一对象，深拷贝引用不同对象</li><li>…</li></ul><p>继承</p><ul><li>访问权限修饰符：private protected public 不加表示package内可见</li><li>抽象类abstract class、接口interface</li><li>用super访问父类构造函数和成员</li><li>重写Override：重写一个和父类在方法声明上完全一样的方法</li><li>重载Overload：同一个类中指定参数不同的方法</li></ul><p>I/O</p><ul><li>磁盘操作：File</li><li>字节操作：InputStream和OutputStream，适用于媒体文件</li><li>字符操作：Reader和Writer，涉及到字符的时候使用</li><li>对象操作：<br>Serializable<br>序列化：将一个对象转换成字节序列，方便存储传输</li><li>网络操作：Socket</li><li>NIO<br>NIO以块的方式处理数据，I/O用流方式处理<br>NIO非阻塞<br>BIO同步阻塞式、NIO同步非阻塞、AIO异步非阻塞</li></ul><p>其他</p><ul><li><p>运行步骤：源代码经过JDK中的Javac编译成字节码，JVM再转换成可执行的二进制机器码</p></li><li><p>面向对象三大特性：封装、继承和多态</p></li><li><p>反射：运行时提供类的信息 java.lang.reflect</p></li><li><p>异常</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210309120121.png" alt="image-20210309120114463"></p></li><li><p>泛型、注解…</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java并发</title>
      <link href="2021/03/13/Java%E5%B9%B6%E5%8F%91/"/>
      <url>2021/03/13/Java%E5%B9%B6%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h2 id="使用线程"><a href="#使用线程" class="headerlink" title="使用线程"></a>使用线程</h2><ul><li>实现Runnable接口</li><li>实现Callable接口</li><li>继承Thread类</li><li>优先使用实现接口的方法，实现接口的方法只是一个可以在线程中运行的任务，任务是通过线程驱动执行的。</li></ul><h2 id="基础线程机制"><a href="#基础线程机制" class="headerlink" title="基础线程机制"></a>基础线程机制</h2><ul><li>Executor：用于管理多个异步任务<ul><li>CachedThreadPool：一个任务创建一个线程</li><li>FixedThreadPool：所有任务只能使用固定大小的线程</li><li>SingleThreadExecutor：相当于大小为1的FixedThreadPool</li></ul></li><li>Daemon：守护线程</li><li>sleep()：休眠当前正在执行的线程</li><li>yield()：声明当前线程已经完成主要任务，建议切换</li></ul><h2 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h2><ul><li>InterruptedException：中断时如果该线程处于阻塞、限期等待或无限期等待状态会抛出的异常，提前结束线程，但I/O阻塞和synchronized阻塞不能中断</li><li>Interrupted()</li><li>Executor的中断操作：shutdown()和shutdownNow()方法</li></ul><h2 id="互斥同步"><a href="#互斥同步" class="headerlink" title="互斥同步"></a>互斥同步</h2><ul><li>Synchronized：JVM提供，可以用来同步一个代码块/方法/类/静态方法</li><li>ReentrantLock：java.util.concurrent包中的锁（JDK实现的）</li><li>除非使用后者的高级功能，否则优先使用synchronized，不会产生死锁问题，JVM会确保锁的释放</li></ul><h2 id="线程之间的协作"><a href="#线程之间的协作" class="headerlink" title="线程之间的协作"></a>线程之间的协作</h2><ul><li>join()：在一个线程中调用另一个线程的join()方法，会挂起当前线程，直到目标线程结束</li><li>wait() notify() notifyAll()：调用 wait() 使得线程等待某个条件满足，线程在等待时会被挂起，当其他线程的运行使得这个条件满足时，其它线程会调用 notify() 或者 notifyAll() 来唤醒挂起的线程。（Object中的方法）</li><li>Await() signal() signalAll()：java.util.concurrent 类库中提供了 Condition 类来实现线程之间的协调，可以在 Condition 上调用 await() 方法使线程等待，其它线程调用 signal() 或 signalAll() 方法唤醒等待的线程。</li></ul><h2 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h2><ul><li>new 新建</li><li>Runnable 可运行</li><li>Blocked 阻塞（被动）</li><li>Waiting 无限期等待（主动）</li><li>Timed_waiting 限期等待（一定时间后被系统自动唤醒）</li><li>Terminated 死亡</li></ul><h2 id="J-U-C-AQS"><a href="#J-U-C-AQS" class="headerlink" title="J.U.C-AQS"></a>J.U.C-AQS</h2><ul><li>CountDownLatch：用来控制一个或多个线程等待多个线程</li><li>CyclicBarrier：用来控制多个线程互相等待，只有多个线程都到达了，线程才会继续执行</li><li>Semaphore：类似操作系统信号量，控制对互斥资源的访问</li></ul><h2 id="J-U-C-其他组件"><a href="#J-U-C-其他组件" class="headerlink" title="J.U.C-其他组件"></a>J.U.C-其他组件</h2><ul><li>FutureTask：可以异步获取执行结果或取消执行任务的场景</li><li>BlockingQueue：提供FIFO和优先级的阻塞队列实现方法，可以用于实现生产者消费者问题</li><li>ForkJoin：用于并行计算，类似于MapReduce</li></ul><h2 id="Java内存模型"><a href="#Java内存模型" class="headerlink" title="Java内存模型"></a>Java内存模型</h2><ul><li><p>主内存与工作内存</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210311194849.png" alt="image-20210311194849104"></p><p>所有变量都存储在主内存中</p></li><li><p>内存间交互操作：8个操作实现主内存和工作内存的交互</p><p><img src="https://gitee.com/freemansonary/markdown-pic-bed/raw/master/Typora/20210311194952.png" alt="image-20210311194952576"></p></li><li><p>内存模型三大特性</p><ul><li>原子性：上述8个操作具有原子性</li><li>可见性：一个线程修改共享变量的值，其他线程能够立刻得知修改（实现方式有volatile、synchronized、final）</li><li>有序性：本线程内观察，所有操作都是有序的；在一个线程内观察另一个线程，所有操作都是无序的</li></ul></li><li><p>先行发生原则：让一个操作无需控制就能先于另一个操作完成</p><ol><li>单一线程原则</li><li>管程锁定原则</li><li>volatile变量规则</li><li>线程启动规则</li><li>线程加入规则</li><li>线程中断规则</li><li>对象终结规则</li><li>传递性</li></ol></li></ul><h2 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h2><ul><li>不可变：一定线程安全，有final、String、枚举类型、Number部分子类</li><li>互斥同步：sychronized和ReentrantLock（阻塞同步）</li><li>非阻塞同步：乐观的并发策略，先执行，有冲突再补偿<ul><li>CAS乐观锁</li><li>AtomicInteger</li><li>ABA</li></ul></li><li>无同步方案：当方法不涉及共享数据时，就不用同步措施<ul><li>栈封闭</li><li>线程本地存储</li><li>可重入代码</li></ul></li></ul><h2 id="锁优化"><a href="#锁优化" class="headerlink" title="锁优化"></a>锁优化</h2><p>主要指JVM对synchronized的优化</p><ul><li>自旋锁：让一个线程在请求一个共享数据的锁时忙循环一段时间，若能获得锁，则可以避免阻塞状态</li><li>锁消除：对于检测出不可能存在竞争的共享数据的锁进行消除</li><li>锁粗化：若频繁对一个对象加锁解锁，则将加锁范围扩展到整个操作序列的外部</li><li>轻量级锁和偏向锁：JDK1.6引入</li></ul><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><ol><li><p>给线程起有意义的名字</p></li><li><p>缩小同步范围</p></li><li><p>多用同步工具少用wait()和notify()</p></li><li><p>使用BlockingQueue实现生产者消费者问题</p></li><li><p>多用并发集合少用同步集合</p></li><li><p>使用本地变量和不可变类来保证安全</p></li><li><p>使用线程池而不是直接创建线程</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>上车问题</title>
      <link href="2021/03/13/%E4%B8%8A%E8%BD%A6%E9%97%AE%E9%A2%98/"/>
      <url>2021/03/13/%E4%B8%8A%E8%BD%A6%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>问题描述：火车从始发站（第 1站）开出，在始发站上车的人数为 a，然后到达第 2 站，在第 2 站有人上、下车，但上、下车的人数相同，因此在第 2 站开出时车上的人数保持为 a 人。从第 3 站起，上、下车的人数有如下规律：上车的人数都是前两站上车人数之和，而下车人数等于上一站上车人数，一直到终点站的前一站。已知：共有 n 个车站，始发站上车的人数为 a ，终点站全部下车的人数是 m。试问 第x 站开出时车上的人数是多少？程序运行时，先输入四个整数：始发站上车人数 a，车站数 n，终点站下车人数 m 和所求的站点编号 x。要求输出从 x 站开出时车上的人数。</p><p>根据题意列出上车下车人数的表格：</p><div class="table-container"><table><thead><tr><th>车站</th><th>进站前人数</th><th>上车人数</th><th>下车人数</th><th>出站人数</th></tr></thead><tbody><tr><td>1</td><td>0</td><td>a</td><td>0</td><td>a</td></tr><tr><td>2</td><td>a</td><td>b</td><td>b</td><td>a</td></tr><tr><td>3</td><td>a</td><td>a+b</td><td>b</td><td>2a</td></tr><tr><td>4</td><td>2a</td><td>a+2b</td><td>a+b</td><td>2a+b</td></tr><tr><td>5</td><td>2a+b</td><td>2a+3b</td><td>a+2b</td><td>3a+2b</td></tr><tr><td>…</td><td>…</td><td>…</td><td>…</td><td>…</td></tr><tr><td>n-1</td><td>?</td><td>?</td><td>?</td><td>m</td></tr><tr><td>n</td><td>m</td><td>0</td><td>m</td><td>0</td></tr></tbody></table></div><p>根据表格本题的关键在于根据m求出b</p><p><em>m=f(n-1)a+g(n-1)b</em></p><p>求出f和g即可</p><p>而出站人数=进站人数 + 上车人数 - 下车人数</p><p>每站的上车人数和下车人数可以根据题意递推求得</p><p>据此可解决问题</p><p>C++代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cin</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//每一站上了多少a</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">upa</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> upa(n<span class="number">-1</span>) + upa(n<span class="number">-2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//每一站上了多少b</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">upb</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> upb(n<span class="number">-1</span>) + upb(n<span class="number">-2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//每一站下了多少a</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">downa</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span> || n==<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> upa(n<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//每一站下了多少b</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">downb</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> upb(n<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//每一站出的时候有多少a</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span> || n==<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (upa(n) - downa(n)) + f(n<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//每一站出的时候有多少b</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">g</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span> || n==<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (upb(n) - downb(n)) + g(n<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a, n, m, x;</span><br><span class="line">    <span class="keyword">int</span> b; <span class="comment">//b表示第二站上车人数</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入始发站上车人数，车站数，终点站下车人数和所求的站点编号：&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>; </span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据定义m=f(n-1)+g(n-1)，据此求出b</span></span><br><span class="line">b = (m-(f(n<span class="number">-1</span>) * a)) / g(n<span class="number">-1</span>);</span><br><span class="line">    <span class="comment">//计算第x站出站后人数</span></span><br><span class="line">ans = (f(x)*a) + (g(x)*b);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">&quot;第&quot;</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;x;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">&quot;站开出时车上的人数是:&quot;</span>; </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法题解 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/03/13/hello-world/"/>
      <url>2021/03/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
